// http://blog.hvidtfeldts.net/index.php/2011/08/distance-estimated-3d-fractals-iii-folding-space/

Iterations = 2;
Offset = 0;
Scale = 2;
tet = make_shape {
    dist p : (
        var z := p;
        var n := 0;
        while (n < Iterations) (
           //if (z'X+z'Y<0) z.xy = -z.yx; // fold 1
           //if (z'X+z'Z<0) z.xz = -z.zx; // fold 2
           //if (z'Y+z'Z<0) z.zy = -z.yz; // fold 3
           if (z[X]+z[Y]<0) z := [-z[Y], -z[X], z[Z]]; // fold 1
           if (z[X]+z[Z]<0) z := [-z[Z], z[Y], -z[X]]; // fold 2
           if (z[Y]+z[Z]<0) z := [z[X], -z[Z], -z[Y]]; // fold 3
           z := z*Scale - Offset*(Scale-1);
           n := n + 1;
        );
        mag(z) * Scale^-n
    ),
    bbox : everything.bbox,
    is_2d : false,
    is_3d : true,
};

/*
float DE(vec3 z)
{
    int n = 0;
    while (n < Iterations) {
       if(z.x+z.y<0) z.xy = -z.yx; // fold 1
       if(z.x+z.z<0) z.xz = -z.zx; // fold 2
       if(z.y+z.z<0) z.zy = -z.yz; // fold 3    
       z = z*Scale - Offset*(Scale-1.0);
       n++;
    }
    return (length(z) ) * pow(Scale, -float(n));
}
*/

/*
float DE(vec3 z)
{
    vec3 a1 = vec3(1,1,1);
    vec3 a2 = vec3(-1,-1,1);
    vec3 a3 = vec3(1,-1,-1);
    vec3 a4 = vec3(-1,1,-1);
    vec3 c;
    int n = 0;
    float dist, d;
    while (n < Iterations) {
         c = a1; dist = length(z-a1);
            d = length(z-a2); if (d < dist) { c = a2; dist=d; }
         d = length(z-a3); if (d < dist) { c = a3; dist=d; }
         d = length(z-a4); if (d < dist) { c = a4; dist=d; }
        z = Scale*z-c*(Scale-1.0);
        n++;
    }

    return length(z) * pow(Scale, float(-n));
}
*/
tet2 = make_shape {
    dist p : (
        // vertices of a tetrahedron
        var a1 := [1,1,1];
        var a2 := [-1,-1,1];
        var a3 := [1,-1,-1];
        var a4 := [-1,1,-1];

        var z := p;
        var n := 0;
        while (n < Iterations) (
            var c := a1;
            var dist := mag(z-a1);
            var d := mag(z-a2);
            if (d < dist) (
                c := a2;
                dist := d;
            );
            d := mag(z-a3);
            if (d < dist) (
                c := a3;
                dist := d;
            );
            d := mag(z-a4);
            if (d < dist) (
                c := a4;
                dist := d;
            );
            z := Scale*z - c*(Scale-1);
            n := n + 1;
        );
        mag(z) * Scale^(-n)
    ),
    bbox : everything.bbox,
    is_2d : false,
    is_3d : true,
};

tet2
