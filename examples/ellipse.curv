// Based on the standard cartesian equation for an ellipse.
ellipse(rx,ry) = make_shape {
    dist p : sqrt(p[X]^2/rx^2 + p[Y]^2/ry^2) - 1,
    bbox : [[-rx,-ry,0],[rx,ry,0]],
    is_2d : true,
    is_3d : false,
};
// The distance field is non-isotropic, exactly like a scaled circle.
de=ellipse(1,2) >> distance_field;

// Based on the polar equation for an ellipse.
pellipse(rx,ry) = make_shape {
    dist p : (
        var a := phase p;
        mag p - rx*ry / sqrt((rx*sin a)^2 + (ry*cos a)^2)
    ),
    bbox : [[-rx,-ry,0],[rx,ry,0]],
    is_2d : true,
    is_3d : false,
};
// The distance field is mostly euclidean. It's correct for points on the X
// and Y axes. Away from the axes, the distances are slightly too large,
// which is a problem for ray-marching. The distance field inside the ellipse
// is wild looking.
dpe = pellipse(1,2) >> distance_field;

// Next: try to compute a scaling factor for correcting the distance field
// outside of pellipse, perhaps based on the angle a. The result will still be
// an approximation, but it won't screw up ray marching.

// There is no closed-form solution.
// The best solution requires iteration and numerical methods.
// http://wwwf.imperial.ac.uk/~rn/distance2ellipse.pdf
//
// The Normal bisects the angle between the lines to the foci (wikipedia)

ellipse(2,1) >> distance_field
//circle 1 >> distance_field
