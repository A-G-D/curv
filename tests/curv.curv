let
assert(is_list 0 == false);
assert(is_list());

assert(bit(false)==0 && bit(true)==1);

assert( dot( [], []) == 0 );
assert( dot( [1,2], [3,4]) == 11 );
assert( dot( [[1,2],[3,4]], [[2,0],[1,2]]) == [[4,4],[10,8]] );
assert( dot( [[1,2,3],[4,5,6]], [9,8,7] ) == [46,118] );
assert( dot( [1,2,3], [[2,1,3],[3,3,2],[4,1,2]] ) == [20,10,13] );
assert(
    dot( [[[1],[2]],[[3],[4]]], [[1,2]] )
    == [[[1,2],[2,4]],[[3,6],[4,8]]]
);

assert(cross([2,3,4],[5,6,7]) == (-3,6,-3));

assert(
  identity 3 ==
  [[1,0,0],
   [0,1,0],
   [0,0,1]]
);

assert(
    (let a = 1;
         b = 2;
         c = let x=10; y=20 in [x,y];
     in [a,b,c])
    == [1,2,[10,20]]
);

assert(
    let r = {"x":1,y:2};
    in r.x==1 && r."y"==2
);

assert(
  let r = {a:1};
  in defined(r.a) && defined(r."a") && !defined(r.b)
);

assert(0..<5 == [0,1,2,3,4]);
assert((1,2,3)==[1,2,3] && (1,)==[1] && ()==[]);

assert(reverse(1,2,3) == [3,2,1] && reverse() == []);
assert(sum(1,2,3)==6 && sum()==0);

assert(
  (let f(x,y) = x+y; a = (2,3); in f a)
  == 5
);

assert((1,2,3)[0] == 1);
assert((1,2,3)[[0,2]] == [1,3]);

/*
assert(
    do var r := {a:1,b:2};
    in r'"a"==1 && r'["a","b"]==[1,2]
);
*/

assert((sqrt << 4) == 2);
assert((1..10 >> map(x->x^2) >> reverse) == [100,81,64,49,36,25,16,9,4,1]);

assert((let q=1; m={a=q;f x = x + a}; in m.f 3) == 4);

assert(
    let f x = if (x <= 0) 1 else x * f(x-1);
    in f 3 == 6
);

assert( 
    let f =
            let zero = 0;
                m = { f g x = if (x > zero) f g (g x) else x };
            in m.f(a->a-1);
    in f 3.25 == -.75
);
assert(
    let n=4;
        s=sqrt;
    in (let na = (n+5);
            rpr f = f na;
        in rpr s) == 3
);

assert(
    let a = 1;
        f x = x + a;
    in f 2 == 3
);

/*
assert(
    do var m := {var a:=1; var f x := x + a};
    in m.f 2 == 3
);
*/

assert(
    (let a=1 in do a:=a+2 in a) == 3
);

assert(
  (let a = 1;
   in do
      if (a > 0)
          a := a + 2
      else
          a := a - 2;
   in a) == 3
);

assert(
  (let a = 1;
   in do
      if (a > 0) (
          a := a + 2
      );
   in a) == 3
);

assert(
  (do var a := 1;
      var b := 2;
      if (a > 0) (
          a := a + 2;
          b := b + 3;
      );
   in a + b) == 8
);

assert(
    let Sum list =
            do  var i := 0;
                var total := 0;
                while (i < count list) (
                    total := total + list[i];
                    i := i + 1;
                );
            in total;
    in Sum(1,2,3) == 6
);

assert(
    is_null null && is_bool false && is_num 42 && is_string "" && is_list ()
    && is_record{a:1} && is_record{a=1} && is_record(cube 1) && !is_record()
    && is_fun(x->x) && is_shape(cube 1)
);

assert(
    transpose([1,1],[2,2]) == [[1,2],[1,2]]
);

assert( asin 1 == 1.5707963267948966 && acos 1 == 0 );

assert( round 0.5 == 0 && round 1.5 == 2 );

assert( indices(1,2) == [0,1] && fields{a:1} == [#a] );

assert(
    let a = {x:1, y:2};
    in {...a, x:3} == {x:3, y:2}
);

assert( merge({a:1,z:26},{b:17,a:42}) == {a:42,b:17,z:26} );

assert( {call x = x + 1} 3 == 4 );

assert( strcat("foo","bar",0) == "foobar0" );

assert(
    count "foo" == 3 && count "$." == 1 && count(repr "$.") == 4
    && count "$=" == 1
);

assert( "foo"[0] == "f" && "foobar"[[3,2,4]] == "boa" );

assert( [if (true) (;)] == [] );

assert( "$(2+2)" == "4" && "$("foo")" == "$=foo$=" && "${"foo"}" == "foo" );

assert( (let x=1 in x+2) == 3
    && (let x=2; y=3; in x+y) == 5
);
assert( [if (true) (1;2)] == [1,2] );
assert( {if (true) (a:1;b:2)} == {a:1,b:2} );

assert( (x+y where (x=1;y=2)) == 3 );

assert_error("foo",error "foo");
assert_error(
    "assertion failed: expected error $=foo$=, actual error $=bar$=",
    do assert_error("foo",error "bar") in null);
assert_error(
    "assertion failed: expected error $=foo$=, got value $=bar$=",
    do assert_error("foo","bar") in null);

exec(file "scope.curv");

assert_error(
    "argument #1 of file: illegal recursive reference to file $=a$=",
    file "a");

assert({a:1;b:2} == {a:1,b:2});

let include{a:1,b:2} in assert(a+b==3);
let include{a=1;b=2} in assert(a+b==3);

let [a,(b,(c))] = [1,[2,3]] in assert(a+b+c==6);

let {a,b}={a:1,b:2} in assert(a+b==3);

assert_error(
    "record has an unmatched field named a",
    do var {x}:={x:1,a:2} in x);
assert_error(
    "record is missing a field named a",
    do var {a}:={x:1} in a);

let {a,b=2} = {a:1} in assert(a+b==3);

let {a=10,b=20,c} = {c:30} in assert([a,b,c]==[10,20,30]);
let {a=11,b=22,c=33} = {} in assert([a,b,c]==[11,22,33]);
assert_error(
    "record has an unmatched field named d",
    let {a=12,b=23,c=34} = {d:true} in [a,b,c]
);
let {} = {} in (;);
let () = () in (;);
let [] = [] in (;);

let {a:[x,y]} = {a:[1,2]} in assert([x,y]==[1,2]);
let {"foo bar": fb} = {"foo bar":42} in assert(fb == 42);

let f={a,b}->a+b in assert(f{a:3,b:4} == 7);
let f{a,b}=a+b in assert(f{a:30,b:40} == 70);

assert(decode[65,66,67] == "ABC");
assert_error(
    "at index [0]: argument #1 of decode: 0 is not in the range 1..127",
    decode[0]);
assert(encode "ABC" == [65,66,67]);
assert("$[65,66,67]" == "ABC");

let f = match [
        [a,b,c] -> a+b+c;
        x -> null;
    ];
in assert( [f(1,2,3), f 17] == [6,null] );

assert( (3 `max` 5) == 5 );

let (b :: is_bool, n :: is_num) = (false,0) in assert(!b && n==0);

assert(
    (42 >> match [
        (b :: is_bool) -> error "can't happen";
        (n :: is_num) -> n+1 ])
    == 43);

assert( {a:} == {a:true} );

let f = match [
    {nothing:} -> "nothing";
    {just: a} -> "just $a";
    ];
in (
    assert(f{nothing:} == "nothing");
    assert(f{just:42} == "just 42");
);

do
    var a := 42;
    for (i in 1..3)
        let n = i;
        in a := a + n;
in assert(a == 48);

assert(
    {for ((i,j) in 1..3>>map(x->(x,x^2))) "$i":j}
    == {"1":1, "2":4, "3":9}
);

assert( sort[7,8,9,1,2,3] == [1,2,3,7,8,9] );

let f (x::is_num) (y::is_num) = x + y;
in (
    assert_error("argument #1 of f: argument #true does not match is_num", f true);
    assert_error("argument #2 of f: argument #true does not match is_num", f 1 true);
);

let
    d = file "dir";
    r = {n:42, d:{b:true}};
in (
    assert("$d" == "{d,n}");
    assert(defined(d.n) && defined(d.d));
    assert(d.d.b == true);
    assert(d == r);
    assert(r == d);
);

let {a::is_num;} = {a:42};
    b :: is_num = 17;
in assert(a == 42 && b == 17);


assert((1::is_num) == 1);
assert_error("predicate assertion failed", true::is_num);

let
    r = parametric a=1,b=2 in {x:a,y:b};
    r2 = r{a:10,b:20};
in (
    assert(fields r == [#argument,#constructor,#x,#y]);
    assert(r.x == 1 && r.y == 2);
    assert(r.argument == {a:1,b:2});
    //assert(fields r2 == [#argument,#constructor,#x,#y]);
    assert(r2.x == 10 && r2.y == 20);
    //assert(r2.argument == {a:10,b:20});
);

let s = slider(1,10);
in (
    // assert(is_fun s); // TODO: is_fun doesn't work on picker predicates
    assert(s 10);
    assert(!(s true));
);

let a = b where b = 1; in assert(a == 1);

assert(contains([1,2,3],1) && !contains([1,2,3],7));

assert((
    let
        dummy = 1;
    in
        let
            b = a;
        in
            b
    where
        (
            a = 42;
        ))
== 42);

// string comprehensions
assert("${1,2,3}" == "123");
assert("${"foo";"bar"}" == "foobar");
assert("${
    for (i in 0..3) i;
}" == "0123");

let
    a5n = [0,1,2,3,4];
    a5v2 = [[00,01],[10,11],[20,21],[30,31],[40,41]];
    a56n = [[00,01,02,03,04,05],
            [10,11,12,13,14,15],
            [20,21,22,23,24,25],
            [30,31,32,33,34,35],
            [40,41,42,43,44,45]];
    a56v2 = [[[000,001],[010,011],[020,021],[030,031],[040,041],[050,051]],
             [[100,101],[110,111],[120,121],[130,131],[140,141],[150,151]],
             [[200,201],[210,211],[220,221],[230,231],[240,241],[250,251]],
             [[300,301],[310,311],[320,321],[330,331],[340,341],[350,351]],
             [[400,401],[410,411],[420,421],[430,431],[440,441],[450,451]]];
in sc_test {
    "bool==bool": _->
        true == true;
    "[5]num": _->
        count a5n == 5 && a5n[0]==0 && a5n[4]==4;
    "[5]vec2": _->
        count a5v2 == 5 && count(a5v2[0])==2
           && a5v2[0]==[00,01]
           && a5v2[1][0] == 10
           && a5v2[1,0] == 10
           && a5v2[4]==[40,41];
    "[5,6]num": _->
        count a56n == 5
           && a56n[0,0] == 00
           && a56n[1,2] == 12
           && a56n[4,5] == 45;
    "[5,6]vec2": _->
        count a56v2 == 5 && count(a56v2[0,0])==2
           && a56v2[1,2] == [120,121]
           && a56v2[1,2,0] == 120
           && a56v2[1,2][0] == 120;
    "local_array_variable": _->
        let a = a5n in a[2] == 2;
};

// assignment statement
assert_error("foo: not defined", do foo := 1 in 42);
assert_error("sin: not a local variable", do sin := 1 in 42);
assert_error("local variable foo: not assignable from inside an expression",
    let foo = 0 in 1 + (do foo := 2 in foo)
);
assert_error(
  "x: not a local variable",
  (
    let
        f x =
            do
                if (is_num x)
                    x := [x,x,x];
            in x;
    in [f 2, f[1,2,3]]
  ) == [[2,2,2], [1,2,3]]
);
sc_test{
"let-assign": _->
    (let x = 1 in
    do x := x * 2 in
    do x := x * 3 in
    x) == 6;
"do-assign": _->
    (let
        a = 1;
    in do
        var b := 2;
        a := a + 1;
        b := b + 1;
    in a*b) == 6;
"where-do-assign": _->
    (do
        var b := 2;
        a := a + 1;
        b := b + 1;
    in a*b
    where a = 1) == 6;
"let-if-assign": _->
  (
    let a = 1;
    in if (a > 0)
        do a := a + 1;
        in a
    else
        a
  ) == 2;
};
assert(
  [
    for (i in 1..3) (
        i := i * 2;
        i;
    )
  ] == [2,4,6]
);
assert(
    [let i = 0 in while (i < 3) (i; i := i + 1)]
    == [0,1,2]
);

// generalized do
assert(
    [do 1 in 2] == [1,2]
);

let 'a'= {'foo bar'=0;'baz'=1};
in assert(strcat[a]=="{baz:1,'foo bar':0}");
let '_' = 1 in assert('_' == 1);

assert(#foo == #'foo');
assert(#foo != #bar);
assert(#foo != "foo");
assert(fields{'':0, 'a b':1, 'foo':2} == [#'', #'a b', #foo]);
assert(!fields{true:1} == [#false]);
assert(is_symbol(#true) && is_symbol(#foo));
let f = match [ 0->#zero, #one->1 ]; in (
    assert(f 0 == #zero);
    assert(f #one == 1);
);

// script return value:
in null
