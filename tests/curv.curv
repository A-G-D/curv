assert(is_list 0 == false);
assert(is_list());

assert(bit(false)==0 && bit(true)==1);

assert( dot( [], []) == 0 );
assert( dot( [1,2], [3,4]) == 11 );
assert( dot( [[1,2],[3,4]], [[2,0],[1,2]]) == [[4,4],[10,8]] );
assert( dot( [[1,2,3],[4,5,6]], [9,8,7] ) == [46,118] );
assert( dot( [1,2,3], [[2,1,3],[3,3,2],[4,1,2]] ) == [20,10,13] );
assert(
    dot( [[[1],[2]],[[3],[4]]], [[1,2]] )
    == [[[1,2],[2,4]],[[3,6],[4,8]]]
);

assert(cross([2,3,4],[5,6,7]) == (-3,6,-3));

assert(identity 3 ==
  [[1,0,0],
   [0,1,0],
   [0,0,1]] );

assert(
    (var a:=1;
     var b:=2;
     var c:=(var x:=10; var y:=20; [x,y]);
     [a,b,c]
    )
    == [1,2,[10,20]]
);

assert(
  var r := {a:1};
  defined(r.a) && !defined(r.b)
);

assert([0..<5] == [0,1,2,3,4]);
assert((1,2,3)==[1,2,3] && (1,)==[1] && ()==[]);

assert(reverse(1,2,3) == [3,2,1] && reverse() == []);
assert(sum(1,2,3)==6 && sum()==0);

assert(
  (var f(x,y) := x+y; var a := (2,3); f a)
  == 5);

assert((1,2,3)[0] == 1);
assert((1,2,3)[0,2] == [1,3]);

assert(var r := {a:1,b:2}; r["a"]==1 && r["a","b"]==[1,2]);

assert((sqrt << 4) == 2);
assert(([1..10] >> map(x->x^2) >> reverse) == [100,81,64,49,36,25,16,9,4,1]);

assert((q=1; m={a=q,f x = x + a}; m.f 3) == 4);

assert(
    f x = if (x <= 0) 1 else x * f(x-1);
    f 3 == 6
);

assert( 
    f = (
        zero = 0;
        m = { f g x = if (x > zero) f g (g x) else x };
        m.f(a->a-1)
    );
    f 3.25 == -.75
);
assert(
    n=4; s=sqrt; (
        na = (n+5);
        rpr f = f na;
        rpr s
    ) == 3
);

assert(
    var a := 1;
    var f x := x + a;
    f 2 == 3
);

assert(
    var m := {var a:=1, var f x := x + a};
    m.f 2 == 3
);

assert(
    (var a:=1; a:=a+2; a) == 3
);

assert(
  (var a := 1;
  if (a > 0)
    a := a + 2
  else
    a := a - 2;
  a) == 3
);

assert(
  (var a := 1;
   if (a > 0) (
     a := a + 2
   );
   a) == 3
);

assert(
  (var a := 1;
   if (a > 0) (
     a := a + 2;
   );
   a) == 3
);

assert(
  (var a := 1;
   var b := 2;
   if (a > 0) (
     a := a + 2;
     b := b + 3;
   );
   a + b) == 8
);

assert(
    Sum list = (
        var i := 0;
        var total := 0;
        while (i < count list) (
            total := total + list[i];
            i := i + 1;
        );
        total
    );
    Sum(1,2,3) == 6
);

assert(
    is_null null && is_bool false && is_num 42 && is_str "" && is_list ()
    && is_struct{a:1} && is_struct{a=1} && is_struct(cube 1) && !is_struct()
    && is_fun(x->x) && is_shape(cube 1)
);

assert(
    transpose([1,1],[2,2]) == [[1,2],[1,2]]
);

assert( asin 1 == 1.5707963267948966 && acos 1 == 0 );

assert( round 0.5 == 0 && round 1.5 == 2 );

assert( count {x:1, y:2} == 2 );

assert( dom(1,2) == [0,1] && dom{a:1} == ["a"] );

assert(
    a = {x:1, y:2};
    {...a, x:3} == {x:3, y:2}
);

assert( merge({a:1,z:26},{b:17,a:42}) == {a:42,b:17,z:26} );

assert( {map x = x + 1} 3 == 4 );

assert( strcat("foo","bar",0) == "foobar0" );

assert(
    count "foo" == 3 && count "$$" == 1 && count(to_str "$$") == 4
    && count "$"" == 1
);

assert( "foo"[0] == "f" && "foobar"[3,2,4] == "boa" );

assert( [if (true) (;)] == [] );

// script return value:
{}
