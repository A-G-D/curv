{
assert(is_list 0 == false),
assert(is_list()),

assert(bit(false)==0 && bit(true)==1),

assert( dot( [], []) == 0 ),
assert( dot( [1,2], [3,4]) == 11 ),
assert( dot( [[1,2],[3,4]], [[2,0],[1,2]]) == [[4,4],[10,8]] ),
assert( dot( [[1,2,3],[4,5,6]], [9,8,7] ) == [46,118] ),
assert( dot( [1,2,3], [[2,1,3],[3,3,2],[4,1,2]] ) == [20,10,13] ),
assert(
    dot( [[[1],[2]],[[3],[4]]], [[1,2]] )
    == [[[1,2],[2,4]],[[3,6],[4,8]]]
    ),

assert(identity 3 ==
  [[1,0,0],
   [0,1,0],
   [0,0,1]] ),

assert(
    (var a:=1;
     var b:=2;
     var c:=(var x:=10; var y:=20; [x,y]);
     [a,b,c]
    )
    == [1,2,[10,20]]
),

(
  var r := {a:1};
  assert(defined(r.a) && !defined(r.b))
),

assert(0..<5 == [0,1,2,3,4]),
assert((1,2,3)==[1,2,3] && (1,)==[1] && ()==[]),

assert(reverse(1,2,3) == [3,2,1] && reverse() == []),
assert(sum(1,2,3)==6 && sum()==0),

assert(
  (var f(x,y) := x+y; var a := (2,3); f a)
  == 5),

assert((1,2,3)[0] == 1),
assert((1,2,3)[0,2] == [1,3]),

assert(var r := {a:1,b:2}; r["a"]==1 && r["a","b"]==[1,2]),

assert((sqrt << 4) == 2),
assert((1..10 >> map(x->x^2) >> reverse) == [100,81,64,49,36,25,16,9,4,1]),

assert((q=1; m={a=q,f x = x + a}; m.f 3) == 4),

assert(
    f x = if (x <= 0) 1 else x * f(x-1);
    f 3 == 6
),

assert( 
    f = (
        zero = 0;
        m = { f g x = if (x > zero) f g (g x) else x };
        m.f(a->a-1)
    );
    f 3.25 == -.75
),
assert(
    n=4; s=sqrt; (
        na = (n+5);
        rpr f = f na;
        rpr s
    ) == 3
),

assert(
    Sum list = iterate(
        [0,0], (i,t)->i<len list, (i,t)->(i+1,t+list[i]), (i,t)->t);
    Sum(1,2,3) == 6
),

assert(
    var a := 1;
    var f x := x + a;
    f 2 == 3
),

assert(
    var m := {var a:=1, var f x := x + a};
    m.f 2 == 3
),

assert(
    (var a:=1; a:=a+2; a) == 3
),

assert(
  (var a := 1;
  if (a > 0)
    a := a + 2
  else
    a := a - 2;
  a) == 3
),

assert(
  (var a := 1;
   if (a > 0) (
     a := a + 2
   );
   a) == 3
),

assert(
  (var a := 1;
   if (a > 0) (
     a := a + 2;
   );
   a) == 3
),

assert(
  (var a := 1;
   var b := 2;
   if (a > 0) (
     a := a + 2;
     b := b + 3;
   );
   a + b) == 8
),

assert(
    Sum list = (
        var i := 0;
        var total := 0;
        while (i < len list) (
            total := total + list[i];
            i := i + 1;
        );
        total
    );
    Sum(1,2,3) == 6
),

assert(
    is_null null && is_bool false && is_num 42 && is_str "" && is_list ()
    && is_fun(x->x) && is_shape(cube 1)
),

assert(
    transpose([1,1],[2,2]) == [[1,2],[1,2]]
),

}
