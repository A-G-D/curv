{
  is_2d: #true;
  is_3d: #false;
  bbox: [[-2.5,-2,-2],[1.5,2,2]];
  shader:
    "#define AA 1
    |#define TAA 1
    |#define FDUR 0.04
    |const vec3 background_colour = vec3(1,1,1);
    |#ifdef GLSLVIEWER
    |uniform mat3 u_view2d;
    |#endif
    |float dist(vec4 r0)
    |{
    |  /* constants */
    |  float r1 = 1.0/0.0;
    |  float r2 = -(r1);
    |  /* body */
    |  return r2;
    |}
    |vec3 colour(vec4 r0)
    |{
    |  /* constants */
    |  float r7 = 0.0;
    |  vec3 r8 = vec3(r7,r7,r7);
    |  bool r10 = false;
    |  float r12 = 100.0;
    |  float r13 = 1.0;
    |  float r23 = 2.0;
    |  float r32 = 4.0;
    |  float r37 = log(r23);
    |  float r42 = 0.95;
    |  float r43 = 0.012;
    |  float r46 = 0.2;
    |  float r47 = 0.4;
    |  float r48 = 0.3;
    |  bool r55 = true;
    |  float r57 = 3.0;
    |  float r58 = r23/r57;
    |  float r59 = r13/r57;
    |  vec3 r60 = vec3(r13,r58,r59);
    |  float r69 = 6.0;
    |  float r91 = 2.2;
    |  /* body */
    |  float r1 = r0[0];
    |  float r2 = r0[1];
    |  float r3 = r0[2];
    |  float r4 = r0[3];
    |  vec2 r5 = vec2(r1,r2);
    |  vec2 r6=r5;
    |  vec3 r9=r8;
    |  bool r11=r10;
    |  for (float r14=r7;r14<r12;r14+=r13) {
    |  bool r15 = !(r11);
    |  if (!r15) break;
    |  float r16 = r6.x;
    |  float r17 = r6.x;
    |  float r18 = r16*r17;
    |  float r19 = r6.y;
    |  float r20 = r6.y;
    |  float r21 = r19*r20;
    |  float r22 = r18-r21;
    |  float r24 = r6.x;
    |  float r25 = r23*r24;
    |  float r26 = r6.y;
    |  float r27 = r25*r26;
    |  vec2 r28 = vec2(r22,r27);
    |  vec2 r29 = vec2(r1,r2);
    |  vec2 r30 = r28+r29;
    |  r6=r30;
    |  float r31 = dot(r6,r6);
    |  bool r33 = r31>r32;
    |  if (r33) {
    |  float r34 = r14-r13;
    |  float r35 = dot(r6,r6);
    |  float r36 = log(r35);
    |  float r38 = r36/r37;
    |  float r39 = log(r38);
    |  float r40 = r39/r37;
    |  float r41 = r34-r40;
    |  float r44 = r43*r41;
    |  float r45 = r42+r44;
    |  float r49 = r48*r41;
    |  float r50 = sin(r49);
    |  float r51 = r13+r50;
    |  float r52 = r47*r51;
    |  float r53 = r46+r52;
    |  vec3 r54 = vec3(r45,r13,r53);
    |  r9=r54;
    |  r11=r55;
    |  }
    |  }
    |  float r56 = r9.x;
    |  vec3 r61 = vec3(r56);
    |  vec3 r62 = r61+r60;
    |  vec3 r63 = vec3(r13);
    |  vec3 r64 = r62/r63;
    |  vec3 r65 = floor(r64);
    |  vec3 r66 = vec3(r13);
    |  vec3 r67 = r66*r65;
    |  vec3 r68 = r62-r67;
    |  vec3 r70 = vec3(r69);
    |  vec3 r71 = r68*r70;
    |  vec3 r72 = vec3(r57);
    |  vec3 r73 = r71-r72;
    |  vec3 r74 = abs(r73);
    |  float r75 = r9.z;
    |  vec3 r76 = vec3(r13);
    |  vec3 r77 = r74-r76;
    |  vec3 r78 = vec3(r7);
    |  vec3 r79 = max(r77,r78);
    |  vec3 r80 = vec3(r13);
    |  vec3 r81 = min(r79,r80);
    |  float r82 = r9.y;
    |  float r83 = r13-r82;
    |  float r84 = r13*r83;
    |  vec3 r85 = vec3(r82);
    |  vec3 r86 = r81*r85;
    |  vec3 r87 = vec3(r84);
    |  vec3 r88 = r87+r86;
    |  vec3 r89 = vec3(r75);
    |  vec3 r90 = r89*r88;
    |  vec3 r92 = vec3(r91);
    |  vec3 r93 = pow(r90,r92);
    |  return r93;
    |}
    |const vec4 bbox = vec4(-2.5,-2,1.5,2);
    |void mainImage( out vec4 fragColour, in vec2 fragCoord )
    |{
    |    vec2 size = bbox.zw - bbox.xy;
    |    vec2 scale2 = size / iResolution.xy;
    |    vec2 offset = bbox.xy;
    |    float scale;
    |    if (scale2.x > scale2.y) {
    |        scale = scale2.x;
    |        offset.y -= (iResolution.y*scale - size.y)/2.0;
    |    } else {
    |        scale = scale2.y;
    |        offset.x -= (iResolution.x*scale - size.x)/2.0;
    |    }
    |    vec3 col = vec3(0.0);
    |#if AA>1
    |  for (int m=0; m<AA; ++m)
    |  for (int n=0; n<AA; ++n) {
    |    vec2 jitter = vec2(float(m),float(n)) / float(AA) - 0.5;
    |#else
    |    const vec2 jitter = vec2(0.0);
    |#endif
    |    vec2 xy = fragCoord + jitter;
    |#ifdef GLSLVIEWER
    |    xy = (u_view2d * vec3(xy,1)).xy;
    |#endif
    |#if TAA>1
    |  for (int t=0; t<TAA; ++t) {
    |    float time = iTime + float(t)/float(TAA)*float(FDUR);
    |#else
    |    float time = iTime;
    |#endif
    |    vec4 p = vec4(xy*scale+offset,0,time);
    |    float d = dist(p);
    |    if (d > 0.0) {
    |        col += background_colour;
    |    } else {
    |        col += colour(p);
    |    }
    |    
    |#if TAA>1
    |  }
    |#endif
    |#if AA>1
    |  }
    |#endif
    |#if AA>1 || TAA>1
    |    col /= float(AA*AA*TAA);
    |#endif
    |    // convert linear RGB to sRGB
    |    fragColour = vec4(pow(col, vec3(0.454545454545454545)),1.0);
    |}
    ";
  parameters: [
  ];
}
