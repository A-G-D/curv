# Release 0.0: "Proof of Concept/Minimum Viable Product"

Roadmap:
* New version of shape library, based on Shape_Atlas and Colour_Atlas.
  Don't need new features, just refine the API, make it more useable.
* Tweak the core language, based on experience of writing and using the
  new shape library.
* Documentation for core language and shape library.
* Export to STL, using marching cubes and OpenCL.
* High priority bug fixes.
* Meta: use https://opensource.guide/
* => First public release with a stable API.

Next changes:
* let defs1 in phrase where defs2 -- single scope
* for loop with pattern: support a variant where list elements that don't
  match are ignored? Eg, Haskell.
* documentation

Proposed change: `include lib.shape` required to access shape library.
* Pros: as a temporary measure, it protects users against future redesigns
  of the shape library, as I'll create a new library and maintain the old API.
* Cons: adds complexity to Curv scripts. Instead of
    cube
  you need
    cube
    where include lib.shape;
  or
    let include lib.shape;
    in cube

Pattern project:
* binder patterns
* features: [a,...b], {a,...}, id@pat
  * eg, {a,b,c,...} = file "foo.curv" is like from foo import a,b,c in Python.
  * eg, f[a,...b]= is like f(a:b)= in Haskell.
* GL: record patterns, predicate patterns
* `var` definitions and sequential assignments:
  * `var pattern := expr` and `pattern := expr` *is* supported.
  * `f x := expr` function definition syntax is *not* supported.
  * `a[i] := expr` *is* supported for assignments only.
  * `var (is_num x) := expr` means `is_num` is enforced on assignments to `x`.
* optional features: id==expr, pat&&cond

Language changes:
* lib

Code cleanup:
* rename Structure/Record/Module to Record/Dict/Module.
* unit tests for: CLI supports compound definitions
* unit tests for: GL error messages
* GL_Frame::gl renamed to gl_
* clean up Recursive_Scope::analyse_unit
* clean up Record_Pattern::exec
* remove curv/arg.{h,cc}, move features into value.h and context.h
* add std::move to curv namespace
* rename Atom to Symbol

Tensors:
* rank? Like ArrayDepth[t] in Mathematica?
* dimensions? Like Dimensions[t] in Mathematica?

Bug: records with non-identifier field names are not printed correctly.

weird error message: Should underline the default value expression.
curv> {a: [x,y] = []} = {}
ERROR: at field .a: list has wrong size: expected 2, got 0
line 1(columns 19-20)
  {a: [x,y] = []} = {}
                    ^-

weird error message: The "at field .colour" qualifier really applies to the
final item in the stack trace.
ERROR: at field .colour: this list constructor does not support the Geometry Compiler
file "../examples/assert.curv", line 6(columns 24-25)
      colour p : [1-bit(f()), bit(f()), 0],
                         ^-                
file "../examples/assert.curv", line 21(columns 1-30)
  gl_assert(()->(fact 5 == 120))
  ^-----------------------------

-------------------------
Circumratio project:
Regular polytopes are prototypical shapes, with `map` and `circumratio` fields.
Primitive shapes from Conway notation:
* `prism n` -- prototypical version has inscribed unit sphere.
  Note `prism 4` == `cube`.
* `antiprism n` -- prototypical version has inscribed unit sphere
* `pyramid n` -- prototypical version has inscribed unit sphere.
  `pyramid 3` == `tetrahedron`. What is the base diameter/height ratio for
  values of n > 3? As n approaches infinity, the pyramid approaches a cone.
  * Ratio of pyramid height to diameter of inscribed circle of base is
    1+1/3 to sqrt(8/9): 1.333333 to 0.942809. This gives a tall skinny cone.
  * Ratio of pyramid height to diameter of circumscribed circle of base
    is 1+1/3 to 2*sqrt(8/9). This gives a squatter cone that I like better.
  * Smallest volume that circumscribes a unit sphere. Needs calculus.
* Maybe `cylinder`, `cone`.

Fix bug: {x=1} == {x:1} should be true.

GL:
* call nonconstant functions
* print, assert, warning, error are ignored in GL.
* GL: && || if use lazy evaluation

Shape Atlas: look at:
* http://grasshopperprimer.com/en/1-foundations/1-3/2_working-with-attractors.html

FXAA: cheap, simple anti-aliasing.
https://www.kotaku.com.au/2011/12/what-is-fxaa/
SMAA also good, may be faster, may be higher quality (due to temporal sampling).
Both work by post-processing the display buffer.

Weld, a Stanford research project, enables efficient composition of parallel
libraries on a single CPU or GPU. The usual way of composing libraries, through
function calls that exchange data through memory, can create order-of-magnitude
slowdowns. In contrast, Weld can transparently speed up applications using
NumPy, Pandas and TensorFlow by up to 30x through a novel API that lets it
optimize across the library calls used in each program.

-------------------------
BUG: bad Web GLSL (testing mandelbrot in shadertoy.com in Chrome on macOS):
  float r1 = 1.0/0.0;
  -- Divide by zero during constant folding
  float r1 = 1e9999; // an alternative?
  -- Float overflow
GLSL 4.1 and later support 1.0/0.0 to create infinity.
Before that is undefined behaviour.
Ideas:
* This works:
    float zero = 0.0;
    float r1 = 1.0/zero;
* No way to initialize a global variable 'inf', however.
* Compute infinity at run time, if it is an old version of GLSL.
* Rewrite the standard library to avoid outputting infinity. If it is output,
  then set the GLSL version to 4.1.

BUG: bad Web GLSL (testing mandelbrot in shadertoy.com in Chrome on macOS):
  'while (true)' doesn't work: "This type of loop is not allowed".
  WebGL 1 *does* support the while loop.
  This exact error message can be generated by the google swiftshader library
  (a CPU based implementation of GLSL). So Chrome uses SwiftShader on my Mac.

BUG: Doesn't GL compile.
stereographic_projection plane = sphere 1 >> colourfield
    ((x,y,z)->plane.colour(x/(1-z), y/(1-z), 0));

BUG: tests recently slowed down by 2 orders of magnitude.

display axes in 3D view

source reorganization:
* Split cmd/curv.cc into multiple source files

GL:
* all math operations that are built-in SPIR-V operators
* maybe: mandelbrot iteration that doesn't crash the MacBook Air.
  * GL support for `for` loop
  * add `break` action to `while` and `for` loops
  * use macOS Metal Shading Language? Driver might be less broken.
* `if_fast_case (C) E1 else E2`: E1 and E2 are equivalent, but E1 is faster
  to compute if C is true. During GL compile, if C is a compile time constant,
  pick E1 or E2, otherwise just emit E2.
* mat2, mat3, mat4

glslViewer:
* HOME key resets view
* other ideas:
  * SHIFT key constrains rotate and pan to one axis.
  * Camera roll? Use ALT key + button1, button2 or scroll.
    * not scroll, too imprecise.
    * ALT + rotate button
  * Maybe use keyboard for flight.
    * up/down arrow: move eye forward/backward
    * left/right arrow: rotate left/right around eye

library:
* blend operators
* positioning/alignment
* regular polytopes are specified using incircle radius.
  `circumscale r RP` scales a regular polytope RP to specified circumcircle
  or circumsphere radius r. RP stores its bounding circle/sphere radius.
* Use HSV colour space? Impact on image import? Colours at least need to be
  linear, not gamma-corrected, for colour model.

curv:
* in `curv -le`, if you quit the editor then curv exits (first, glslViewer is
  terminated and the temp file is deleted).
* send GL output to a *.tmp file. If GL compiler fails, delete temp, otherwise
  move it to the *.frag file so glslViewer will reload it.

3D viewer
* use bbox to ensure entire scene is visible
* zoom in on `cube 0.25`. WTF?
* bug: white is rendered as grey in a 3D shape interior. I prefer no lighting
  transformation for interior points.
* The current sphere-tracer stops at distance 20 (hard coded). Use the bounding
  box to compute a tmin and tmax value for a given ray (by intersecting the
  bbox), or don't march at all if the ray doesn't intersect the bbox.

## Geometry
Math:
* Native 'trunc'? Isn't in WebGL, but is in later versions.
  Use `#if __VERSION__` in GL code generator.

import, export PNG file.

basic documentation.

Ideas for 2D primitives:
OpenSCAD:
* polygon, text,
* hull, minkowski, mitred and rounded offset
  * mitred offset is well defined for polytopes
  * rounded offset is minkowski sum with sphere
  * not all polytopes can be offset: http://mathoverflow.net/questions/206644/when-is-it-possible-to-shrink-a-polyhedron
* positioning/alignment
Antimony:
* text, 1 font only
* rounded rectangle(radius),
* blend(shape1,shape2,q), which is rounded-corner union for q>0&q<1.
* clearance(shape1,shape2,Num o) in which shape2 casts a "shadow" of thickness
  `o` that is removed from shape1. Otherwise they are unioned.
* invert: subtract shape from its bounding box
* morph(s1,s2,weight) -- a kind of morph where there's no output unless the
  shapes overlap
* offset(s,o) -- like inflate(s,o)
* shell(s,o) -- creates a shell of thickness o inside the perimeter of s
* 2D array (nx,ny,dx,dy,shape) -- repeats shapes in a grid pattern
* polar array(n, dx, dy, shape) -- repeat in a circular pattern
* deform:attract(shape, pt, Num r) -- warp shape so that it is pulled toward
  the point with intensity r
* deform:repel -- see above
* 2D shear (shape, y0, y1, dx0, dx1) -- affine transform
* 2D cosine shear -- holy waviness!
* 2D function -- plot area under a function within a bbox
* map -- a shape and some functions for transforming X,Y,Z
* 2D cosine scale -- more waviness
* 2D taper
ImplicitCAD:
* regular polygon
* general polygon
* pack (size=[45,45], sep=2) { circle(10); circle(10); circle(10); circle(10); }
  size of 2D box to pack objects in, separation between objects
* shell(w=width of shell) shape
* union, intersection, difference, square have a radius of rounding

# Nice To Have
* text (for debugging).
* a better gl_assert: multiple assertions, display text for each assertion.
  gl_assert[["== works",()->t1==t2], ...]
* GL optimizer: hand-optimizing sample output reduced # of ops in main_dist
  from 29 to 13 (16 fewer); exe size from 9928 to 9741 (187 fewer).
  7574 in 'empty' shader, so 2354->2167, 12.6% fewer.
* improved error messages.
  * <actual value>: not a list -- in Value::to etc.
  * <actual argument to 'file'>: file can't be opened
  * In At_Arg(), remove superfluous parens from arg expression
    so that argument location is more precise.
* debugger
  Create an interactive debugger, action to jump into the debugger,
  debug command to dump a specified frame, showing exact contents of local
  and non-local slots without evaluation.
* Lazy Modules:
  Why?
  * Make the language more expressive. Programs that now fail due to illegal
    recursive reference will now succeed.
  * Efficiency through deferred evaluation? Not for MVP.
  Change the Module API so that Thunks are forced before Values escape.
  I'll need to add Frame* or Context& arguments to provide exception context
  if thunk forcing fails:
  * in Module::print()
  * in Module::begin()
  * in Module::getfield()
  I need a Context& for proper error messages, but I need a parent frame to
  force a thunk. Maybe add `Frame* Context::get_frame()`. Won't work in GL
  due to GL_Frames. Maybe Frame and GL_Frame share a common ancestor for
  use in Context.

  * Stdlib contains thunks. When are they forced?
    * When stdlib is loaded. (As early as possible. Even for names that are
      never referenced.)
    * During analysis, in Builtin_Environ. The value is forced in the Namespace
      object, which happens at most once.
    * At runtime, in Constant (or Lazy_Constant). Problem: we'll make multiple
      copies of the thunk then later force multiple copies. Fix?
  Need to force a module slot before the value leaves the module.
  Currently, all fields values are forced during module creation.
  For true lazy modules, need to pass a Frame* through Ref_Value::getfield
  and Module::get.

# Older Stuff

Live programming (curv -l):
 * $CURV_EDITOR -- if defined, auto-open editor window 
 * When glslViewer window is closed, curv -l should exit.
 * When curv -l is interrupted, the glslViewer window should be closed.
 * redraw if an included file changes. requires integration with libcurv.
 * `fswatch` looks like a decent package on github (better than stat loop?).
   https://github.com/emcrisostomo/fswatch/tree/master/libfswatch
   Has both a CLI and a library with C and C++ bindings.
   Supports all operating systems.
 * `curv -l filename` has an interactive CLI for querying variables and
   debugging. GNU readline has a callback-based API suitable for this:
   rl_callback_handler_install etc.

2d subsystem: repetition operators, and others

Build up the standard library.
* There are many GLSL functions that ought to be supported by Curv.
* Some of them need to use the GLSL, not the Curv implementation.
  Eg, GLSL `dot` is very efficient.
* Some GLSL functions are version dependent, like trunc.
* Hard coding this in C++ is tedious, can it be defined in `std.curv`?
* Maybe add GLSL metadata to a Curv function definition so that calls can be
  translated to GLSL library calls.
* I'd like a peephole optimizer to recognize idioms like e^x and translate
  them into more efficient/accurate operations like exp(x).
* The peephole optimizer could map idioms generated by inlining Curv functions
  onto GLSL library functions.

Linear algebra:
  pow(square_matrix,i),
  determinant(square_matrix), inverse(square_matrix) -- difficult

ongoing research:
* list library

2D subsystem:
* polygon -- convex_polygon as Nef polygon, intersection of half planes
  convex_polygon(vertices) -- vertices are in counterclockwise order, as this
  seems to be the standard convention.
* align
* Repetition operators, which repeat a shape multiple or infinite times,
  in constant time and memory, in accordance with some symmetry pattern.
  These operators can be composed to describe more complex symmetries.
  * row
    * 7 frieze groups: https://en.wikipedia.org/wiki/Frieze_group
  * grid
    * 17 wallpaper groups: https://en.wikipedia.org/wiki/Wallpaper_group
  * rotate tau/N, N copies
    * rosette groups
  * reflect
  * glide reflection
  * spiral -- not sure if this is symmetric -- might have trouble defining it?
    http://www.mathematische-basteleien.de/spiral.htm
  * The Symmetry of Things, orbifold notation
    * An orbifold signature does not uniquely specify a repetition operator.
    * Find a collection of ops that can be composed to generate
      all the repetition patterns.
* pack or row
* crop
  * crop(xmin=null,ymin=null,xmax=null,ymax=null)=...; // OpenSCAD style
  * crop{xmin=null,ymin=null,xmax=null,ymax=null} shape =
      intersection [shape,
        if (xmin!=null) make_shape{dist p = xmin - p'0},
        if (ymin!=null) make_shape{dist p = ymin - p'1},
        if (xmax!=null) make_shape{dist p = p'0 - xmax},
        if (ymax!=null) make_shape{dist p = p'1 - ymax},
      ];
* visualize the distance field using a colour_map
* text (steal from openjscad or antimony to begin with)
* rsquare, runion (rounded corners and fillets)
* infinite patterns
* grid (map shape onto infinite repeating shape)
* fractals
  * fbm cloud colourmap (as seen in IQ's Elevated on shadertoy)
  * fractal mountain: port IQ's Elevated
  * Mandelbrot set
* Escher circle limit
* minkowski sum
* Sweep. Extends a 2D object along a path.
* Extrusion. Extends the shape of a 2D object in a perpendicular direction into 3D space.
* Revolve. Sweeps a 2D object around an axis.
* Loft. Extends the contours of a shape between one or more open or closed objects. Simple approach: linear_extrude which morphs between two 2D endpoints.
* Slice. Divides a solid object into two separate 3D objects.

Colour:
* spelling: "colour", as per en.oxforddictionaries.com
* [r,g,b] is a colour value.
* [x,y]->[r,g,b] and [x,y,z]->[r,g,b] are 2d and 3d colour fields.
* x->[r,g,b] is a colour map from [0...1) to a colour.
* 2D shape with colour[x,y] function.
  * Either a shape has colour or it doesn't. Union requires either both args
    have colour, or neither.
  * When a coloured shape is transformed, the transformation is also applied
    to the colour field.
* `colour(c) shape` applies a colour or a colour field to a shape.
* Colour operations:
  * predefined colour values (red,green,blue,yellow,magenta,cyan,orange,green,...)
  * colour operations (eg, light red)
  * Geometric transforms can be applied to colour fields.
* Image import.

nary union:
* union shapes =
    make_shape {
      dist p = min [for (s in shapes) s.dist p],
      bbox = [min[for (s in shapes) s.bbox'0], max[for(s in shapes)s.bbox'1]]
    };
* GL: since shapes is a constant during inline expansion, we can expand the
  for loop into a list of expressions.

* volumetric textures, like marble.

# refactoring
* use new Value access API throughout code
* value1==value2 performs a bitwise comparison (for performance),
  to speed up code like val==true and val==missing.
  The general (expensive) equality is val1.equals(val2)

# command line arguments
* command line export to different file formats (-o option)
  curv [-i node] [-o format] [-D definition] filename
  Evaluate filename as a Curv script file, yielding a module.
  Write the module elements to stdout, unless -i name is specified, then
  evaluate 'name' in the context of that module to get a value which is to
  be output.
  By default, the output format is to output each value as a Curv expression,
  terminated by a newline, unless a different format is specified by -o.
  Output formats: json, shadertoy.
  The -D flag takes a legal Curv definition as an argument.
  This definition is added to the module being read, overriding an
  existing top level definition. This override happens during parsing.
* command line documentation
  * docs/curv.1.md is converted to curv.1 by pandoc and installed
  * curv --help
  * curv --version

VM:
* debugger entry on exception
  * System::error(const Exception&) -- throw an exception, but first, enter
    the debugger.
  * debugger: commands are bound as Curv metafunctions.
    * `trace` print stack trace (with numbered call frames)
    * `frame N` specify call frame
    * inspect variables at current frame
      * local and nonlocal symbol table pointers in Frame
    * `exit`
* interrupt

OpenSCADbis proposal

# Simpler, More General Grammar
* Simple, yaccable grammar with no conflicts or precedence declarations.
* names: Phrase or Syntax?

Package Manager.
* How are packages named?
  * URLs are flexible. We'll support a variety of geometry file formats:
    images, meshes, *.curv, *.svg, and so on. We can reference internet
    resources that weren't designed and packaged in a Curv-specific format.
  * The Technetium namespace is a nice idea.
* Is there a formal notion of a package as an entity, as a collection of
  files and metadata? (What is a package value?) Or do we just reference
  individual files using their URLs?
  * URLs are simple.
  * Some notion of package versioning might be useful.
    * Thingiverse doesn't support versioning. Github does, with a URL encoding.
      * https://raw.githubusercontent.com/USER/PROJECT/BRANCH/PATH
      * https://raw.githubusercontent.com/USER/PROJECT/COMMIT-HASH/PATH
      * github://USER:PROJECT/PATH
      * github://USER:PROJECT:BRANCH/PATH
      * github://USER:PROJECT:HASH/PATH
* Is a package: a library, a shape or a library, or an arbitrary value?

Directory Syntax.
A directory containing a bunch of Curv source & resource files
is itself a source file denoting a module, one entry per file.
* I've considered much more complex versions of this, but this is simple
  and good enough for MVP.
* This could mean: in foo.curv, you can refer to a sibling file bar.curv in the
  same directory as simply `bar`, rather than as `file("bar.curv")`.

Other:
* Interactive curv: special variable `_` is last value. _1,_2, or $1,$2 ...
* Shared constructor is protected. share<T>(T&) aborts if use_count==0.
* Dynamically pluggable system abstraction. `System` class with system.echo(),
  system.warning(), system.error(), system.open(), system.namespace, etc.
  System object is refcounted, available during compile and run time.
  * Scanner::system_
  * Environ::system_. Just a single Environ object for the entire analysis
    phase, which points to a chain of Scope objects.
  * builtin_namespace(system) is a function that injects the system object into
    certain builtin functions, like `file`, avoids the cost of making system
    generally available in all evaluation contexts.
  * Do we need the system object to be a VM register? Maybe needed if
    system.error(Exception) is used to throw errors (so that debugger can be
    triggered on error). So then:
    * thread local variable
    * store in Frame--more efficient than passing as argument to eval()
      and Function::function_().
* interrupt.
  * Periodically test a thread local variable known to the curv core,
    curv::interrupt_requested. Throw an exception on interrupt, or call a System
    function to do this. I don't like thread local variables for stylistic
    reasons, but it seems legit to use one for IPC.
  * Periodically test the variable System::interrupt_requested.
    This is an extra pointer indirection more expensive than a thread-local var.
  * Periodically call a System function. Inside this function provided by
    the client is `if(thread_local_interrupt!=0)throw Interrupt()`.
    This keeps the core "pure" (free of thread-local variables) at the cost
    of a virtual function call at frequent intervals. The client will define
    the thread-local variable instead.
* still need this?
  - Environ must contain a Frame and a System. How?
    - Every Environ contains a copy of the Frame and System pointers.
    - A single mutable Environ object for the entire analysis phase,
      which points to a stack of Scope objects.
      Use RAII (in Scope class) to push/pop scopes.
      So Scope contains a reference to Environ.
      Environ::lookup calls Scope::lookup.
      More complex, but a cleaner data model, since it doesn't make it look
      like each Scope has an independent choice of Frame and System.
* refactor File_Script
  * Provide better exception messages using strerror(errno).
  * Possibly use mmap?
  * I only support UTF-8. The curv tool only runs on Windows if you use pure
    ASCII or explicitly initialize your console using `chcp 65001`.

# CURV0 (expressions):
* bug: (-1)^-0.5 error message needs parens around '-1'
* x^y: right associative, -x^y==-(x^y), x^-y==x^(-y)
  **: algolw, Python, Rexx, Simula, Cobol, Ruby, Tcl
  ^^: D
  ^: Eiffel, Icon, Mathematica, Maple, Matlab, Basic, Awk, Bc, Lua, Julia, R
* double-conversion based strtod
* broader unit testing
* smart pointers, see docs/Shared_Ptr.md

# CURV1 (scripts, LLVM)
* LLVM based evaluator. Compile Meaning to LLVM IR.
  Embed raw function pointers and Values in IR as bit patterns.
* Benchmarks

# CURV2 (nested scopes)
* printing a function? currently, <function>, even for builtins

# CURV4 (geometry export)
* use dual contouring instead of marching cubes for STL export
* does OpenCL speed this up?
* SVX export? Does Shapeways still support this?

# Ongoing:
* more unit tests
* language reference manual

---------------------------------------------------------------------------
# Later:
* Rewrite scanner in re2c. Then add UTF-8 support.
* Parser: consider Boost::Spirit (recursive descent) or Lemon (similar to
  Bison, thread safe, LALR(1)), or Bison with %pure-parser (thread safe).
  Is Lemon better than Bison? Lemon:
  * the tokenizer calls the parser (instead of vice versa)
  * terminals/non-terminals don't need to be declared. Terminal name has
    initial uppercase letter.
  * productions are less error prone. Instead of $1, $2 (requires counting),
    expr(A) ::= expr(B) PLUS expr(C). { A = B + C; }
  * no mid-actions, one action per rule.
  * no repetitions and optionals.
  * small footprint: small code with no dependencies
* localization
* curv::String refactor
  * String_Builder is rewritten to use a curv::String as the internal buffer
  * User defined string literal constructs a Shared<String>:
    underlying object is constructed at compile time with no mallocs,
    and without two copies of the string literal data.
* dtostr() refactor
  * put all 4 parameters into a DStyle struct.

build system?
* Fast. Correct: auto track dependencies, rebuild on recipe change,
  delete stale objects. High level: standard abstractions that are portable
  across linux/osX/win. Cross project dependency discovery and configuration
  (see pkg-config). Packageable: libcurv can be packaged for Ubuntu; build tools
  are already in ubuntu repo.
* Should I use pkg-config for build-time dependency discovery and configuration?
  Do I install a *.pc file that records compiler and linker flags required to
  use the curv library? Can I build an Ubuntu package for libcurv?
* Google Bazel is fast, correct and high level. Still in beta. Missing some
  platform support, cross project dependencies. Wait for 1.0 in 2017.
* cmake is popular and well supported on multiple platforms.
  It has comprehensive portability abstractions.
  It is more correct than expected, given that it generates makefiles.
  Rebuilds on recipe change, tracks header dependencies. Doesn't delete stale
  products. (Has an experimental option to generate ninja files.)
* ninja is fast. It rebuilds if recipe changes. Header dependencies depend
  on the gcc feature to output dependencies (suboptimal, I'd rather it monitor
  which files are opened by build tools).
  Need a generator: ninja+cmake, ninja+gen, ninja+bash, ...
* tup is fast and correct. Tup determines hdr file dependencies automagically.
  Tup rebuilds if recipe has changed. Tup deletes build products that can
  no longer be generated. Tup has a high level command language (Lua).
  * Tup is not in the Ubuntu package universe. There are PPAs...
    Building from source isn't working...
  * Tup is deeply magical and edgy. It uses FUSE, performs kernel magic to
    overlay source and object directories, and makes tools confused
    about what their current directory actually is, causing some things to
    break. This can be overcome using the ^c chroot flag, which requires
    setuid root. FUSE probably no longer works in MacOS ElCapitan due to SIP.
  * So edgy it might discourage contributors. The automagic dependency tracking
    requires deep magic that is also flaky: fuse, chroot, dynamic lib injection.
    Eg, the ConEmu terminal emulator breaks DLL injection on Windows.
    Tup is reported to not work on FreeBSD (fuse works differently).
* redo. Simple, powerful, elegant. Also slow (as fast or slower than make).
* So, probably cmake+ninja.
