* test Windows port, then announce
* auto detection of c++ compiler for '-O jit' default value

Finish imperative:
* document local
* unit tests
* Imperative.rst

Finish boolean arrays:
* SubCurv: unit tests for 3 cases of and/or
* general arrays of bool and bool32
* fix TODOs in array_op.h
* binary boolean op: mixed bool/bool32 operations

Primitives API:
* The Context describes the call syntax: 'f x', '-x', 'x `f` y', 'x + y'.
  A more specific argument Location is extracted from the syntax when throwing
  an exception concerning a bad argument.
* Can builtins be implemented in Curv?
* Will a macro simplify the definition of And_Prim?
* define Operation classes using Prim?

Bool_Array : vectorized boolean operators
* <, <=, >, >= work elementwise on arrays.
* `are_equal(a,b)`: elementwise variant of a==b
* `are_unequal(a,b)`: elementwise variant of a!=b.
  Elements are scalars (non-list values).
  Equivalent to xor(a,b) when applied to boolean arrays.
* `select`: vectorized version of `if`
* Maybe define `bit b = select(b, 1, 0)`.
* SubCurv supports bool[2-4] and vectorized boolean ops
* unit tests for operations on reactive values
  * Right now, reactive values are only generated when compiling a parametric
    shape to GLSL. I could create a builtin implementing the same logic.
    * Take a parametric record as argument, compile the parameters to reactive
      values, then call the record's main() function.
    * A builtin that compiles a Curv value into machine code via C++.
      Special handling for parametric records which tests reactive values.
