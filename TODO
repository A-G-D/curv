# Release 0.0: "2D subsystem"

What remains for MVP? (What do I want to show in my first big demo?)
* `curv -l filename` live programming. $CURV_EDITOR -- auto-open editor window 
* curv CLI: open GL window for a shape
* 3D support
* standard library
* Documentation
* Meta: use https://opensource.guide/
* mac port or linux laptop

* 3D support
  * 3D viewer
    * glslViewer support: u_eye3d, u_centre3d, etc
    * initially, fixed bbox, zoom, rotate about Z axis
    * better, simpler lighting model
  * make_shape checks is_2d and is_3d fields, which default to false.

-------------------------
Define regular_polygon(n). See poly.curv.
* live coding, please. curv -l pathname

gl_call supports variadic functions, eg max(a,b,c) where a b c are vectors.
curv::Function represents a variadic function.

Fix kludge in Indirect_Function_Ref that forces thunks.

## Language Redesign
Submodules:
* Extend make_shape to take a module argument.

Patterns (Bindings and Lambda):
* action thunks, instead of value thunks.
* (x,y) = f(a);
* {x,y}=... is pattern matching on a record. Extra fields on right -> error.
* Record patterns can be used as function parameters.
* Default values in record patterns, `{x=0,y=1} = ...`
* functions with refutable parameter patterns lead to:
  switch((x,y,z)->..., a->...) -- returns a function

Records:
* actions in a record literal
* Add the concept of a "field generator". Operation::generate_fields().
  * x:42 is a field generator.
  * "${strexpr}":42
  * An action is a field generator.
  * Conditional field generators: if(c)field
  * `...record`
  * Can use `for` to generate fields.
  * merge rs = { for (r=rs) ...r }

Blocks:
* Add GL support. How?
   1. Detect if the block has recursive definitions.
      If true, compile as a recursive block.
      Otherwise, compile as a GL-compatible non-recursive block.
   2. Or move this analysis into the GL compiler.
      Use a simple recursion detector that aborts on recursion.

item ::= disjunction `where` item -- alternate block syntax
`expr where (def1,def2,...)` -- uses commas, not semicolons.

* recursive function definitions
  * We could classify each binding as recursive or non-recursive.
    * Non-recursive bindings are sorted in dependency order. Analyze the
      definiens and recursively analyze dependencies before assigning a slot#.
      If a loop is detected, mark the binding as recursive.
  * Start with a list of statements (action and definition phrases).
    * Analyze the statements in order. When a block reference is analyzed,
      recursively analyze it. If a loop is detected, mark the binding
      recursive and allocate a slot. Otherwise, once a definiens is
      fully analyzed, allocate a slot.
  * Slot initialization: first, we initialize each non-recursive slot to
    missing, and each recursive slot to a thunk. Then, we execute the
    action list, which runs action statements, and initializes non-recursive
    binding slots in dependency order. Accessing a missing slot is a runtime
    error.
* GL support
  * Block_Op::gl_eval() -- initialize each slot to GL_MISSING, eval each
    binding, recursing at Letrec_Ref, detect recursive definitions. This will
    output GLSL declarations in dependency order.

Generator is coerced to a list in expression context. For ease of use:
* union (for (i=a) shape(i)) -- no need for trailing , or extra [ ]
* 1..10 is a generator. [1..3, 5, 8] and for (i=1..10) both work.

Polymorphic list/record/module operations:
* `dom s` is list of indexes of s
* `len s` is # elements of s

Use.
* use(file "pathname.curv") -- arg evaluated as const expr in builtin namespace,
  file must evaluate to a module.

## Geometry
make_shape: if bbox missing, default is infinite.

Rainbow Angel
* starburst_rainbow colour field
  * hsv2rgb
    * My code uses vectorized max and min, not available in GL.
      1. Rewrite without this feature. (Code will be bigger, slower,
         this needs to be fixed at some point.)
      2. Max_Metafunction checks if arg is List_Expr, emits calls to a Max2
         operation, which can have 2 vector arguments in GL.
         (Okay for this case, doesn't help if arg is a runtime GL constant
         list of vectors.)
      3. Add Function::gl_metacall, gets args as Operation list.
         Max_Function::gl_metacall checks for List_Expr arg, and for
         a gl_constify const arg.
  * colour() is polymorphic, accepts colour field as argument?
    * need is_fun

Math:
* Native 'trunc'? Isn't in WebGL, but is in later versions.
  Use `#if __VERSION__` in GL code generator.

Animation. Add an extra t argument to dist and colour functions.

import, export PNG file.

curv tool:
* display shape from interactive CLI
* live programming mode

basic documentation.

A reasonable set of 2D primitives:
* regular polygon, looks like Antimony. R is radius of circle inscribed
  within polygon. Circle radius at origin. One of the sides faces down.
  * Antimony uses intersection of half planes.

Regular Polygon:
---
def polygon_radius(x, y, r, N):
    """ Makes a polygon with a centre-to-vertex distance r
        The polygon is oriented so that the bottom is always flat.
    """
    # Find the centre-to-edge distance
    r_ = -r * math.cos(math.pi / N)
    # Make an offset half-region shape
    half = Shape('-f%gY' % r_)
    # Take the union of a bunch of rotated half-region shapes
    p = functools.reduce(operator.and_,
            [rotate(half, 360./N * i) for i in range(N)])
    # Apply appropriate bounds and return
    return Shape(p.math, -r, -r, r, r)
---

Ideas for 2D primitives:
OpenSCAD:
* circle, square, polygon, text,
* hull, minkowski, mitred and rounded offset
  * mitred offset is well defined for polytopes
  * rounded offset is minkowski sum with sphere
  * not all polytopes can be offset: http://mathoverflow.net/questions/206644/when-is-it-possible-to-shrink-a-polyhedron
* colour, positioning/alignment
Antimony:
* text, 1 font only
* rounded rectangle(radius),
* blend(shape1,shape2,q), which is rounded-corner union for q>0&q<1.
* clearance(shape1,shape2,Num o) in which shape2 casts a "shadow" of thickness
  `o` that is removed from shape1. Otherwise they are unioned.
* invert: subtract shape from its bounding box
* morph(s1,s2,weight) -- a kind of morph where there's no output unless the
  shapes overlap
* offset(s,o) -- like inflate(s,o)
* shell(s,o) -- creates a shell of thickness o inside the perimeter of s
* 2D array (nx,ny,dx,dy,shape) -- repeats shapes in a grid pattern
* polar array(n, dx, dy, shape) -- repeat in a circular pattern
* deform:attract(shape, pt, Num r) -- warp shape so that it is pulled toward
  the point with intensity r
* deform:repel -- see above
* 2D shear (shape, y0, y1, dx0, dx1) -- affine transform
* 2D cosine shear -- holy waviness!
* 2D function -- plot area under a function within a bbox
* map -- a shape and some functions for transforming X,Y,Z
* 2D cosine scale -- more waviness
* 2D taper
ImplicitCAD:
* regular polygon
* general polygon
* pack (size=[45,45], sep=2) { circle(10); circle(10); circle(10); circle(10); }
  size of 2D box to pack objects in, separation between objects
* shell(w=width of shell) shape
* union, intersection, difference, square have a radius of rounding

# Nice To Have
* vectorize `bit`
* GL: && || if use lazy evaluation
* text (for debugging).
* a better gl_assert: multiple assertions, display text for each assertion.
  gl_assert[["== works",()->t1==t2], ...]
* unicode operators (needs re2c)
* GL optimizer: hand-optimizing sample output reduced # of ops in main_dist
  from 29 to 13 (16 fewer); exe size from 9928 to 9741 (187 fewer).
  7574 in 'empty' shader, so 2354->2167, 12.6% fewer.
* improved error messages.
  * <actual value>: not a list -- in Value::to etc.
  * <actual argument to 'file'>: file can't be opened
  * In At_Arg(), remove superfluous parens from arg expression
    so that argument location is more precise.
* debugger
  Create an interactive debugger, action to jump into the debugger,
  debug command to dump a specified frame, showing exact contents of local
  and non-local slots without evaluation.
* Lazy Modules:
  Why?
  * Make the language more expressive. Programs that now fail due to illegal
    recursive reference will now succeed.
  * Efficiency through deferred evaluation? Not for MVP.
  Change the Module API so that Thunks are forced before Values escape.
  I'll need to add Frame* or Context& arguments to provide exception context
  if thunk forcing fails:
  * in Module::print()
  * in Module::begin()
  * in Module::getfield()
  I need a Context& for proper error messages, but I need a parent frame to
  force a thunk. Maybe add `Frame* Context::get_frame()`. Won't work in GL
  due to GL_Frames. Maybe Frame and GL_Frame share a common ancestor for
  use in Context.

  * Stdlib contains thunks. When are they forced?
    * When stdlib is loaded. (As early as possible. Even for names that are
      never referenced.)
    * During analysis, in Builtin_Environ. The value is forced in the Namespace
      object, which happens at most once.
    * At runtime, in Constant (or Lazy_Constant). Problem: we'll make multiple
      copies of the thunk then later force multiple copies. Fix?
  Need to force a module slot before the value leaves the module.
  Currently, all fields values are forced during module creation.
  For true lazy modules, need to pass a Frame* through Ref_Value::getfield
  and Module::get.
* blocks: tighten up the syntax.
  (stmt1;stmt2;expression) -- expression block has no final semicolon
  (stmt1;stmt2;generator)
  (stmt1;stmt2;action;)  -- action block has final semicolon.


# Older Stuff

gcurv -- tool which reads a curv script and displays shapes in a window.

Live programming:
 * lcurv filename -- watch curv src, update OpenGL window on change.
   * initially, non-interactive. glslViewer inherits lcurv stdout/err.
   * could initially be a shell script. tricky though, requires extra commands
     like inotifywait or fswatch.
   * eventually, I want to redraw if an included file changes. This requires
     integration with libcurv.
   * `fswatch` looks like a decent package on github.
     https://github.com/emcrisostomo/fswatch/tree/master/libfswatch
     Has both a CLI and a library with C and C++ bindings.
     Supports all operating systems.
   * Easier just to use a stat loop in curv.cc
 * use `curv -w filename` for live programming mode. Maybe this *also* has an
   interactive CLI for querying variables and debugging. GNU readline has a
   callback-based API suitable for this: rl_callback_handler_install etc.
 * curv CLI mode: when a Curv expression returns one or more shapes,
   print them on the console in ASCII (more useful once we have `defshape`),
   *and also* display the union of the shapes in an OpenGL window.

2d subsystem: repetition operators, and others

kisrhombille-3-7: does the GL output actually work?

refactor/extend:
* generalized shapes. 3D, time. geom:[x,y,z,t]->[d,r,g,b]

Build up the standard library.
* There are many GLSL functions that ought to be supported by Curv.
* Some of them need to use the GLSL, not the Curv implementation.
  Eg, GLSL `dot` is very efficient.
* Some GLSL functions are version dependent, like trunc.
* Hard coding this in C++ is tedious, can it be defined in `std.curv`?
* Maybe add GLSL metadata to a Curv function definition so that calls can be
  translated to GLSL library calls.
* I'd like a peephole optimizer to recognize idioms like e^x and translate
  them into more efficient/accurate operations like exp(x).
* The peephole optimizer could map idioms generated by inlining Curv functions
  onto GLSL library functions.

Linear algebra:
  dot-product (vec*vec=scalar), matrix*vec, vec*matrix and matrix*matrix
  identity(i), pow(square_matrix,i),
  determinant(square_matrix), inverse(square_matrix) -- difficult

  cross(x,y) = [x'1*y'2 - x'2-y'1, x'2*y'0 - x'0*y'2, x'0*y'1 - x'1*y'0];
  dot(x,y) = sum(x*y); // vector dot product
  identity(n) = [for(i=[1..n])[for(j=[1..n])if(i==j) 1 else 0]]; // or eye
  transpose(a) = [for(i=[0..len a'0 - 1]) [for(j=[0..len a - 1]) a'j'i]];

  dom(a) = [0..len(a)-1];
  transpose(a) = [for(i=dom a'0) [for(j=dom a) a'j'i]];

  identity(n) = [for(i=[1..n]) [for(j=[1..n]) bit(i==j)]]; // or eye(n)

Vectorized boolean operations:
* Vectorized relations are <' <=' >' >=' ==' !='. Or, <* <=* >* >=* ==* !=*.
* `not` is vectorized version of `!`.
* `all` and `any` are vectorized boolean monoids for && and ||.
  * Name is consistent with R,Julia,Python,Matlab.
  * Use some(pred)list, every(pred)list, name consistent with Javascript.
* ifelse(cond,thenval,elseval)
* Rationale: vectorized boolean ops have different names than unvectorized ones.
  * x==y compares vectors and returns bool, unlike xs=='ys.
  * a&&b short circuits if a==false, but all[a,b] must evaluate b if a==false
    to implement broadcasting.
  * ifelse(b,c,a) must evaluate all 3 arguments if b is an array.
  * The unvectorized relations are guaranteed to return Bool, or fail,
    which is appropriate for the most common use case, which is to construct
    an argument for if, &&, ||, which require a Bool argument.
* Many languages represent boolean values as the numbers 0 and 1.
  In an array language, an array of booleans represented as 0 and 1
  is a useful representation, you can do arithmetic on it.
  In Curv, booleans are not numbers, but you can convert between the two
  representations using vectorized operations. Eg,
  * enbool(i) = [false,true]'i;
  * debool(b) = ifelse(b, 1, 0);
  Or:
  * tobool(i), frombool(b)
  Or:
  * idiom: i != 0, or i !=' 0
  * bit(b) = ifelse(b, 1, 0);

ongoing research:
* list library

2D subsystem:
* polygon -- convex_polygon as Nef polygon, intersection of half planes
  convex_polygon(vertices) -- vertices are in counterclockwise order, as this
  seems to be the standard convention.
  regular_polygon(nsides) -- efficient representation using symmetry
* align
* Repetition operators, which repeat a shape multiple or infinite times,
  in constant time and memory, in accordance with some symmetry pattern.
  These operators can be composed to describe more complex symmetries.
  * row
    * 7 frieze groups: https://en.wikipedia.org/wiki/Frieze_group
  * grid
    * 17 wallpaper groups: https://en.wikipedia.org/wiki/Wallpaper_group
  * rotate tau/N, N copies
    * rosette groups
  * reflect
  * glide reflection
  * spiral -- not sure if this is symmetric -- might have trouble defining it?
    http://www.mathematische-basteleien.de/spiral.htm
  * The Symmetry of Things, orbifold notation
    * An orbifold signature does not uniquely specify a repetition operator.
    * Find a collection of ops that can be composed to generate
      all the repetition patterns.
* pack or row
* crop
  * crop(xmin=null,ymin=null,xmax=null,ymax=null)=...; // OpenSCAD style
  * crop{xmin=null,ymin=null,xmax=null,ymax=null} shape =
      intersection [shape,
        if (xmin!=null) make_shape{dist p = xmin - p'0},
        if (ymin!=null) make_shape{dist p = ymin - p'1},
        if (xmax!=null) make_shape{dist p = p'0 - xmax},
        if (ymax!=null) make_shape{dist p = p'1 - ymax},
      ];
* visualize the distance field using a colour_map
* shell(n), inflate(n)
* text (steal from openjscad or antimony to begin with)
* rsquare, runion (rounded corners and fillets)
* infinite patterns
* grid (map shape onto infinite repeating shape)
* fractals
  * fbm cloud colourmap (as seen in IQ's Elevated on shadertoy)
  * fractal mountain: port IQ's Elevated
  * Mandelbrot set
* morph(r,s1,s2)
* Escher circle limit
* minkowski sum
* Sweep. Extends a 2D object along a path.
* Extrusion. Extends the shape of a 2D object in a perpendicular direction into 3D space.
* Revolve. Sweeps a 2D object around an axis.
* Loft. Extends the contours of a shape between one or more open or closed objects. Simple approach: linear_extrude which morphs between two 2D endpoints.
* Slice. Divides a solid object into two separate 3D objects.

Colour:
* spelling: "colour", as per en.oxforddictionaries.com
* [r,g,b] is a colour value.
* [x,y]->[r,g,b] and [x,y,z]->[r,g,b] are 2d and 3d colour fields.
* x->[r,g,b] is a colour map from [0...1) to a colour.
* 2D shape with colour[x,y] function.
  * Either a shape has colour or it doesn't. Union requires either both args
    have colour, or neither.
  * When a coloured shape is transformed, the transformation is also applied
    to the colour field.
* `colour(c) shape` applies a colour or a colour field to a shape.
* Colour operations:
  * predefined colour values (red,green,blue,yellow,magenta,cyan,orange,green,...)
  * colour operations (eg, light red)
  * Geometric transforms can be applied to colour fields.
* Image import.

nary union:
* union shapes =
    make_shape {
      dist p = min [for (s = shapes) s.dist p],
      bbox = [min[for (s=shapes) s.bbox'0], max[for(s=shapes)s.bbox'1]]
    };
* GL: since shapes is a constant during inline expansion, we can expand the
  for loop into a list of expressions.
* Or implement nary union on top of binary union.
* union = reduce(nothing, union2);
  reduce(id,f) list = iter(id,list) where iter(first,rest) =
    if (rest==[]) first else iter(f(first,rest'0),rest'(1..));

* curv::Shape2D is abstract, with builtin and user subclasses
  * subclass User_Defined_Shape2D, UD_Shape2D, User_Shape2D (better name?)
    Scripted_Shape2D, Exo_Shape2D also ecto- ext-
* make_shape accepts a record or module argument.
* make it zoom/rotate with mouse.
* make same code run in an OpenGL window created using C++.
  http://www.opengl-tutorial.org/beginners-tutorials/tutorial-1-opening-a-window/
* Should `make_shape` be polymorphic? Detects if shape is 2d or 3d based on bbox.
* Should `everything` and `nothing` be polymorphic? Has 2 dist functions,
  2 bboxes, for 2d and 3d cases.
  * Are there any other use cases for this?
    * How about volumetric textures like marble.
      Maybe these are colours, not shapes.
  * I could also use `everything2d` and `everything3d`.
  * Don't do this until there is a strong use case for it.
  * If `nothing` isn't polymorphic, what does `union[]` return?
  * Why 2 dist functions? The code would be identical (since Curv isn't
    strongly typed). Just use one dist function, and then:
    * boolean attributes `is_2d` and `is_3d`, and one bbox. The Z components
      of the bbox are infinite/ignored in 2D objects.
    * Two bboxes, bbox2d and bbox3d, which also serve to tag the object as to
      whether it is 2d or 3d or both.

# 0.1: Minimum Viable Language
* echo:
  * $ substitutions in string literals
  * echo argument is a single string
* more debug actions:
  * assert(condition) <=> if (!condition) error("assertion failed")
  * require(predicate) expr <=> let(tmp=expr)(assert(p tmp);tmp)
  * (x : predicate) -> body
  * error(string)
  * warning(string)
  * echo_timing(string,expr), returns value of expr
    * Might want to measure eval time while ignoring result.
    * In OpenSCAD, `*` is a prefix operator that ignores the following shape.
    * In Curv, maybe `ignore(arg)` is an action that evaluates and ignores arg.
  * enter_debugger, aka `break`, `debug`
* len(module), module[i]
* records: merge[r1,r2]
  I don't want `merge` to accept modules as arguments: overriding an existing
  module field doesn't work if the module also contains functions closed over
  those fields.
* modules: _foo is not exported, is omitted from the public dictionary.
  curv::Module has a public dictionary and a debug dictionary.
  _foo is private in std.curv, and in all other *.curv files.

# refactoring
* use new Value access API throughout code
* value1==value2 performs a bitwise comparison (for performance),
  to speed up code like val==true and val==missing.
  The general (expensive) equality is val1.equals(val2)

# command line arguments
* command line export to different file formats (-o option)
  curv [-i node] [-o format] [-D definition] filename
  Evaluate filename as a Curv script file, yielding a module.
  Write the module elements to stdout, unless -i name is specified, then
  evaluate 'name' in the context of that module to get a value which is to
  be output.
  By default, the output format is to output each value as a Curv expression,
  terminated by a newline, unless a different format is specified by -o.
  Output formats: json, shadertoy.
  The -D flag takes a legal Curv definition as an argument.
  This definition is added to the module being read, overriding an
  existing top level definition. This override happens during parsing.
* command line documentation
  * docs/curv.1.md is converted to curv.1 by pandoc and installed
  * curv --help
  * curv --version


VM:
* debugger entry on exception
  * System::error(const Exception&) -- throw an exception, but first, enter
    the debugger.
  * debugger: commands are bound as Curv metafunctions.
    * `trace` print stack trace (with numbered call frames)
    * `frame N` specify call frame
    * inspect variables at current frame
      * local and nonlocal symbol table pointers in Frame
    * `exit`
* interrupt

OpenSCADbis proposal

# Simpler, More General Grammar
* refactor/cleanup
  * get rid of List_Sequence_Expr
* Convert `let` and `for` into metafunctions.
  If this causes pain, change/regularize the grammar.
* Simple, yaccable grammar with no conflicts or precedence declarations.
* each <list> generator
  1. `each` is a builtin metafunction. Use a subclass of `Builtin`.
  2. `each` is a builtin generator function, so `each` is a value.
     Extend `Function` with a generate callback and add Call_Expr::generate().
  3. each(v) = for (i = v) i; Not hard: just add Call_Expr::generate().
* names: Phrase or Syntax?

Generalized Definitions:
* A definition may bind multiple names.
* A Definition is compiled into an initialization Action that stores a value
  in a run-time data structure for each name that it binds (modulo constants?).
  * module (recursive scope): A definition may bind multiple names. Each such
    name has a slot containing the same Action thunk, which when evaluated
    updates all of the slots with their values.
  * qualified expr (sequential scope): each definition is compiled into an
    action that evaluates definientia and stores values in binding slots.
    At run time, execute the actions in order, then evaluate the expr.
  * record (no scope): compile definitions into actions, execute actions to
    initialize the record value. Records don't use slots, so we need a variant
    action type for updating record fields?
  * Definition::analyze(env) returns an action.
* `[x,y]=...` using above framework
* Extend `let` to support recursive functions.
* `expr where (defs)`, higher precedence than `let`, same semantics.
* (def1; def2; phrase) qualified expressions, sequentially scoped, see Loop.md
  * Each def compiles into an action which stores values in slots.
    Actions are executed in sequence, then expr is evaluated.

Generalized Phrases:
* ( definition )
* ( action; definition )
* ( definition; phrase )
* (def1, def2) is a compound definition that is order independent:
  (def2,def1) has the same meaning. The scoping rules depend on context.
  This meaning arises in let(def)phrase, {def}.
* In a comma phrase, definitions and operations cannot be mixed.
  (def1,def2) is unordered, (op1,op2) is ordered.
  * It's better if we have a clear distinction between `,` and `;`.
    It's confusing if they overlap. Which they certainly do in module scope.
  * In a comma phrase, can a definition be mixed with an operation?
    Maybe no? (def1,def2) is unordered, (op1,op2) is ordered.
  * (action1 , action2) is an action, not a generator --
    semantically consistent, but not important, and potentially confusing:
    stylistically you should use `;` if a compound action
    (as opposed to a compound generator) is required.
  * If Action <: Definition then (act,def) makes sense. But this complicates
    the semantics (ordered vs unordered) and there's no utility.

Value Scripts?
* `(def1,def2)` is a compound definition. Weird advanced feature, rarely used.
  Same as `use {def1,def2}`.
  Can contain actions, too. (action) is ambiguous: is it an empty list or
  an empty definition?
* To define mutually recursive functions in the CLI session environment,
  can't use `f=...; g=...` any more. (Not an important use case, but for
  completeness it should be possible.)
  * (f=..., g=...)
  * use {f=..., g=...}
* Sequential definitions: not part of MVP, consider later.
* Customization of modules and shapes: not part of MVP, consider later.
  A script can export a parameterized module like this: `(x,y)->module{ ... }`.
* Modules as shape values: I'd like a way to attach metadata to a high level
  shape expression, for BOM. That's not in this design yet.
  * `S = metadata{x=1,y=2}shape`. No customization possible.
    * Prints as `metadata{x=1,y=2}shape`.
    * Should be easy to implement using `defshape`.
    * S.x and S.y accesses metadata, attr(S) are shape attributes.
    * S.param.x and S.param.y, shape attributes are accessed directly.

Package Manager.
* How are packages named?
  * URLs are flexible. We'll support a variety of geometry file formats:
    images, meshes, *.curv, *.svg, and so on. We can reference internet
    resources that weren't designed and packaged in a Curv-specific format.
  * The Technetium namespace is a nice idea.
* Is there a formal notion of a package as an entity, as a collection of
  files and metadata? (What is a package value?) Or do we just reference
  individual files using their URLs?
  * URLs are simple.
  * Some notion of package versioning might be useful.
    * Thingiverse doesn't support versioning. Github does, with a URL encoding.
      * https://raw.githubusercontent.com/USER/PROJECT/BRANCH/PATH
      * https://raw.githubusercontent.com/USER/PROJECT/COMMIT-HASH/PATH
      * github://USER:PROJECT/PATH
      * github://USER:PROJECT:BRANCH/PATH
      * github://USER:PROJECT:HASH/PATH
* Is a package: a library, a shape or a library, or an arbitrary value?

Directory Syntax.
A directory containing a bunch of Curv source & resource files
is itself a source file denoting a module, one entry per file.
* I've considered much more complex versions of this, but this is simple
  and good enough for MVP.
* This could mean: in foo.curv, you can refer to a sibling file bar.curv in the
  same directory as simply `bar`, rather than as `file("bar.curv")`.

Other:
* Interactive curv: special variable `_` is last value. _1,_2, or $1,$2 ...
* Shared constructor is protected. share<T>(T&) aborts if use_count==0.
* Dynamically pluggable system abstraction. `System` class with system.echo(),
  system.warning(), system.error(), system.open(), system.namespace, etc.
  System object is refcounted, available during compile and run time.
  * Scanner::system_
  * Environ::system_. Just a single Environ object for the entire analysis
    phase, which points to a chain of Scope objects.
  * builtin_namespace(system) is a function that injects the system object into
    certain builtin functions, like `file`, avoids the cost of making system
    generally available in all evaluation contexts.
  * Do we need the system object to be a VM register? Maybe needed if
    system.error(Exception) is used to throw errors (so that debugger can be
    triggered on error). So then:
    * thread local variable
    * store in Frame--more efficient than passing as argument to eval()
      and Function::function_().
* interrupt.
  * Periodically test a thread local variable known to the curv core,
    curv::interrupt_requested. Throw an exception on interrupt, or call a System
    function to do this. I don't like thread local variables for stylistic
    reasons, but it seems legit to use one for IPC.
  * Periodically test the variable System::interrupt_requested.
    This is an extra pointer indirection more expensive than a thread-local var.
  * Periodically call a System function. Inside this function provided by
    the client is `if(thread_local_interrupt!=0)throw Interrupt()`.
    This keeps the core "pure" (free of thread-local variables) at the cost
    of a virtual function call at frequent intervals. The client will define
    the thread-local variable instead.
* still need this?
  - Environ must contain a Frame and a System. How?
    - Every Environ contains a copy of the Frame and System pointers.
    - A single mutable Environ object for the entire analysis phase,
      which points to a stack of Scope objects.
      Use RAII (in Scope class) to push/pop scopes.
      So Scope contains a reference to Environ.
      Environ::lookup calls Scope::lookup.
      More complex, but a cleaner data model, since it doesn't make it look
      like each Scope has an independent choice of Frame and System.
* refactor File_Script
  * Provide better exception messages using strerror(errno).
  * Possibly use mmap?
  * I only support UTF-8. The curv tool only runs on Windows if you use pure
    ASCII or explicitly initialize your console using `chcp 65001`.

# CURV0 (expressions):
* bug: (-1)^-0.5 error message needs parens around '-1'
* x^y: right associative, -x^y==-(x^y), x^-y==x^(-y)
  **: algolw, Python, Rexx, Simula, Cobol, Ruby, Tcl
  ^^: D
  ^: Eiffel, Icon, Mathematica, Maple, Matlab, Basic, Awk, Bc, Lua, Julia, R
* double-conversion based strtod
* lexer parses C++14 preprocessor numerals, Numeral::analyse parses legal
  numeral while building a buffer for strtod.
* string: $$ $" $id ${id} $(id) $+EE interpolation, strcat[s1,s2]
  scanner has in-string flag, parser resets/sets flag during $(expr).
* string: str@i, len(str) -- either ASCII-only, or proper Unicode
* records: merge[r1,r2]
* broader unit testing
* smart pointers, see docs/Shared_Ptr.md

# CURV1 (scripts, LLVM)
* pattern matching: hypot[x,y] = sqrt(x^2+y^2).
* LLVM based evaluator. Compile Meaning to LLVM IR.
  Embed raw function pointers and Values in IR as bit patterns.
* Benchmarks

# CURV2 (nested scopes)
* printing a function? currently, <function>, even for builtins

# CURV3 (simple geometry)
* F-Rep: cube, sphere, affine transforms, boolean CSG
* implement 3d primitives in Curv using shape3d. (also is_shape)
  * this means: I'm implementing language features I need for defining geometry
* preview using ray marching--convert CSG tree to GLSL

# CURV4 (geometry export)
* use dual contouring instead of marching cubes for STL export
* does OpenCL speed this up?
* SVX export?

# Ongoing:
* more unit tests
* language reference manual

---------------------------------------------------------------------------
# Later:
* Digit separator ' in numerals (like C++14).
* Support ' in identifiers (like Haskell).
* Support `foo` quoted identifiers.
  Compatibility with OpenSCAD identifiers, GUI interfaces that display
  parameter names as GUI labels, JSON object keys.
* Rewrite scanner in re2c. Then add UTF-8 support.
* Parser: consider Boost::Spirit (recursive descent) or Lemon (similar to
  Bison, thread safe, LALR(1)), or Bison with %pure-parser (thread safe).
  Is Lemon better than Bison? Lemon:
  * the tokenizer calls the parser (instead of vice versa)
  * terminals/non-terminals don't need to be declared. Terminal name has
    initial uppercase letter.
  * productions are less error prone. Instead of $1, $2 (requires counting),
    expr(A) ::= expr(B) PLUS expr(C). { A = B + C; }
  * no mid-actions, one action per rule.
  * no repetitions and optionals.
  * small footprint: small code with no dependencies
* localization
* curv::String refactor
  * String_Builder is rewritten to use a curv::String as the internal buffer
  * User defined string literal constructs a Shared<String>:
    underlying object is constructed at compile time with no mallocs,
    and without two copies of the string literal data.
* dtostr() refactor
  * put all 4 parameters into a DStyle struct.
* aux::Exception/curv::String refactor. Aux shouldn't depend on Curv.
  Original plan: to put String in Aux. But we'll see how Curv runtime evolves.

build system?
* Fast. Correct: auto track dependencies, rebuild on recipe change,
  delete stale objects. High level: standard abstractions that are portable
  across linux/osX/win. Cross project dependency discovery and configuration
  (see pkg-config). Packageable: libcurv can be packaged for Ubuntu; build tools
  are already in ubuntu repo.
* Should I use pkg-config for build-time dependency discovery and configuration?
  Do I install a *.pc file that records compiler and linker flags required to
  use the curv library? Can I build an Ubuntu package for libcurv?
* Google Bazel is fast, correct and high level. Still in beta. Missing some
  platform support, cross project dependencies. Wait for 1.0 in 2017.
* cmake is popular and well supported on multiple platforms.
  It has comprehensive portability abstractions.
  It is more correct than expected, given that it generates makefiles.
  Rebuilds on recipe change, tracks header dependencies. Doesn't delete stale
  products. (Has an experimental option to generate ninja files.)
* ninja is fast. It rebuilds if recipe changes. Header dependencies depend
  on the gcc feature to output dependencies (suboptimal, I'd rather it monitor
  which files are opened by build tools).
  Need a generator: ninja+cmake, ninja+gen, ninja+bash, ...
* tup is fast and correct. Tup determines hdr file dependencies automagically.
  Tup rebuilds if recipe has changed. Tup deletes build products that can
  no longer be generated. Tup has a high level command language (Lua).
  * Tup is not in the Ubuntu package universe. There are PPAs...
    Building from source isn't working...
  * Tup is deeply magical and edgy. It uses FUSE, performs kernel magic to
    overlay source and object directories, and makes tools confused
    about what their current directory actually is, causing some things to
    break. This can be overcome using the ^c chroot flag, which requires
    setuid root. FUSE probably no longer works in MacOS ElCapitan due to SIP.
  * So edgy it might discourage contributors. The automagic dependency tracking
    requires deep magic that is also flaky: fuse, chroot, dynamic lib injection.
    Eg, the ConEmu terminal emulator breaks DLL injection on Windows.
    Tup is reported to not work on FreeBSD (fuse works differently).
* redo. Simple, powerful, elegant. Also slow (as fast or slower than make).
* So, probably cmake+ninja.
