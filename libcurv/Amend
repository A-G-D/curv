'a@i := n' compiles into 'a := amend i n a':
 * partial eval: if a/i/n are symbolic, then result is symbolic amend expr.
 * interpreter: O(1) element update via COW and move optimization.
   * In general, move optimize last use of a variable,
     therefore optimize a := F a, therefore optimize 'a := amend i n a'.
   * For now, Amend_Local is an ad-hoc move optimized Amend operation.
 * SubCurv: special code generation for 'a := amend i n a'.

'a.[i,j]@k := n' is compiled into:
  Amend_Local(a, Path[Slice[i,j],k], n)
Result of analysing a locative is a local variable and an index path.
* Perhaps the index (containing paths and slices) needs to be normalized
  into a form that supports easy evaluation?

According to my original design, the Lens API has 3 fundamental operations:
    fetch lens tree         tree@lens
        Isolate the elements indexed by 'lens' and return just them.
    amend lens elems tree   tree@lens := elems
        Update the elements indexed by 'lens', replacing them with new
        element values, and return the updated tree.
    over lens f tree
        Update the elements indexed by 'lens' by applying 'f' to them,
        then return the updated tree.

I can't implement the lens API in libcurv using just these 3 operations.
(Let's assume that all user-defined lens values are abstract values
supporting just these 3 primitives.)

The problem is how to implement the primitives for slices of picks.
    fetch (slice[i1,i2]) tree = fetch_slice i1 i2 tree
    amend (slice[i1,i2]) elems tree = amend_slice i1 i2 elems tree
    over (slice[i1,i2]) f tree = over i1 (over i2 f) tree

Each lens type needs to define fetch_slice and amend_slice:
  fetch_slice lens i2 tree
    Isolate the elements indexed by 'lens',
    transform each element by applying 'fetch i2',
    then return the resulting elements.
    'fetch i tree' is equivalent to 'fetch_slice i id_index tree'.
    'fetch_slice i1 i2' is equivalent to 'fetch (slice[i1,i2])'.
  amend_slice lens i2 elems tree
    Update the elements indexed by 'lens',
    replacing each element E with ...
        ... the result of amending the element using 'amend i2 e',
            where 'e' is the replacement value corresponding to E in 'elems',
    then return the updated tree.
    'amend i elems tree' is equiv to 'amend_slice i id_index elems tree'.
    'amend_slice i1 i2' is equiv to 'amend (slice[i1,i2])'.

In Curv 0.5, an undocumented internal lens API:
* In libcurv, fetch_slice and amend_slice for builtin lens types.
* Builtin lens constructors: tid, tpath, tslice.
* To simplify the code, a slice is a pair of index values.

Post Curv 0.5, this API is redesigned, renamed, made public.
User defined lenses are supported.
Maybe fetch_slice/amend_slice are replaced by better primitives.
