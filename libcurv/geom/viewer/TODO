TODO:
* Fix storage leak revealed by asan/valgrind in debug build.
* open() throws an exception instead of calling exit().
* shadertoy compatibility.
* get rid of 10ms delay in draw_frame()

Code cleanup:
* vbo_ should be a unique_ptr
* set_shape() can be called at any time
  get rid of set_frag()
* get rid of includes_ data member (move details into glslViewer/shader)
* make view_server.cc
* Test more than one concurrent Viewer window.

* Occasionally get this message on macOS when opening, closing then opening
  Viewer windows. It is a rare event (timing related I guess):
  Jul 22 19:14:13  curv[20006] <Warning>: void CGSUpdateManager::log() const: conn 0xb4df: spurious update.
  Answers on the web:
  * Make sure to call super in viewDidLoad, viewWillAppear and viewWillDisappear
    These don't appear in GLFW, though.

Viewer
------
API:
* Default constructor(): Construct Viewer, initialize window parameters to
  defaults, but don't initialize OpenGL or create the window.
  After construction and before open(), you can modify the window parameters.
  Initially, is_open==false.
* bool is_open()
* void open(): Initialize OpenGL and create the window. Set is_open=true.
  May throw exception, eg can't initialize OpenGL.
* void set_shape(Shape&): Set the shape displayed by the viewer window.
  May be called if is_open==true: after open(), or after draw_frame().
  May throw an exception due to geometry compile error, or GLSL compile error.
* bool draw_frame(). Called repeatedly in a loop. Returns false when it is
  time to exit loop (user has closed window).
* void close(). Close window, if not already closed. Return to just-after-
  construction state, setting is_open=false.

and this is used by curv batch mode:
* set_shape(shape) before open()
* run() {
    open();
    while (draw_frame());
    close();
  }

View_Server
-----------
The REPL thread will be send blocked when we call init + set_shape,
or just set_shape. Errors detected here will be reported as if by the REPL.
Or use std::exception_ptr etc to capture and rethrow exception from send().

Viewer thread:
    Viewer viewer;
    for (;;) {
        if (!viewer.is_open) {
            Message msg;
            msg.receive();
            switch (msg.id) {
            case k_exit:
                return;
            case k_display_shape:
                msg.reply([&]()->void {
                    viewer.init();
                    viewer.set_shape(msg.shape);
                });
            }
        } else {
            for (;;) {
                if (!viewer.draw_frame())
                    break;
                Msg msg;
                if (msg.try_receive()) {
                    switch (msg.id) {
                    case k_exit:
                        return;
                    case k_display_shape:
                        msg.reply([&]()->void {
                            viewer.set_shape(msg.shape);
                        });
                    }
                }
            }
        }
    }

struct Message {
};

------
The curv REPL runs in a worker thread. The main thread waits for the
REPL to complete, and displays shapes in a viewer window on request.

Main_Thread is either sleeping, waiting for a request, or it is looping
in OpenGL, checking for requests at each iteration.
Two request types: new_shape and exit.

Variables for thread communication:
    std::thread repl_thread;
    std::mutex request_mutex;
    std::condition_variable request_condition;
    enum class Request {
        k_new_shape,
        k_exit,
        k_none
    } request; // guarded by request_mutex

Viewer thread:
    Request receive_request(bool block)
    {
        std::unique_lock<std::mutex> lock(request_mutex);
        if (block)
            request_condition.wait(lock, []{return request != Request::k_none;});
        else if (!request_condition.wait_for(lock, 0ms))
            return Request::k_none;
     
        // after the wait, we hold the lock.
        Request r = request;

        // process request
        ...

        request = Request::k_none; // indicate we are ready for another request
     
        // Manual unlocking is done before notifying, to avoid waking up
        // the waiting thread only to block again (see notify_one for details)
        lock.unlock();
        request_condition.notify_one();
        return r;
    }
    void reply_request()
    {
    }
    for (;;) {
        if (!is_open) {
            wait_request
        } else {
            open_view()
            for (;;) {
                poll_request
                draw_view();
            }
            close_view();
        }
    }

REPL thread:
    // send request to viewer thread:
    void send_request(Request r)
    {
        {
            std::lock_guard<std::mutex> lock(request_mutex);
            request = r;
        }
        cv.notify_one();
        // wait for the worker
        {
            std::unique_lock<std::mutex> lock(request_mutex);
            request_condition.wait(lock, []{return request == Request::k_none;});
        }
    }

#include <iostream>
#include <string>
#include <thread>
#include <mutex>
#include <condition_variable>
 
std::mutex m;
std::condition_variable cv;
std::string data;
bool ready = false;
bool processed = false;
 
void worker_thread()
{
    // Wait until main() sends data
    std::unique_lock<std::mutex> lk(m);
    cv.wait(lk, []{return ready;});
 
    // after the wait, we own the lock.
    std::cout << "Worker thread is processing data\n";
    data += " after processing";
 
    // Send data back to main()
    processed = true;
    std::cout << "Worker thread signals data processing completed\n";
 
    // Manual unlocking is done before notifying, to avoid waking up
    // the waiting thread only to block again (see notify_one for details)
    lk.unlock();
    cv.notify_one();
}
 
int main()
{
    std::thread worker(worker_thread);
 
    data = "Example data";
    // send data to the worker thread
    {
        std::lock_guard<std::mutex> lk(m);
        ready = true;
        std::cout << "main() signals data ready for processing\n";
    }
    cv.notify_one();
 
    // wait for the worker
    {
        std::unique_lock<std::mutex> lk(m);
        cv.wait(lk, []{return processed;});
    }
    std::cout << "Back in main(), data = " << data << '\n';
 
    worker.join();
}

New Viewer Design
=================
Goal: a modular, single-process, multi-threaded design for curv and gcurv.
A library implementation of the Viewer window.

I want the Viewer window and the Curv evaluator in a single process, so that:
* The evaluator can pull graphical objects into memory (eg images and voxels)
  and share these values with the Viewer without going through the file system.
  Okay, these values will still need to be copied into the GPU.
* Share a Shape value with the Viewer, which can extract the CSG tree and
  display value pickers. Which then feed parameter changes back to the IDE.

Original Design
---------------
A Viewer object provides an interface to a viewer window that
runs in a separate thread. The foreground thread calls viewer.set_shape to load
a new shape, and viewer.open() to idempotently spawn a viewer window displaying
the current shape. The Viewer window uses GLFW, OpenGL and Dear IMGUI, and this
code runs asynchronously from the foreground thread, which doesn't care what
GUI toolkit the Viewer window uses--there is no coupling.

Use cases:
* curv runs a CLI REPL loop in the foreground, using GNU readline or replxx
  library on github. If the current expression evaluates to a shape, then
  display it in a Viewer window that runs asynchronously from the CLI code.
* gcurv is an IDE, possibly written in C++ with Qt, possibly in some other
  language and GUI library that supports rich text. Whatever, the choice is
  uncoupled from the Viewer implementation.
* The Curv library (including the Viewer object) is wrapped in Python.
  Run a Python program from a Python IDE, and it opens the Viewer window
  to display a Curv shape. Like the OpenSCAD/Processing UI. Works with any
  language, with minimal work to integrate the Viewer into an IDE.
* Jupyter integration and web browser integration, eventually.

Problem
-------
The multi-threaded design I created for Linux won't work on macOS:
* glfwCreateWindow() must be called from the main thread.
* window event handling must also occur on the main thread.
* However, it's possible to perform OpenGL calls on an auxiliary thread
  if glfwMakeCurrentContext(window) is first performed on that thread.

Solution (for libcurv)
----------------------
curv::geom::viewer should not create a window, should not create a thread,
should not own the OpenGL frame-drawing main loop, and should not poll or
register callbacks for input events. It should present an IMGUI style API.
It should not use GLFW directly. It should just use OpenGL, operating on
an implicit OpenGL context provided by the caller.

This API is compatible with QOpenGLContext. The client is responsible for
calling makeCurrent() at the start of frame rendering, and swapBuffers()
at the end.

Solution (for Curv UI)
----------------------
The Viewer is tightly integrated with the evaluator code. They both live
in the same process, and can efficiently share memory and GPU resources.

The UI app is responsible for creating windows, creating OpenGL contexts,
obtaining and dispatching input events, running main loops, creating threads.

curv::geom::viewer is compatible with sharing texture assets between viewer
windows. This is done by enabling sharing when the context is created, and
the caller (UI) creates the context. Direct mode rendering requires that all
shared contexts are in the same process, so I don't want a multiprocess design.

gcurv:
Create a Qt application. The Viewer and IDE windows are Qt windows.
The Viewer window contains an OpenGL viewport that curv::geom::viewer renders
into.

curv:
There is a conflict between macOS and running GNU readline in the main thread.
On macOS, the window and the GUI event queue must exist in the main thread.

 1. Curv's non-interactive mode, still capable of displaying a viewer window,
    creates no difficulties. I'll need UI code to create and run the viewer
    window: this is executed in the main thread.

 2. The REPL runs in a worker thread. The main thread waits for the
    REPL to complete, and displays shapes in a viewer window on request.

Very similar to my existing threaded code. Seems legit.

Solution (foreign-language IDE integration)
-------------------------------------------
I want 'shape.view()' in Python, or whatever, to display the shape in a
separate Viewer window. The Viewer window has to keep running after the
Python program exits. In the general case, I can't run persistent threads
inside a foreign IDE's address space, so the integration spawns a separate
Viewer process which maintains all the Viewer state, and the file system is
used for communication (maybe a Unix domain socket or fifo file).
There is a performance hit, and I'm not designing this right now.

Old Comments
------------
Old comments about the multi-threaded design, in progress on dev branch:

I am attempting to maintain a persistent window size/location in the
Viewer structure.

Fix storage leaks.

Report error correctly if OpenGL can't be initialized: in interactive mode,
in live mode, in batch mode.

Replace curv*.frag temp file with a global string variable.

Dead code removal (remove unneeded globals).

Replace globals with member variables.

Move source code to libcurv/geom/viewer
