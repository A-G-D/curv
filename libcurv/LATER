New Types proposal
 * `Bool32` module contains the bool32 ops and constructors.

A string is a list of characters.
* curv::Value(char), Value::is_char()
* char x/is_char x --or-- Char x/Char? x
* str[i] returns a Char
* a list of Char behaves like a string in all cases
* string x -- or String x (with String? x replacing is_string x)
* bool x --or-- Bool x (with Bool? x replacing is_bool x)
* symbol x --or-- Symbol x (with Symbol? x replacing is_symbol x)
bool x -- x is 0 or 1 -- convert to #false or #true -- vectorized
    > bool x = select(equal(x, 0), false, true);
    > bool x = unequal(x, 0);
    Works, but doesn't exclude numbers other than 0 or 1.
    > bool = amap 0 (match [0 -> false, 1 -> true])
    > bool = amap {rank: 0, call: match [0 -> false, 1 -> true]}
    Nice.
    How do I get the same results using `select`? Naively,
    > bool x = select(equal(x, 0), false, (select [equal(x,1), true, #null]));
    Works, but doesn't abort on a bad argument.
    A variadic select with an optional final 'else' argument would work:
    > bool x = select(equal(x, 0), false, equal(x,1), true);
    How do I compile any of these into efficient low-level code?
      * bool x = unequal(x,0)
      * The low level SC code has different semantics than the high level
        interface (SC can't throw an error). Maybe there is a kind of Curv
        function that has a separate SC implementation, similar to how
        builtin functions have a separate SC implementation.
        bool = {call = amap {rank: 0, call: match [0 -> false, 1 -> true]}},
                sc_call x = unequal[x,0]}
Bool = {
    type: #[#false, #true],
    call x: unequal[x,0]
}
symbol s -- s is printable string -- convert to symbol -- not vectorized

