List Prim: Towards a better C++ API for constructing list primitives
====================================================================
Concrete and Symbolic List Values
  A symbolic list value is a Reactive list value, or an SC_Value (sc_call),
  or an sc-typeable List_Expr (sc_call_expr). Symbolic list values have a
  concrete size and an SC_Type. Support the full range of list operations on
  symbolic lists, including concat (which will require a rope representation
  of general lists) and amend.

Abstract List
  An efficient, convenient and abstract C++ API for operating on list Values,
  regardless of their representation (as String, List or Reactive_Value).
  Can support future list types: ropes, bit lists, compact numeric ranges,
  images, voxel grids, meshes.

Composable Amap
  amap_unary<Rank,Prim> and amap_binary<Rank,Prim> return another Prim.
  Rank is some abstraction that specifies the argument type, and it is
  separate from the Prim so you can apply a new Rank to an existing Prim
  like you can do in APL.

SC_Tuple
  Add an SC_Tuple type. Generalize SC_Value to describe tuples and general
  lists, so I don't write different code for an SC_Value argument (sc_call)
  and for an Operation that happens to be a List_Expr (sc_call_expr).
  Unify sc_call_expr into sc_call. Code gen for abstract arrays is easier
  for WGSL.

Unify SC_Value/Reactive_Value
  So I'm not coding the same logic+type checking for the SC_Value and
  Reactive_Value cases. Unify sc_call into call.

Abstract List
-------------
Right now Abstract_List is a superclass. That doesn't fit Reactive_Value.
The abstract interface consists of size(), which is fast, and val_at(),
which is slow (a virtual function). Let's ignore this and consider
requirements.

Most potential users of Abstract_List care about trees of nums or bools,
they don't care about characters, so they don't need to be polymorphic
over List and String. So maybe we need to use compile time polymorphism
for efficiency. So Abstract_List<Elem> is a template class.
Use C++17 and 'if constexpr'.

The Algebra
-----------

