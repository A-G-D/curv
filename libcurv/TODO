All builtin numeric/boolean operations are now vectorized. Document this.
    fields -- although, it isn't numeric/boolean
    Call_Expr -- could vectorize the function argument. Q'NIAL, FP
    Dot_Expr
All expression types supported by SubCurv also support reactive arguments.
Expressions that don't support reactive arguments:
    Equal_Expr
    Not_Equal_Expr
    select[a,b,c]
    dot[a,b]
and[...] and or[...] implement custom reduction code for bool32 and bvec. How?
  * A functional Prim interface, returns an optional SC_Value.
        SC_Value sc_try_reduce(SC_Frame& f, SC_Value a, const Context& cx)
SubCurv: sum[a,b,c,d] is t=[a,b]+[c,d];t[X]+t[Y], not (a+b+c+d)?

rename sc_vec_element -> sc_list_elem
    fix internals to support general struc list
    fix callers to support general struc list
update sc_eval_index*_expr() functions to support all struc types
sc index an array using a struc index value
add Reactive_Value::at(i,cx), call from list_elem and list_at
maybe refactor that list_at code in evaluator
replace idchr() -- use is_C_identifier()?
Array_Op and Prim should export the same interface.
Remove boilerplate and duplication from PrimType classes.
_Prim and _PrimType classes (different names for different signatures)
migrate all array primitives with operator syntax to Prim
migrate all array primitives with function syntax to Prim

and[...] and or[...] implement custom reduction code for bool32 and bvec. How?
 1. Define And_Function directly. Define ::sc_call_expr() to handle
    special cases first before invoking the general case. It calls sc_reduce,
    but this contains an if that handles a List_Expr arg before evaluating
    the arg and handling the value. It's at the value handling point that I want
    to insert code.
  * Maybe sc_reduce_expr calls sc_reduce_value. I want to override
    sc_reduce_value to execute my code then call the default version.
 2. It is cleaner to define the reducer in And_Prim.
  * Maybe And_Prim inherits sc_reduce_value from Binary_Prim, then overrides it
    while calling the default version. Yeah, but the default sc_reduce_value
    needs to call Prim::sc_check_args and Prim::sc_call. That's recursive, so we
    need to tie the knot and use OOP + a vtable.
      * Or tie the knot by passing the default sc_reducer as a function argument
        to Prim::sc_reduce_value.
  * Maybe And_Prim defines sc_try_reduce, which defaults to do nothing,
    inherited from Binary_PrimType.
      * A procedural interface, returns true on success, mutates a SC_Value& r
        to return a result.
            bool sc_try_reduce(SC_Frame& f, SC_Value& a, const Context& cx)
                if (a.type.is_bool32())
                    a = ...;
                    return true;
                return false;
      * A functional interface, returns an optional SC_Value.
            SC_Value sc_try_reduce(SC_Frame& f, SC_Value a, const Context& cx)
                if (a.type.is_bool32())
                    return ...;
                return {};

Soft Typing
-----------
Assignment of types to reactive expressions uses "soft typing", where type
conflicts produce an Error type and don't automatically cause the program to
abort. sc_result_type computes a soft type for the reactive expression, it
is not as restrictive as sc_check_args. Figure out the type system and then
fix this.
    Here's a bbox value:
        [[x0,y0,z0],[x1,y1,z1]] * reactive_num
    It is given the type Array[2]Vec3. Notice this isn't a struc type.
    Binary_Num_SCMat_Prim::sc_result_type() is rigged to return non-struc types
    so that this case won't generate a compile error. Non-struc values aren't
    supported by SubCurv, but this case works out because it is a bbox value,
    and we aren't compiling this expression into GLSL.

Standardize format of Prim error messages
-----------------------------------------
Binary_Array_Op::domain_error: use Prim::name rather than dig into cx.syntax
    is_C_identifier in symbol.h
+        if (is_C_identifier(Prim::name())) {
+            return Exception(cx,
+                stringify(Prim::name(),"[",x,",",y,"]: invalid argument"));
+        } else {
+            return Exception(cx,
+                stringify(x," ",Prim::name()," ",y,": invalid argument"));
    Standardized error messages in Prim. For the same Prim, errors can occur:
     * in a Call_Expr function call expression
     * in a Unary_Prim_Expr or Binary_Prim_Expr (part of a reactive expr)
    ERROR: 2 + #blue: invalid arguments
      <points at Binary_Prim_Expr>
    ERROR: max[2,#blue]: invalid argument pair
      <points at Binary_Prim_Expr or Call_Expr>
    ERROR: argument #1 of max: [2,#blue]: invalid argument pair
      <points at argument of Call_Expr>
* Errors produced by sc_check_args, from 2 SC_Values and a cx... what do they
  look like? In some cases I use At_Index(cx, 0 or 1) but does that work in
  all cases?
* Errors resulting from sc_result_type() failures? Maybe there should be no
  errors.

Rename Legacy_Function to Tuple_Function, since it isn't going away.
    Tuple_Function(nargs, name)
    Tuple_Function::tuple_call(f) -- was call(f), overloaded with call(val,f)
    sc_call_legacy(f) -> sc_tuple_call(f)
    At_SC_Arg(i,f) -> At_SC_Tuple_Arg(i,f)

ISSUES:
 * rx->expr() makes more logical sense than rx->expr(ph). That's in curv5.
   The 'ph' argument is used when a Uniform Variable value is converted to an
   expression operand, but that isn't the same as the source location where
   the Uniform Variable was initially referenced by name.
 * list_elem() takes an At_Syntax& cx argument. Which affects upstream APIs.
   How is it used? What are the actual requirements?
    * syntax_ of Call_Expr: it's a call site, needs to be passed as argument.
    * syntax_ of Constant '[i]'. This should be provided by the caller,
      explaining what the index is, or where it was computed.
    * cx argument of Reactive_Expression constructor. It's used to throw an
      exception if Operation arg isn't 'pure', but that's an internal compiler
      error. Maybe we don't need this: call 'die' instead?
 * The List_Pattern::exec() call to list_elem():
    * The result call_site:
    * The index call_site:
    * I think these are both satisfied by the syntax_ of the List_Pattern
      element being matched. So, list_elem(val,i,const Phrase& syntax).
   List_Pattern::exec() has an 'argcx' argument that describes the argument
   value to be decomposed as a list. Does this context have any relevance to
   the information we must pass to list_elem()? If an error is reported later,
   when the result of list_elem() is used as an argument, what information
   should that error/stack trace contain?
 * At_Index does not return an At_Syntax, affecting List_Pattern::exec().
A Reactive_Expression contains an Operation which has a syntax_ field.
 * The syntax_ is the call site from which the Operation was invoked: either
   a location in Curv source code (the analytic case), or a description of the
   call site in C++ native code (the synthetic case).
 * For an expression, the syntax_ shows where the value was computed, and the
   context in which it was being used. What if these are different? The value
   is computed, stored in a variable/data structure, then used in an argument
   context that throws an error? The site where the argument is computed is
   valuable information: nice if we can show that in error messages.
 * The purpose of syntax_ is to be included in a stack trace, so we can see
   where an error occurred. The only proper use is syntax_.location(), when
   a Phrase inside a Context is converted to a stack trace.
 * Due to the way that Reactive_Expressions are constructed, each Operation
   in the expression tree may have a call site that is disjoint from its parent
   or its children. (This doesn't happen in the analytic case.)
 * Therefore, we shouldn't make too many assumptions about syntax_ objects.
   We shouldn't assume they were constructed analytically.


At present, Reactive_Value::expr(ph) requires a Phrase argument. Hence we need
a Phrase during general expression evaluation. Ideas:
 1. In Pattern::exec(Value*,Value,Context&cx,Frame&), change
    'Context&cx' to 'At_Syntax&cx' so I can use cx.syntax(). Code impact:
    Initially it requires At_Index and At_Field to be derived from At_Syntax.
 2. In Pattern::exec, add 'const Phrase& valph' argument.
The underlying problem is that a Uniform_Variable value requires a Phrase for
conversion to a Constant each time it is referenced in an arithmetic expression.
 * When will this Phrase be used? What is the best choice of Phrase?
I think the Phrase could be used if an arithmetic expression fails to compile
in the Shape Compiler, in which case the Phrase points to the bad operand.
But this shouldn't happen, we do type checking right now when we construct
a reactive expression. It seems like the Phrase won't be used.
 3. Store the parameter name Identifier phrase in the Uniform_Variable when it
    is constructed. Looks practical, changes are local.

Operations on abstract list values (Lists and Reactive_Values).
    bool is_list(val) -- already called islist(val) in math.h
    unsigned list_count(val)
    Value list_elem(val, unsigned i, const Context& cx)
    Value list_elem_unsafe(val, unsigned i)
No virtual functions (for cache locality) in the fast case of a List.
This should be faster than virtual functions in Ref_Value.

list_elem(val,i) may construct an Operation, if the list is reactive.
What syntax object(s) do I use? The syntax_ member of an Operation denotes the
call site for that operation, either in Curv source code, or in C++ native code.
    Consider this API: list_elem(val,i,const At_Syntax& cx)
    where 'cx' is the call site for the 'val[i]' expression.
    If val is a reactive list, then we need to synthesize a call site
    for the index 'i' as well.

Old answer:
    Synthetic operation nodes are generated by Curv primitives written in C++.
    Their syntax object encodes the name of this primitive. `Synthetic_Phrase`
    is a subclass of Phrase: so you can test if a Meaning is synthetic.
Why is this okay?
    In a reactive value, the source location of each node can potentially be
    different and disconnected from the locations of the parent and children.
Who will access these synthetic phrases? Is this just a placeholder to avoid
storing a null pointer, or will it be used?
What about errors and stack traces?
    Using the `time` global reactive variable, you can evaluate a reactive value
    in the interpreter, substituting a time value. Even though the reactive
    operation tree is type checked, run time errors can still occur.
    Eg, 0/0 throws an error. A reactive value could contain the subexpression
    `time/0`, or `(time-1)/0`. What does the error and stack trace look like?
        ERROR: 0 / 0: domain error
        at reactive value:
        1| (time-1)/0
        at file "foo":
        42| ...<some expression yielding a reactive value>...
    With the above design, reactive values don't need source locations.
But synthetic phrases might still be useful in the debugger?
    Perhaps Value::list_elem and List_Pattern::match are native primitives
    that should each have their own Frame? Or, their own VM opcode?
Who will call Value::list_elem(), and what does the op tree look like?
    List_Pattern::exec(). The argument A being matched is a reactive list, and
    we have an At_Syntax for the argument expression. The pattern is `[a,b]`,
    so `a` is bound to `A[0]`. What is the syntax object for `A[0]`?
    What is the syntax object for `[0]` and `0`?
The syntax_ member of an Operation specifies where the Operation is being
called from. If Value::list_elem is a primitive Operation, called from
List_Pattern::match, then the former Op needs a syntax_ describing the call
site within the latter. Therefore, Value::list_elem(i) needs an additional
argument that describes the caller, from which a Phrase can be derived.
I figure this additional argument has type At_Syntax or Frame.


Value::list_elem(i) may construct an Operation, if the list is reactive.
What syntax object do I use?
 1. Synthetic operation nodes encode the name of the C++ function that
    generates them in the Phrase object. `Synthetic_Phrase` is a subclass
    of Phrase: so you can test if a Meaning is synthetic.
        static auto origin = make<Synthetic_Phrase>(__func__);
        make<Some_Expr>(origin, ...)
 2. API is list_elem(unsigned, At_Syntax).
 3. Copy the syntax from the reactive list.
In what circumstances is a reactive value's syntax object used?
 * In the design for the `time` global reactive variable, you can evaluate a
   reactive value in the interpreter, substituting a time value. Even though
   the reactive operation tree is type checked, run time errors can still occur.
   Eg, 0/0 throws an error. A reactive value could contain the subexpression
   `time/0`, or `(time-1)/0`. What does the error and stack trace look like?
        ERROR: 0 / 0: domain error
        at reactive value:
        1| (time-1)/0
        at file "foo":
        42| ...<some expression yielding a reactive value>...
   With the above design, reactive values don't need source locations.
 * In a reactive value, the source location of each node can potentially be
   different and disconnected from the locations of the parent and children.
   Some of the nodes are synthetic. For these, we could encode the name of the
   C++ function (__func__) that generates them, in the Phrase object.
 * Who will call Value::list_elem(), and what At_Syntax info is available?
   * List_Pattern::exec(). The argument A being matched is a reactive list, and
     we have an At_Syntax for the argument expression. The pattern is `[a,b]`,
     so `a` is bound to `A[0]`. What is the syntax object for `A[0]`?
     What is the syntax object for `[0]` and `0`?

 * Support reactive values in Binary_Array_Op using Infix_Op_Expr.
   * This will require defining Add_Expr = Infix_Op_Expr<Add_Op>.
     Same class is used everywhere, so that + expressions hash consistently.
   * So now, Binary_Array_Op::reactive_op hard codes Infix_Op_Expr<Add_Op>
     as the expression form of the binary add operation.
 * Replace add(a,b,cx) with Add_Op::op(a,b,cx).
 * Replace Add_Expr with Infix_Op_Expr<Add_Op>

Add Operation::print(), for printing function and reactive values.

new-core Prim API:
  * It separates 'analysis' (type inference and optimization) from emitting
    GLSL/C++ code.
  * The analysis code can be automated. Eg, Binary_Num_Prim provides generic
    analysis code, so Add_Prim can leave it out. What remains is sc_emit().
  * sc_emit() outputs an expression, not a statement.
    Do this later, once we are building the IR tree.
  * The result type is needed in type inference and in code generation.
    It is part of the Prim superclass (eg, Binary_Num_Prim).
  * The old Prim API has `make_expr()`, which encodes the Operation class of
    an operator like `+` (aka Add_Expr). This shouldn't be needed.
      * It is used by Binary_Array_Op::op and Unary_Array_Op::op to generate
        reactive values.
      * From this context, given a Prim, we should be able to construct
        a unary or binary expression class. Eg, Binary_Op_Expr<Op>.

vectorized 'equal', 'unequal'
 * support broadcasting in SubCurv: scalar->vector, bool->bool32, vec->mat

SubCurv:
* Add matrix support to `dot`
* transpose
* a[i] if a is bool32 or matrix

SubCurv tests for dyadic primitives:
  op[a,b] -- list literal
  op A -- two element array
  op M -- mat2
  op V -- vec2

SubCurv tests for the following:
    `bit`: support bool vectors
    `and`, `or`: bool vectors work now (fix bad codegen)
    `!`: support bool and bool32 vectors
    Constructing SC typed values from Curv const values:
    * matrixes are now constructed
    * general boolean arrays are now constructed
    vectorized relations
    select

internals, maybe:
    SC_Type::Array(base, d1, d2)?
    rename Vec(n) -> Num_Vec(n) or -> Num_Or_Vec(n)

document the changes to SubCurv.

synonyms for struc:
* A 'struc' is a first class value in SubCurv: it can be passed as an argument
  to a function, returned as a result, stored in a variable, compared for
  equality. A struc is a scalar (a number or boolean), or it is a small array
  of scalars. Strucs must be small for efficiency reasons: because they have to
  fit in GPU register memory, and because they have copy semantics; there is
  no support for dynamic memory allocation or general pointers in SubCurv.
* Other names for 'struc':
  * element
  * base value (base type)
  * small value (small type)
  * local value (large arrays are stored in global memory and are accessed
    by reference, pulling parts of the array into the local processor cache).
Names that use 'struc' or refer to it:
    is_struc()
    is_num_struc()
    is_bool_struc()
    sc_struc_unify()
    sc_eval_bool_struc()
    sc_struc_unify()
    sc_convert_scalar_to_struc()
    SC_Type::Base_Type

Generalized Recursive Functions
===============================
TODO
----
* Every data definition has a thunk. Nonlocal refs in the definiens
  compile into nonlocal refs to the thunk nonlocals dict. (No semantic change)
  * Definiens_Scope builds the nonlocals dictionary.
  * Data_Definition::make_setter now sets up for thunk evaluation.

Theory
------
A recursive data definition (`f = expr` where expr is not a lambda)
defines a recursive function 'f', or a non-recursive data structure containing
recursive functions (eg, a callable record).

Recursive references must be contained within lambda expressions,
or an error is reported, so that we can report an error on `x = x + 1`.

Recursive references are not supported in definitions like `pat = expr`
where `pat` is not an identifier.

When we compile the `expr` in `f = expr`,
 0. If the nub of `expr` contains no lambda expressions, it is a "data
    definition", otherwise it is a "function definition". We need to build
    a nonlocals dictionary for the latter. All of the nonlocal references in
    `expr` are placed in this nonlocals dictionary. All top level lambdas in
    the nub of a "function definition" share the same nonlocals dictionary,
    which is also used by a thunk that we may need to build for `expr`.
 1. Any recursive reference (eg, to `f`) outside of a lambda is an error:
    "illegal recursive reference".
 2. Recursive references are permitted inside lambda expressions.
    Each top-level lambda within `expr` is marked as having shared-nonlocals.
    Initially, each definition belongs to its own recursion group.
    Tarjan's SCC algorithm unifies mutually recursive groups.
    After unification, each recursion group has a nonlocals dictionary that
    contains the union of the nonlocal references of each definition
    in the group.

Requires changes to Recursive_Scope::analyse_unit(unit, id).

If a data definition definiens contains no lambda expressions, it is
compiled normally. If it contains lambdas, then all nonlocal references,
inside and outside of lambdas, are collected in a single nonlocals dictionary
that is shared with all members of the recursion group.

How are shared nonlocals dictionaries created now?
* every Unit has `Symbol_Map<Shared<Operation>> nonlocals_`
* make_function_setter() combines the nonlocals_ of a set of Units into the
  shared dict for the recursion group.

New design. Create a nonlocals dictionary for every data definition.
 1. One pass. Every data definition has a thunk. Nonlocal refs in the definiens
    compile into nonlocal refs to the thunk nonlocals dict.
 2. Two pass. Optimize the output of the first pass for more efficient nonlocal
    references.

How do we mark a lambda as using a shared nonlocals dictionary?
 * Perhaps Lambda_Phrase::analyse(env) queries the environment to see if it
   is embedded in the definiens of a simple data definition (simple means
   the pattern is an identifier).
 * The flag is called `bool Environ::lambda_inherits_shared_nonlocals_`.
 * By default, it is false for a root environment, or is inherited from the
   parent environment.
 * Definiens_Scope sets it to true.
 * Lambda_Scope sets it to false.

How does Recursive_Scope::analyse_unit know if an identifier is an illegal
recursive reference (is this inside or outside a lambda)?
 * Perhaps a bool argument passed to analyse_unit makes this distinction.
 * How is the `recursion_ok` argument value computed?
   unit is function definition
   || (unit is simple data def && reference is inside lambda)
 * How do we know the reference is inside a lambda?
   * Env::lookup is passed a bool argument `is_nonlocal`.

------------------------------------------------------------------------------
Run time representation of a set of recursive definitions.
 * There is a set of binding slots, one for each variable.
   These are initialized one recursion group at a time, in dependency order.
 * Within a recursive nonlocals dictionary, a recursive reference to a binding B
   within the same definition set has a special representation.
    * The general representation is a Thunk_Lambda. The definiens for B is
      compiled into a thunk. A Thunk_Lambda is a thunk without nonlocals.
      Note, the thunk uses the closure's nonlocals object for its nonlocals.
    * As an optimization, in the case where the definiens for B is a lambda,
      we store a Lambda object (a closure without the nonlocals).

During the evaluation of 'expr', the function 'f' must not be called.
 * We guarantee there will be no attempt to fetch the value of frame slot 'f'
   because references outside of lambdas have already generated compile errors.
 * Within a lambda, a reference to 'f' is actually a reference to the closure's
   nonlocals object at f. This is a ThunkLambda. This is converted to a value
   by evaluating the thunk. But when evaluating the definiens, we expect to
   construct the closure (that references f) but we don't want to call the
   resulting closure.
This is only enforced during the first evaluation of 'expr', when we obtain
the initial value for the frame slot 'f'.
 * There is a single ThunkLambda object shared by all closures that have
   captured a nonlocal reference to 'f'.
 * Prior to the first evaluation of 'expr', we 'poison' the ThunkLambdas for
   all of the bindings in the recursion group. The ThunkLambdas can be captured
   by closures but an error is reported if they are evaluated.
 * After 'expr' is evaluated, we unpoison the ThunkLambdas.

With this scheme, in `pat = expr`, `pat` can be 'identifier'
or 'identifier :: predicate'. A further generalization to support arbitrary
patterns could work by prefixing 'let pat = expr in' to each closure body
that references any of those variables, then optimizing from there.

Optimization:
 * Instead of storing ThunkLambda and Lambda in the nonlocals dictionary
   and referencing them using Symbol_Ref (these are compile time constants),
   use special opcodes Nonlocal_Thunk and Nonlocal_Lambda, which contain the
   ThunkLambda or the Lambda. Then perform optimizations over these opcodes.

### Alternative A0
When we compile the `expr` in `f = expr`,
 1. Any reference to `f` outside of a lambda is an error:
    "illegal recursive reference".
 2. Any reference to `f` inside a lambda causes that lambda to use the shared
    nonlocals object NL that belongs to f's recursion group. Such a lambda is
    called a 'recursive lambda', and is marked as such.

If `expr` contains recursive lambdas, then we compile `expr` into a thunk.
All of the nonlocals in `expr` are added to NL.
During thunk evaluation, the thunk frame's nonlocals_ is set to NL.
When a recursive lambda is evaluated into a closure, it uses this NL as the
nonlocals_ field of the closure.

### Alternative T
A function closure (value) contains a 'nonlocals' data structure, which contains
the values of all non-local bindings captured by the closure. In the case of
a recursive function 'f', the nonlocals structure should logically contain the
value of 'f'. However, that creates a cyclic data structure, which breaks
reference counting (it causes a storage leak).

To break the cycle, we use a special representation for recursive nonlocal
bindings. Instead of storing the full closure value for 'f' within its own
nonlocals structure, we just store a Lambda object, which consists of everything
that a closure has, minus the nonlocals. Then we combine the Lambda with f's
nonlocals structure (which is already in hand) when we need to reconstruct f's
value from its nonlocals entry.

In the case of a general recursive function definition ('f = expr' where 'expr'
is not recognized as a special case (ie, as a lambda expression), then 'expr'
can potentially evaluate to any kind of function value, not just a closure.
It could also evaluate to a Piecewise_Function, or a module with a 'call' field.
So we need a more general representation for recursive value references
within the nonlocals structure.

The following solution using thunks is quite general. `f` can be a function,
or a callable record, or a more general data structure containing functions.

Recursive references must be contained within lambda expressions, or an
error is reported, so that we can report an error on `x = x + 1`.

Ensuring that recursive references are wrapped in lambda expressions is not
enough to be able to report errors on all illegal recursive forms.
Here's an infinite loop:
    f = (()->f)();
Here's a loop that will exhaust memory building an infinite data structure:
    f = [(()->f)()];
(NB: Lazy infinite data structures are out of scope for this investigation.)
A requirement I wrote above:
 * During the evaluation of 'expr', the function 'f' must not be called.
   If it is called, then an error is reported at the site where 'f' is called
   (illegal recursive reference to 'f').
It's simple. `f = expr` is implemented by converting `expr` to a thunk.
Normally we expect to evaluate the thunk and get back a function, or callable
record. Or a more general data structure containing functions.
If the thunk invokes itself recursively at runtime, we report an error.

Here's an earlier description of this approach:
  If a recursive definiens isn't a lambda expression, then it is made into 
  a call-by-name thunk that is evaluated on every reference from inside the 
  recursion group. From outside the group, it's a proper value in a slot. 

A Thunk is a kind of parameterless function. A Thunk object has:
    Shared<const Operation> body_;
    Shared<const Module> nonlocals_;
    unsigned nslots_;
    bool evaluating_ = false;
A Thunk_Lambda is missing the nonlocals:
    Shared<const Operation> body_;
    unsigned nslots_;

Implementation of 'f = expr':

  When we compile recursive data definition 'f = expr', we compile 'expr' as a
  ThunkLambda TL. All of the nonlocal references within 'expr', including 'f'
  itself, will be included in NL, the nonlocals object for f's recursion group.

  At runtime, when we initialize the bindings in f's recursion group:
   * We set NL.f to the ThunkLambda TL. Can't store a Thunk because that's
     a reference cycle through NL.
   * We set f's frame slot to the result F of evaluating the thunk.
     The thunk is evaluated by creating a thunk_frame whose nonlocals is NL,
     and calling thunk.body->eval(thunk_frame) yielding F.
     No cycle: F will reference NL, but NL won't reference F.

  During that initial thunk evaluation,
   * If we reference a nonlocal containing a ThunkLambda, outside the context
     of capturing a nonlocal while building a closure (see below), then that
     is an error: "illegal recursive reference". This handles the case of
     a recursive reference to 'f' within 'expr' that is not wrapped in a lambda.
   * While constructing a closure, if we capture a non-local variable reference
     that contains a ThunkLambda, then we construct a Thunk from the ThunkLambda
     and the Frame::nonlocals. We store that Thunk in the closure's nonlocals.
     This handles the case of a recursive reference to 'f' within 'expr' that
     is wrapped in a lambda.
   * While evaluating a closure call, if the closure body fetches a nonlocal X
     that contains a Thunk T, then we evaluate the Thunk as follows:
      * If T.evaluating is true, then throw an error:
        "illegal recursive reference".
      * Otherwise, set T.evaluating = true;
      * Construct a thunk_frame for evaluating the Thunk T, whose size
        is T.nslots and whose nonlocals is T.nonlocals.
      * Evaluate the thunk's body in thunk_frame and get the resulting value:
        T.body.eval(thunk_frame)
      * Reset T.evaluating_ back to false.

This implementation could be optimized, but it's a nontrivial subject.
  * As a performance optimization, should we store the thunk result back in
    the closure's nonlocals? I don't think this causes a reference loop.
    I think it causes memory bloat.

---
   * When we capture a non-local variable reference to f (when constructing a
     closure), we construct a thunk from the thunklambda, and store the thunk.
     * The thunk will additionally contain a reference to NL, but that doesn't
       introduce a cycle, because NL will not refer to the closure.
     * Suppose that, instead of storing the thunk, we instead evaluated the
       thunk and directly stored the resulting value in the closure. That
       could create an infinite loop, building an infinite data structure.
           f=[(()->f)()];
     * Can we store the result of evaluating the thunk in the closure?
       Can it create a cycle? Can it create an infinite data structure?
     * Can we lazily replace the thunk with its value on first reference,
       or will that create a cycle?
   * While executing a thunk, when we reference a nonlocal that contains a
     ThunkLambda (which is different from capturing a nonlocal, see above),
     then we report an error: "illegal recursive reference".
   * When a nonlocal slot NL.s contains a Thunk, we convert it to a value:
     * We set NL.s.evaluating_ = true. If a Thunk is referenced when evaluating_
       == true, we throw an error: "illegal recursive reference".
     * We construct a frame for evaluating the Thunk T, whose size is T.nslots,
       and whose nonlocals is NL.
     * We evaluate the thunk's body in the frame and get the resulting value.
     * We reset NL.s.evaluating_ back to false.

Implementation of 'f = expr':
 * When we compile recursive data definition 'f = expr', we compile 'expr' as a
   ThunkLambda TL. Recursive references to 'f' are an error unless nested in a
   lambda expr. All of the nonlocal references within 'expr', including 'f'
   itself, will be included in NL, the nonlocals object for f's recursion group.
 * At runtime, when we initialize the bindings in f's recursion group:
   * We set NL.f to the ThunkLambda TL. Can't store a Thunk because that's
     a reference cycle through NL.
   * When we capture a non-local variable reference to f (when constructing a
     closure), we construct a thunk from the thunklambda, and store the thunk.
     * The thunk will additionally contain a reference to NL, but that doesn't
       introduce a cycle, because NL will not refer to the closure.
     * Suppose that, instead of storing the thunk, we instead evaluated the
       thunk and directly stored the resulting value in the closure. That
       could create an infinite loop, building an infinite data structure.
           f=[(()->f)()];
     * Can we store the result of evaluating the thunk in the closure?
       Can it create a cycle? Can it create an infinite data structure?
     * Can we lazily replace the thunk with its value on first reference,
       or will that create a cycle?
   * When a nonlocal slot NL.s contains a Thunk, we convert it to a value:
     * We set NL.s.evaluating_ = true. If a Thunk is referenced when evaluating_
       == true, we throw an error: "illegal recursive reference".
     * We construct a frame for evaluating the Thunk T, whose size is T.nslots,
       and whose nonlocals is NL.
     * We evaluate the thunk's body in the frame and get the resulting value.
     * We reset NL.s.evaluating_ back to false.
   * We set f's frame slot to the result R of evaluating the thunk T.

### Implementation of 'f = expr':
 * When we compile 'f = expr', we compile 'expr' as if it were the body
   of 'x -> expr x', yielding an operation tree E. This means that all nonlocal
   references within 'expr', including 'f' itself, will be included in NL,
   the nonlocals object for f's recursion group.
 * At runtime, when we initialize the bindings in f's recursion group:
   * Phase 1, initialize NL. We set NL.f to a magic value that throws an error
     on reference: "illegal recursive reference" at the reference to 'f'.
   * Phase 2, evaluate 'expr' using a Frame whose nonlocals object is NL.
     The result C must be a callable value, or we report an error.
     A definition like 'x = x' will report an error at this point.
     Without this evaluation step, 'x = x' would turn into an infinite loop.
     Store C in a temporary variable Ctemp.
   * Report an error if C is not a function. C cannot be a record with a
     `call` field, because phase 3 won't expose the extra record fields.
     * Okay, but what remedial action should the user take to fix the error?
       Suppose a library combinator starts returning a record callable,
       thereby breaking existing code?
   * Note that C cannot be stored in NL.f, because that will create a cyclic
     data graph, which breaks reference counting. Phase 3 fixes that.
   * Phase 3. Set f's frame slot to Ctemp. Set NL.f to a lambda object
     that contains the operation tree E and is equivalent to 'x -> expr x'.
     This means we re-evaluate expr on each recursive call to f, which is
     heavier than a recursive function in a garbage collected language.
     I don't see a way to use the value of C to initialize NL.f.




Implementation of 'f = expr':
 * Within the nonlocals object NL, the slot for 'f' is initialized to a thunk
   that reports an error if it is called.
 * 'expr' is evaluated. If the evaluation succeeds without an error,
   yielding a value C, then an error is reported if C is not a function.
   If C is a function, then we expect that the value of 'f' has been captured
   by one or more closures contained somewhere within C. However, all of
   those closures share the same nonlocals object NL, which we have at hand.
 * If `NL.f` is set to the value C, then we have a cyclic data graph,
   which breaks reference counting. So we have to break that cycle.
 * Let's require the value C to be a Closure. This closure consists of
   two parts: a Lambda plus a Nonlocals object (C.lambda and C.nonlocals).
   * We ignore the case where C is a general callable value, like a record
     with a 'call' member, or a non-closure function like a Piecewise_Function.
 * In the standard implementation of recursive functions, we store a Lambda
   in NL.f, and when 'f' is referenced, we reconstruct the closure by
   combining the lambda NL.f with the nonlocals NL. That won't work here,
   since we normally expect C.nonlocals != NL.
 * What does work is the standard workaround for this design flaw.
   Instead of writing `f = expr`, write `f = x -> expr x`.
   So let's duplicate that logic.
 * It is not good enough to simply rewrite a recursive data definition
   'f = expr` to `f = x -> expr x` because it fails to do the error checking
   done by the first few steps. Eg, `x = x` would be equivalent to `x a = x a`
   and would be an infinite loop rather than an error.
 * When we compile 'f = expr', let's compile 'expr' as if it were the body
   of 'x -> expr x'. This means that all nonlocal references within 'expr'
   will be included in NL (including 'f' itself).
 * Then, we evaluate 'expr' using a special Frame whose nonlocals object
   is NL. Before evaluation, we set NL.f to a magic value that fails on
   reference. After evaluation, we check the result C is a function.
 * Then we set NL.f to the Lambda of 'x -> expr x', substituting in the
   Operation tree for expr.

------
This is a generalization of special case handling for recursive 'match'
definitions. If we build the necessary machinery, we don't need to put a
lot of special case code into the compilation of 'match' calls.

is compiled into `f x = x >> expr`.
Note this aborts at runtime if expr does not return a function.

But this means
    x = x
compiles to
    x a = x a
which is wrong. Either the definition is a compile time error, or 'x'
is a thunk that runs in an infinite loop.

Maybe there is a restricted subset of definitions for which that design
will work.

Thunkification
--------------
Recursive data definitions should be compiled into thunks.
All the definitions in a mutual recursion group compile into
* a slot containing a shared nonlocals module
* 
