Syntax for applying a lens to a value:
    value@lens
with postfix precedence.

Initial support for:
  list@nat
  record@symbol
  collection@lens_list

`id` is the identity lens (see also: 'Function' issue).

Full proposal (future design):
  list index    a[i]      a@i
  swizzle       a[[X,Y]]  a@[X,Y]
  array slice   a[i,j]    a@(slice[i,j])
  record index  r.foo     r@#foo
  dict index    d key     d@(index key)
Each of these common operations has two syntaxes: a "conventional" form that
is easy and close to standard notation, and a "general" form using lenses
and the @ operator. The "convention form" syntax has the added property that
sparse multi-D arrays, implemented using dictionaries of index tuples, have
the same indexing syntax as dense multi-D arrays: a[i,j] in both cases.
This allows for some generic programming.

The syntax `record."foo"` is deprecated.

Consider:
    A[I]
    A@I
If A is a list and I is a lens, and A@I is legal, then A[I] is also legal.
Because I'm sharing code, and A X is defined as A@(slice X) when A is a list.
So that means, A[max] is max(A), and so on.

What do error messages look like? How are they generated by my new code base?
The same lens code can be invoked from A[I] and A@I syntax.

How are type errors reported? Type of the lens doesn't match type of the target.
    ERROR: Lens of type integer doesn't match target (expecting a list)
    Target: aasldkasd
    Lens: 42
    1| x@y
       ^^^
