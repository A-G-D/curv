Pipeline Lambda
---------------
___ >> x -> ___

Two design options:
 1) All right-associative infix operators have the same precedence, including
    pattern operators. Lambda parameters with infix operators must be
    parenthesized. This means:
     * More parens in match expressions. (But maybe switch will replace match?)
     * Consistency with parameters in 'f x y = ...' function definitions,
       and with arguments in function calls.
     * Possible support for multiparameter 'x y -> ...' lambda expressions.
 2) Infix pattern operators bind tighter than right associative infix function
    operators. This preserves the syntax of match expressions.
    The argument of 'when' needs to be parenthesized if it contains a pipeline
    operator, so parens can still occur.

### Pipeline Lambda Syntax #2
I don't want to require the left argument of -> to be a primary or postfix,
because I don't want to parenthesize pattern infix operators in match
expressions.

But, this alternative is more complicated.

So the infix pattern operators have higher precedence than pipeline operators.
These are :: <: when & |
* '::' is no longer a pipeline operator. Use 'require' instead.
* The argument of 'when' needs to be parenthesized if it contains a
  pipeline operator.

pipeline ::= pattern
  | pattern -> item
  | pipeline pipeop pattern
  | pipeline pipeop pattern -> item

pattern ::= prefix
  | pattern :: prefix
  | pattern <: prefix
  | pattern when prefix
  | pattern & prefix
  | pattern | prefix

prefix ::= postfix
  | - prefix
  | + prefix
  | backtickop prefix

Note. It would also be possible to use this grammar:
  item ::= pattern -> item
  pipeline ::= pipeline pipeop pattern -> pipeline
