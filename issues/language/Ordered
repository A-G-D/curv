Symbols are lexicographically ordered. #a < #b is true.
Characters are ordered by code point.

Rationale:
 * Symbol ordering defines the iteration ordering of a record,
   the order of keys returned by `fields`, and the order of items when
   a record is printed.
 * Symbols are used in the cases where strings are used in other languages,
   when you assign meaning to specific symbols, and want to compare symbol
   values. In those other languages, strings are also ordered lexicographically.

A relational operator < <= > >= now accepts two numbers, symbols or chars.
(but not mixed types, that is an error)

max and min now accept a nonempty list of symbols, numbers or chars.
max[#a,#b] => #b
max "max" == #"x"
max[] and min[] are now errors.

sort[#b,#c,#a] => [#a,#b,#c]
sort "max" => "amx"

Notes
-----
What does max[] return? It no longer makes sense, because:
 * There is a minimum and maximum number.
 * There is a minimum and maximum character.
 * There is a minimum symbol, but no maximum symbol.
 * But we don't know which of the 3 ordered types for max[] to return.

Options:
 * Num.max[] == -inf, Char.max[] == Char 1, Symbol.max[] == ''
   Pass Num, Char or Symbol as an explicit argument in contexts where you
   need the full algebra (SML style module programming).

 * Generic functions may need access to the algebra T of an ordered value
   (one of Num, Char, Symbol).
    * In some cases, this could be derived from an ordered value argument.
      How do generic functions derive T from an argument?
      How does the built-in '>' function derive T from an argument?
       * Use an overloaded function, which could be part of the 'Ordered'
         theory. Eg, Ordered.algebra(42) == Num.
       * Some dynamic languages have a general 'typeof' or 'classof' operation,
         but that's too centralized. Instead of putting everything into an
         object's unique "class", we allow the same value to be part
         of multiple algebras.
    * In other cases, there is no ordered value available, and the need is
      to query an identity element such as T.max[] or T.min[].
       * T could be passed as an explicit argument.
       * T could be passed implicitly, being inferred from the argument list
         or from the wider context using type inference, as in Haskell.

 * Generic max[] is an error, max with 2 or more args requires all args to have
   the same ordered type.
 * For backwards compatibility, max = Num.max.
   As in K, max[]==-inf and max only works on numbers, even though `<` etc
   work on ordered types. Problem: algebra of programs.

 * Array values carry around their base type, even empty arrays, at the cost
   of a more complex and restrictive type system.
    * A statically type language has unityped lists and a separate tuple type.
    * APL has typed arrays: the scalar type affects semantics of operations.
    * In the type proposal, I plan to support optionally typed arrays,
      in the sense that a value can be restricted to a representation type
      for efficiency reasons. But the value itself doesn't change. The
      semantics of the value should not change, only the performance.
   The cost of this extra complexity is disproportionate to
   the benefit of supporting max[] and min[] (which is minimal).
   In mathematics, max and min of real numbers do not have identity elements,
   so it is okay if they don't have identity elements in Curv either.
