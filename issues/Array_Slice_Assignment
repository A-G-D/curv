Array slice assignment `a[i,j] := x` works in all cases.
 * Assignment to a string variable. Single element or slice, interpreter only.
 * Assignment to a list variable in interpreter.
 * Assignment to a list variable in SubCurv.

Reactive values are not supported in this work item. Do that later.

Implementation
--------------
How to construct a reactive vec2 from a reactive num (unit testing):
  let v=if (time==time) [time,time] else [0,0] in v

Analyse a postfix phrase as a Locative, regardless of context?
That will require a lot of refactoring. Not worthwhile.
As today, only analyse a phrase as a Locative on the left side of ':='.

old:
  void Assignment_Action::exec(Frame& f, Executor&) const
    { locative_->store(f, *expr_); }
  Locative -- it's an AST with the arrows pointing down toward the leaves
  Local_Locative    // local variable
  Dot_Locative      // x.s
  Indexed_Locative  // x i
new:
  Need a path that can be traversed from the leaf out to the top level and
  contains the index values. The old Locative AST is backwards.
   * Linked list of Dot_Index, Bang_Index and Call_Index, both contain index
     value and next. Construct linked list while traversing Locative tree.
     Dot_Index contains Symbol_Ref, Bang_Index and Call_Index contain Value.
     Path iterator contains Index ptr, Index type, position in Call_Index path
     if the Call_Index is indexing a list, rather than a dict.
      * There is a design alternative where S I := X is not legal when S is a
        Dict, and you must use S!I := X instead. In that case Call_Index
        contains a Shared<const List>.
  This design is tightly linked to the (somewhat arbitrary) indexing syntax
  I chose. That's okay for a purely internal API. However, there is also a
  proposal for a Curv API for traversing a data structure using a path. How
  are the two related and do they share code? A simple path-based Curv API
  would just use a list of index values, without partitioning the list into
  call/dot/bang segments and type-checking each segment.
new:
  A Lens takes a structure and: returns a substructure (get); or: sets that
  substructure to a specified value (put). We can convert _[i,j] and _.foo
  locatives into lenses.

Assignment to an Array Slice
----------------------------
(It would be more accurate to call this "tree slicing", since this works on
jagged, non-rectangular arrays.)

A primary goal is to support GLSL swizzle semantics. In SubCurv,
   A[[X,X,Y]] is a legal rvalue. Note, duplicate indices.
   A[[Z,X]] is a legal rvalue. Note, non-contiguous slice, indices are not
   required to be in ascending order.
Vector slices are also assignable. For a constant index vector, duplicate
index values are not allowed. For a runtime index vector, duplicate index
values can't be excluded, so updates are processed left to right, and the
last assignment wins.

In Python, a list slice that denotes a contiguous subsequence, with indices in
ascending order, can be replaced by a new sublist with a different length.
If the index value (range) is not contiguous or not ascending, this is an error.
In SubCurv, you can't change the size of an array at runtime, and we report this
at compile time. We don't support this in Curv, it's not an important use case.
It's an error in K.

We will use K assignment semantics. It's a generalization of the semantics we
need for GLSL, and it works on arbitrary trees.
 * An index tree can contain multiple instances of the same index number.
   We update indexed locations depth first, left to right, and the last update
   wins.
 * You can't change the shape of a tree (in the sense of Python).

In `A[Ix] := B`,
  Ix is an index value: a tree of Nats, where each Nat < count A.
  We traverse `Ix` depth first, left to right, and for each Nat `i` in Ix,
  we update A!i with the corresponding element of B, which has the same shape
  as Ix.

`A x .y z := B` is internally equivalent to
   A := A >> update [x, #y, z] B
so I need to define how ternary update works. I think the full path after A
needs to be a data structure traversed at runtime. For the purposes of this
internal primitive, I think it makes sense to flatten the path into
   x ++ [#y] ++ z
The path is a list of index values.

update [] B A => B
For a non-empty path whose head is index value Ix and whose tail is P,
  If A is a list, Ix is a Nat or a tree of Nats.
  If A is a record, Ix is a Symbol or a tree of Symbols.
  Traverse `Ix` depth first, left to right, and for each scalar `i` in Ix,
    Select E, the corresponding element of B, which has the same shape as Ix.
    Update A!i with: update P E (A!i)
  Return the updated value of A.
