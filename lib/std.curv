// Copyright Doug Moen 2016-2017.
// Distributed under The MIT Licence.
// See accompanying file LICENCE.md or https://opensource.org/licenses/MIT

/* Curv standard library, automatically loaded at startup. */
{

deg = tau/360;
e = 2.71828182845904523536028747135266249775724709369995;
phi = sqrt 5 * .5 + .5;
X = 0;
Y = 1;
Z = 2;
T = 3;
MIN = 0;
MAX = 1;
X_axis = [1,0,0];
Y_axis = [0,1,0];
Z_axis = [0,0,1];

ceil n = -floor(-n);
trunc n = if (n >= 0) floor(n) else ceil(n);
mod(a,m) = a - m * floor(a/m);
rem(a,m) = a - m * trunc(a/m);
mix(a,b,t) = a*(1-t) + b*t;
// Smooth Hermite interpolation between 0 and 1 when lo < x < hi.
// Used to construct a threshold function with a smooth transition.
// Results are undefined if lo >= hi.
// https://en.wikipedia.org/wiki/Smoothstep
smoothstep(lo,hi,x) =
    do var t := clamp((x - lo)/(hi - lo), 0, 1);
    in t*t*(3 - 2*t);
clamp(v,lo,hi) = min(max(v,lo),hi);
isinf x = x == inf || x == -inf;

tan a = sin a / cos a;
atan x = atan2(x,1);
sec a = 1 / sin a;
csc a = 1 / cos a;
cot a = cos a / sin a;

// lists
concat vv = [for (v in vv) for (i in v) i];
reverse v = v[count(v)-1..0 by -1];
map f list = [for (x in list) f x];
filter p list = [for (x in list) if (p x) x];
reduce (zero, f) list =
    if (list == [])
        zero
    else
        do  var r := list[0];
            for (i in 1..<count list)
                r := f(r, list[i]);
        in r;
sum list = reduce(0, (x,y)->x+y) list;
product list = reduce(1, (x,y)->x*y) list;

merge rs = {for (r in rs) ...r};

// complex numbers: [RE,IM]
RE=0;
IM=1;
cmul(z,w) = [z'RE*w'RE - z'IM*w'IM, z'IM*w'RE + z'RE*w'IM];
csqr(z) = [ z[RE]*z[RE] - z[IM]*z[IM], 2*z[RE]*z[IM] ];

////////////////////
// Linear Algebra //
////////////////////
is_vec2 x = is_list x && count x == 2 && is_num(x[0]) && is_num(x[1]);
is_vec3 x = is_list x && count x == 3 && is_num(x[0]) && is_num(x[1]) && is_num(x[2]);
cross(p,q) = [p[Y]*q[Z] - p[Z]*q[Y], p[Z]*q[X] - p[X]*q[Z], p[X]*q[Y] - p[Y]*q[X]];
identity(n) = [for(i in 1..n) [for(j in 1..n) if(i==j) 1 else 0]];
transpose(a) = [for (i in dom(a'0)) [for (j in dom a) a'j'i]];
normalize v = v / mag v;

// phase angle of a vector, range tau/2 to -tau/2
phase v = atan2(v'Y,v'X);

// convert phase angle to unit vector
cis theta = [cos theta, sin theta];

// perp: Rotate a 2D point by 90 degrees CCW. Multiply a complex number by i.
// It's the 2D analog of the 3D vector cross product (Cross in Mathematica).
// dot(perp a, b) is the "perp-dot" product:
// see: 'The Pleasures of "Perp-Dot" Products', Graphics Gems IV.
perp(x,y) = (y, -x);

// angle between two vectors
angle(a,b) = acos(dot(a,b) / (mag a * mag b));

/////////////////////
// CIRCULAR SHAPES //
/////////////////////

circle =
    let circle_e d =
            let r = d / 2;
            in make_shape {
                dist(x,y,z,t) = mag(x,y) - r;
                bbox = [[-r,-r,0],[r,r,0]];
                is_2d = true;
            };
    in make_shape {
        ... circle_e 2,
        map : circle_e,
    };

ellipse(dx,dy) = circle 1 >> scale(dx,dy);

sphere =
    let sphere_e d =
            let r = d / 2;
            in make_shape {
                dist(x,y,z,t) = mag(x,y,z) - r;
                bbox = [[-r,-r,-r],[r,r,r]];
                is_3d = true;
            };
    in make_shape {
        ... sphere_e 2,
        map : sphere_e,
    };

ellipsoid(dx,dy,dz) = sphere 1 >> scale(dx,dy,dz);

cylinder = cylinder_e;
cylinder_m(d,h) = extrude_m h (circle d);
cylinder_e(d,h) = extrude_e h (circle d);

// Cone: +Z is up, origin is in the middle of the base.
// TODO: Provide an interface capable of constructing an infinite sphere.
cone = cone_e;
cone_m(d, height) =
    let radius = d / 2;
    in make_shape {
        dist(x,y,z,t) =
            do  var q := [mag(x,y), z];
                var tip := q - [0, height];
                var mantleDir := normalize(height, radius);
                var mantle := dot(tip, mantleDir);
            in max(mantle, -q[Y]);
        bbox = [[-radius,-radius,0],[radius,radius,height]];
        is_3d = true
    };
// Euclidean distance field.
// Credit: MERCURY (http://mercury.sexy/hg_sdf)
cone_e(d, height) =
    let radius = d / 2;
    in make_shape {
        dist(x,y,z,t) =
            do  var q := [mag(x,y), z];
                var apex := q - [0, height];
                var mantleDir := normalize(height, radius);
                var mantle := dot(apex, mantleDir);
                var d := max(mantle, -q[Y]);
                var projected := dot(apex, [mantleDir[Y], -mantleDir[X]]);

                // distance to apex
                if (q[Y] > height && projected < 0)
                    d := max(d, mag(apex));

                // distance to base ring
                if (q[X] > radius && projected > mag(height, radius))
                    d := max(d, mag(q - [radius, 0]));
            in d;
        bbox = [[-radius,-radius,0],[radius,radius,height]];
        is_3d = true
    };

// credit: Inigo Quilez
capsule(d,a,b) =
    let ba = b - a;
        r = d / 2;
    in make_shape {
        dist p =
            do  var pa := p'[X,Y,Z] - a;
                var h := clamp(dot(pa,ba) / dot(ba,ba), 0, 1);
            in mag(pa - ba*h) - r;
        bbox = [min(a-r,b-r), max(a+r,b+r)];
        is_3d = true;
    };

stroke(d,a,b) =
    let r = d / 2;
        ba = b - a;
    in make_shape {
        dist p =
            do  var pa := p'[X,Y] - a;
                var h := clamp(dot(pa,ba) / dot(ba,ba), 0, 1);
            in mag(pa - ba*h) - r;
        bbox = [[...min(a-r,b-r),0], [...max(a+r,b+r),0]];
        is_2d = true;
    };

// d1: major diameter, from center of tube, through origin, to centre of tube.
// d2: minor diameter, of the tube.
torus (d1,d2) = perimeter_extrude (circle d1) (circle d2);

// from OpenSCAD
revolve shape = perimeter_extrude (circle 0) shape;

// A generalized torus. Sweep a 2D shape around the perimeter of another
// 2D shape.
perimeter_extrude perimeter cross_section =
    make_shape {
        dist(x,y,z,t) = cross_section.dist( perimeter.dist(x,y,0,t), z, 0, t );
        bbox = [
            [ perimeter.bbox[MIN][X] - cross_section.bbox[MAX][X],
              perimeter.bbox[MIN][Y] - cross_section.bbox[MAX][X],
              cross_section.bbox[MIN][Y] ],
            [ perimeter.bbox[MAX][X] + cross_section.bbox[MAX][X],
              perimeter.bbox[MAX][Y] + cross_section.bbox[MAX][X],
              cross_section.bbox[MAX][Y] ],
        ];
        is_3d = true;
    };

///////////////
// POLYTOPES //
///////////////

// Half-space with normal n, at distance d from the origin.
//  n: must be a 3D unit vector.
//  if d >= 0, half-space contains the origin.
half_space(d,n) =
    make_shape {
        dist(x,y,z,t) = dot([x,y,z], n) - d;
        is_3d = true;
    };

// Half-plane with normal n, at distance d from the origin.
//  n: must be a 2D unit vector.
//  if d >= 0, half-plane contains the origin.
half_plane_dn(d,n) =
    make_shape {
        dist(x,y,z,t) = dot([x,y], n) - d;
        bbox = [
            [
                if (n[Y]==0 && n[X]<0) -d else -inf,
                if (n[X]==0 && n[Y]<0) -d else -inf,
                0,
            ],
            [
                if (n[Y]==0 && n[X]>0) d else inf,
                if (n[X]==0 && n[Y]>0) d else inf,
                0,
            ],
        ];
        is_2d = true;
    };

// Half-plane whose boundary passes through two points.
// Right hand rule: palm on p1, fingertips on p2, thumb points to the interior
// of the half-plane.
half_plane_p2(p1, p2) =
    let v = p2 - p1;
    in make_shape {
        dist p = (dot(p'[X,Y], perp v) + dot(perp p1, p2)) / mag v;
        is_2d = true;
    };

// Half-plane whose boundary intersects point a, with normal n (a unit vector).
half_plane_pn(a, n) =
    make_shape {
        dist p = dot(n, a-p'[X,Y]);
        is_2d = true;
    };

square =
    make_shape {
        ... square_e 2,
        map : square_e,
        circumratio : sqrt 2,
    };
square_m d =
    let r = d / 2;
    in make_shape {
        dist(x,y,z,t) = max(abs(x,y) - r);
        bbox = [[-r,-r,0], [r,r,0]];
        is_2d = true;
    };
square_e d = rect_e(d,d);

// rect: an axis aligned rectangle. Argument is a vec2 or a bbox2.
rect = rect_m;
// Mitred distance field.
rect_m b =
    if (is_vec2 b)
        let r = b / 2;
        in make_shape {
            dist(x,y,z,t) = max(abs(x,y) - r);
            bbox = [[-r[X],-r[Y],0],[r[X],r[Y],0]];
            is_2d = true;
        }
    else
        let xmin = b'MIN'X;
            ymin = b'MIN'Y;
            xmax = b'MAX'X;
            ymax = b'MAX'Y;
        in intersection [
            if (xmin > -inf) make_shape {
                dist(x,y,z,t) = xmin - x;
                bbox = [[xmin, -inf, 0], [inf, inf, 0]];
                is_2d = true;
            },
            if (ymin > -inf) make_shape {
                dist(x,y,z,t) = ymin - y;
                bbox = [[-inf, ymin, 0], [inf, inf, 0]];
                is_2d = true;
            },
            if (xmax < inf) make_shape {
                dist(x,y,z,t) = x - xmax;
                bbox = [[-inf, -inf, 0], [xmax, inf, 0]];
                is_2d = true;
            },
            if (ymax < inf) make_shape {
                dist(x,y,z,t) = y - ymax;
                bbox = [[-inf, -inf, 0], [inf, ymax, 0]];
                is_2d = true;
            },
        ];
// Axis aligned rectangle with a Euclidean distance field. Arg is vec2.
rect_e b =
    let assert(is_vec2 b);
        r = b / 2;
    in make_shape {
        dist(x,y,z,t) =
            do var d := abs(x,y) - r;
            in min(max d, 0) + mag(max(d,0));
        bbox = [[-r[X],-r[Y],0],[r[X],r[Y],0]];
        is_2d = true;
    };

rect_at = rect_at_m;
rect_at_m(lo, hi) =
    let xmin = lo'X;
        ymin = lo'Y;
        xmax = hi'X;
        ymax = hi'Y;
    in intersection [
        if (xmin > -inf) make_shape {
            dist(x,y,z,t) = xmin - x;
            bbox = [[xmin, -inf, 0], [inf, inf, 0]];
            is_2d = true;
        },
        if (ymin > -inf) make_shape {
            dist(x,y,z,t) = ymin - y;
            bbox = [[-inf, ymin, 0], [inf, inf, 0]];
            is_2d = true;
        },
        if (xmax < inf) make_shape {
            dist(x,y,z,t) = x - xmax;
            bbox = [[-inf, -inf, 0], [xmax, inf, 0]];
            is_2d = true;
        },
        if (ymax < inf) make_shape {
            dist(x,y,z,t) = y - ymax;
            bbox = [[-inf, -inf, 0], [inf, ymax, 0]];
            is_2d = true;
        },
    ];

// regular_polygon: n is # of sides, d is incircle diameter
regular_polygon n =
    let angle = tau / n;
    in make_shape {
        ... regular_polygon_m n 2,
        map d : regular_polygon_m n d,
        circumratio : 1 / cos(angle/2),
    };
regular_polygon_m n d =
    half_plane_dn(d/2,[1,0]) >> repeat_radial n >> rotate(-tau/4);

// convex polygon: vertices are in counterclockwise order.
convex_polygon = convex_polygon_m;
convex_polygon_m pts =
    intersection(
        for (i in dom pts) half_plane_p2(pts[i], pts[mod(i+1,count pts)]),
        rect(min pts, max pts) // bounding box
    );

// box: an axis aligned cuboid. Argument is a vec3.
box = box_e;
box_m b =
    let assert(is_vec3 b);
        r = b / 2;
    in make_shape {
        dist(x,y,z,t) = max(abs(x,y,z) - r);
        bbox = [-r, r];
        is_3d = true;
    };
box_e b =
    let assert(is_vec3 b);
        r = b / 2;
    in make_shape {
        dist(x,y,z,t) =
            do var d := abs(x,y,z) - r;
            in min(max d, 0) + mag(max(d,0));
        bbox = [-r, r];
        is_3d = true;
    };

box_at = box_at_m;
box_at_m (lo,hi) =
    /* TODO: Won't compile right now. Also, max(inf,x) broken on some GPUs.
    make_shape {
      dist(x,y,z,t) = max(max(b[MIN]-[x,y,z]), max([x,y,z]-b[MAX]));
      bbox = b;
      is_3d = true;
    }
    */
    intersection (
        if (lo'X > -inf) make_shape {
            dist(x,y,z,t) = lo'X - x;
            bbox = [[lo'X, -inf, -inf], [inf, inf, inf]];
            is_3d = true;
        },
        if (lo'Y > -inf) make_shape {
            dist(x,y,z,t) = lo'Y - y;
            bbox = [[-inf, lo'Y, -inf], [inf, inf, inf]];
            is_3d = true;
        },
        if (lo'Z > -inf) make_shape {
            dist(x,y,z,t) = lo'Z - z;
            bbox = [[-inf, -inf, lo'Z], [inf, inf, inf]];
            is_3d = true;
        },
        if (hi'X < inf) make_shape {
            dist(x,y,z,t) = x - hi'X;
            bbox = [[-inf, -inf, -inf], [hi'X, inf, inf]];
            is_3d = true;
        },
        if (hi'Y < inf) make_shape {
            dist(x,y,z,t) = y - hi'Y;
            bbox = [[-inf, -inf, -inf], [inf, hi'Y, inf]];
            is_3d = true;
        },
        if (hi'Z < inf) make_shape {
            dist(x,y,z,t) = z - hi'Z;
            bbox = [[-inf, -inf, -inf], [inf, inf, hi'Z]];
            is_3d = true;
        },
    );

prism = prism_m;
prism_m(n,d,h) = regular_polygon_m n d >> extrude_m h;

// TODO: pyramid(n,d,h)

// 'd' is the diameter of a sphere inscribed inside the tetrahedron.
// Vertexes are aligned with the X,Y,Z axes. Mitred distance field.
tetrahedron = make_shape {
    ... tetrahedron_m 2,
    map : tetrahedron_m,
    // radius of circumscribed sphere / radius of inscribed sphere
    circumratio : (sqrt(3/2)/2) / (1/(2*sqrt 6)),
};
tetrahedron_m d =
    let r = d / 2;
        // vertices of a tetrahedron
        v1 = [1,1,1];
        v2 = [-1,-1,1];
        v3 = [1,-1,-1];
        v4 = [-1,1,-1];

        // faces: (1,2,3) (1,4,2) (2,4,3) (1,3,4)
        // vertices listed in CCW order viewed from outside (right hand rule)

        // face normals
        n1 = normalize(cross(v1-v3,v2-v3));
        n2 = normalize(cross(v1-v2,v4-v2));
        n3 = normalize(cross(v2-v3,v4-v3));
        n4 = normalize(cross(v4-v3,v1-v3));
    in make_shape {
        dist p :
            max [
                dot(p'[X,Y,Z], n1),
                dot(p'[X,Y,Z], n2),
                dot(p'[X,Y,Z], n3),
                dot(p'[X,Y,Z], n4),
            ] - r,
        is_3d : true,
        bbox : sqrt(3) * [[-r,-r,-r], [r,r,r]],
    };

cube = make_shape {
    ... cube_m 2,
    map : cube_m,
    circumratio : sqrt 3,
};
cube_m d =
    let r = d / 2;
    in make_shape {
        dist(x,y,z,t) = max(abs(x,y,z) - r);
        bbox = [[-r, -r, -r], [r,r,r]];
        is_3d = true;
    };
cube_e d = box_e(d,d,d);

// 'd' is the diameter of a sphere inscribed inside the octahedron.
// Vertexes are aligned with the X,Y,Z axes. Mitred distance field.
octahedron = make_shape {
    ... octahedron_m 2,
    map : octahedron_m,
    circumratio : (1/2*sqrt 2) / (1/6*sqrt 6),
};
octahedron_m d =
    let r = d / 2;
        v0 = normalize(1,1,1);
        v1 = normalize(-1,1,1);
        v2 = normalize(1,-1,1);
        v3 = normalize(1,1,-1);
        // radius of circumscribed sphere / radius of inscribed sphere
        circumratio = (1/2*sqrt 2) / (1/6*sqrt 6);
    in make_shape {
        dist p :
            max [
                abs(dot(p'[X,Y,Z], v0)),
                abs(dot(p'[X,Y,Z], v1)),
                abs(dot(p'[X,Y,Z], v2)),
                abs(dot(p'[X,Y,Z], v3)),
            ] - r,
        is_3d : true,
        bbox : circumratio * [[-r,-r,-r], [r,r,r]],
    };

// 'd' is the diameter of a sphere inscribed inside the dodecahedron.
// Mitred distance field. Pointy side down.
dodecahedron = make_shape {
    ... dodecahedron_m 2,
    map : dodecahedron_m,
    circumratio : (.25*(sqrt 3 + sqrt 15)) / (1/20*sqrt(250+110*sqrt(5))),
};
dodecahedron_m d =
    let r = d / 2;
        v0 = normalize(0, phi, 1);
        v1 = normalize(0, -phi, 1);
        v2 = normalize(1, 0, phi);
        v3 = normalize(-1, 0, phi);
        v4 = normalize(phi, 1, 0);
        v5 = normalize(-phi, 1, 0);
        midratio = (.25*(3+sqrt(5))) / (1/20*sqrt(250+110*sqrt(5)));
        circumratio = (.25*(sqrt 3 + sqrt 15)) / (1/20*sqrt(250+110*sqrt(5)));
    in make_shape {
        dist p :
            max [
                abs(dot(p'[X,Y,Z], v0)),
                abs(dot(p'[X,Y,Z], v1)),
                abs(dot(p'[X,Y,Z], v2)),
                abs(dot(p'[X,Y,Z], v3)),
                abs(dot(p'[X,Y,Z], v4)),
                abs(dot(p'[X,Y,Z], v5)),
            ] - r,
        is_3d : true,
        bbox : midratio * [[-r,-r,-r],[r,r,r]],
    };

// 'd' is the diameter of a sphere inscribed inside the icosahedron.
// Mitred distance field.
icosahedron = make_shape {
    ... icosahedron_m 2,
    map : icosahedron_m,
    circumratio : (.25*sqrt(10+2*sqrt 5)) / (1/12*(3*sqrt(3)+sqrt(15))),
};
icosahedron_m d =
    let r = d / 2;
        v0 = normalize(1,1,1);
        v1 = normalize(-1,1,1);
        v2 = normalize(1,-1,1);
        v3 = normalize(1,1,-1);
        v4 = normalize(0, +1, phi+1);
        v5 = normalize(0, -1, phi+1);
        v6 = normalize(+phi+1, 0, 1);
        v7 = normalize(-phi-1, 0, 1);
        v8 = normalize(+1, phi+1, 0);
        v9 = normalize(-1, phi+1, 0);
        // radius of midsphere / radius of insphere
        midratio = (phi/2) / (1/12*(3*sqrt(3)+sqrt(15)));
        circumratio = (.25*sqrt(10+2*sqrt 5)) / (1/12*(3*sqrt(3)+sqrt(15)));
    in make_shape {
        dist p :
            max [
                abs(dot(p'[X,Y,Z], v0)),
                abs(dot(p'[X,Y,Z], v1)),
                abs(dot(p'[X,Y,Z], v2)),
                abs(dot(p'[X,Y,Z], v3)),
                abs(dot(p'[X,Y,Z], v4)),
                abs(dot(p'[X,Y,Z], v5)),
                abs(dot(p'[X,Y,Z], v6)),
                abs(dot(p'[X,Y,Z], v7)),
                abs(dot(p'[X,Y,Z], v8)),
                abs(dot(p'[X,Y,Z], v9)),
            ] - r,
        is_3d : true,
        bbox : midratio * [[-r,-r,-r], [r,r,r]],
    };

/////////////////////////////////////////////
// BOOLEAN / SET THEORETIC SHAPE OPERATORS //
/////////////////////////////////////////////

nothing =
    make_shape {
        dist p : inf,
        bbox : [[inf,inf,inf],[-inf,-inf,-inf]],
        is_2d : true,
        is_3d : true,
    };
everything =
    make_shape {
        dist p : -inf,
        bbox : [[-inf,-inf,-inf],[inf,inf,inf]],
        is_2d : true,
        is_3d : true,
    };
complement s =
    make_shape {
        dist p : -s.dist p,
        bbox : [[-inf,-inf,-inf],[inf,inf,inf]],
        is_2d : s.is_2d,
        is_3d : s.is_3d,
    };

// Approximate union that produces a mitred SDF inside. Fast.
// When unioning a list of coloured shapes, we paint the shapes from first to
// last order: the last shape is painted on top of its predecessors.
union list = reduce(nothing, _union2) list;
_union2 (s1,s2) =
    make_shape {
        dist p : min(s1.dist p, s2.dist p),
        colour p :
            do  var d1 := s1.dist p;
                var d2 := s2.dist p;
            in if (d2 <= 0 || d2 <= d1) s2.colour p else s1.colour p,
        bbox : [min(s1.bbox'0, s2.bbox'0), max(s1.bbox'1, s2.bbox'1)],
        is_2d : s1.is_2d && s2.is_2d,
        is_3d : s1.is_3d && s2.is_3d,
    };

intersection list = reduce(everything, _intersection2) list;
_intersection2 (s1,s2) =
    make_shape {
        dist p : max(s1.dist p, s2.dist p),
        colour : s1.colour,
        bbox : [max(s1.bbox'0, s2.bbox'0), min(s1.bbox'1, s2.bbox'1)],
        is_2d : s1.is_2d && s2.is_2d,
        is_3d : s1.is_3d && s2.is_3d,
    };

difference(s1,s2) = _intersection2(s1, complement s2);
symmetric_difference shapes = difference(union shapes, intersection shapes);

crop limits shape = intersection(shape, limits);

size shape = shape.bbox[MAX] - shape.bbox[MIN];
row_x d shapes =
    let width = sum[for (s in shapes) size(s)[X]] + (count shapes - 1)*d;
    in do 
        var xdelta := [];
        var x := -width / 2;
        var i := 0;
        while (i < count shapes) (
            xdelta := concat(xdelta, [x - shapes[i].bbox[MIN][X]]);
            x := x + d + size(shapes[i])[X];
            i := i + 1;
        );
    in union[for (i in 0..<count shapes) shapes[i] >> move(xdelta[i],0,0)];

smooth_union k (s1,s2) =
    make_shape {
        dist p : smooth_min(s1.dist p, s2.dist p, k),
        colour p :
            do  var d1 := s1.dist p;
                var d2 := s2.dist p;
            in if (d2 <= 0 || d2 <= d1) s2.colour p else s1.colour p,
        bbox : [min(s1.bbox'0, s2.bbox'0), max(s1.bbox'1, s2.bbox'1)],
        is_2d : s1.is_2d && s2.is_2d,
        is_3d : s1.is_3d && s2.is_3d,
    };

smooth_intersection k (s1,s2) =
    make_shape {
        dist p : smooth_max(s1.dist p, s2.dist p, k),
        colour : s1.colour,
        bbox : [max(s1.bbox'0, s2.bbox'0), min(s1.bbox'1, s2.bbox'1)],
        is_2d : s1.is_2d && s2.is_2d,
        is_3d : s1.is_3d && s2.is_3d,
    };

smooth_difference k (s1,s2) = smooth_intersection k (s1, complement s2);

// polynomial smooth min, from IQ
// http://www.iquilezles.org/www/articles/smin/smin.htm
smooth_min(a,b,k) =
    if (a == inf)
        // TODO: work around bug in 'max' that exists on ubuntu/nvidia GTX 1050
        // Bug is: max(-inf,x) returns NaN.
        b
    else
        do var h := clamp( 0.5+0.5*(b-a)/k, 0, 1 );
        in mix( b, a, h ) - k*h*(1.0-h);
smooth_max(a,b,k) = -smooth_min(-a,-b,k);

////////////////////////////
// AFFINE TRANSFORMATIONS //
////////////////////////////

move = translate;
translate _delta shape =
    let delta = if (count _delta == 2) [_delta[X],_delta[Y],0] else _delta;
        if (shape.is_2d) assert(delta[Z] == 0);
    in make_shape {
        // TODO: dist(x,y,z,t) : shape.dist(...[x,y,z]-delta, t),
        // TODO: dist p : shape.dist(...p'[X,Y,Z]-delta, p[T]),
        dist p : shape.dist(p[X]-delta[X], p[Y]-delta[Y], p[Z]-delta[Z], p[T]),
        colour p : shape.colour(p[X]-delta[X],p[Y]-delta[Y],p[Z]-delta[Z],p[T]),
        bbox : [shape.bbox'MIN+delta, shape.bbox'MAX+delta],
        is_2d : shape.is_2d,
        is_3d : shape.is_3d,
    };

// If s is a number, this is an isotropic scale operation which preserves the
// properties of the distance field.
// If s is a vec2, only the X and Y dimensions are scaled,
// and if s is a vec3, the X, Y and Z dimensions are scaled differently.
// For these latter cases, anisotropic scaling creates a non-Euclidean
// distance field that doesn't play well with certain upstream shape operations.
scale _s shape =
    let s = if (is_num _s) [_s,_s,_s]
            else if (is_vec2 _s) [..._s, 1]
            else let assert(is_vec3(_s) && shape.is_3d) in _s;
    in make_shape {
        // TODO: dist p : shape.dist(...p'[X,Y,Z] / s, p[T]) * min(s),
        dist p : shape.dist(p'X/s'X, p'Y/s'Y, p'Z/s'Z, p'T) * min(s),
        colour p : shape.colour(p'X/s'X, p'Y/s'Y, p'Z/s'Z, p'T) * min(s),
        bbox : [s*shape.bbox[MIN], s*shape.bbox[MAX]],
        is_2d : shape.is_2d,
        is_3d : shape.is_3d,
    };

warp_domain_xy warp shape =
    let bv = map (warp.function) [
            [shape.bbox[MIN][X], shape.bbox[MIN][Y]],
            [shape.bbox[MAX][X], shape.bbox[MIN][Y]],
            [shape.bbox[MAX][X], shape.bbox[MAX][Y]],
            [shape.bbox[MIN][X], shape.bbox[MAX][Y]],
        ];
    in make_shape {
        dist(x,y,z,t) =
            do var p := warp.inverse(x,y);
            in warp.fix_distance(x,y,shape.dist(p[X], p[Y], z, t));
        colour(x,y,z,t) =
            do var p := warp.inverse(x,y);
            in warp.fix_distance(x,y,shape.colour(p[X], p[Y], z, t));
        bbox = [
            [ ...min bv, shape.bbox[MIN][Z] ],
            [ ...max bv, shape.bbox[MAX][Z] ],
        ];
        is_2d = shape.is_2d;
        is_3d = shape.is_3d;
    };

// rotate angle shape -- 2D rotation around the Z axis
// rotate (angle,axis) shape -- 3D rotation around specified axis
rotate a shape = (
    if (is_num a)
        let // 2D rotation around the Z axis
            rot2(a,p) = cmul(p, cis a);
            b = if (shape.bbox[MIN][X] == -inf || shape.bbox[MIN][Y] == -inf
                    || shape.bbox[MAX][X] == inf || shape.bbox[MAX][Y] == inf)
                [[-inf,-inf], [inf,inf]]
            else
                let bv = map (p->rot2(a,p)) [
                        [shape.bbox[MIN][X], shape.bbox[MIN][Y]],
                        [shape.bbox[MAX][X], shape.bbox[MIN][Y]],
                        [shape.bbox[MAX][X], shape.bbox[MAX][Y]],
                        [shape.bbox[MIN][X], shape.bbox[MAX][Y]],
                    ];
                in [min bv, max bv];
        in make_shape {
            dist p :
                do var xy := rot2(-a,p);
                in shape.dist(xy'X,xy'Y,p'Z,p'T),
            colour p :
                do var xy := rot2(-a,p);
                in shape.colour(xy'X,xy'Y,p'Z,p'T),
            bbox : [
                [ b[MIN][X], b[MIN][Y], shape.bbox[MIN][Z] ],
                [ b[MAX][X], b[MAX][Y], shape.bbox[MAX][Z] ],
            ],
            is_2d : shape.is_2d,
            is_3d : shape.is_3d,
        }
    else
        let assert(is_list a && count a == 2);
            angle = a[0];
            axis = normalize(a[1]);
            assert(shape.is_3d);
            rot3(a,axis,p) =
                    p * cos(a)
                    - cross(axis, p) * sin(a)
                    + axis * dot(axis, p * (1 - cos a));
            b = if (shape.bbox[MIN][X] == -inf || shape.bbox[MIN][Y] == -inf
                    || shape.bbox[MIN][Z] == -inf
                    || shape.bbox[MAX][X] == inf || shape.bbox[MAX][Y] == inf
                    || shape.bbox[MAX][Z] == inf
                )
                    shape.bbox
                else
                    let bb = shape.bbox;
                        bv = map (p->rot3(-angle,axis,p)) [
                            [bb[MIN][X], bb[MIN][Y], bb[MIN][Z]],
                            [bb[MAX][X], bb[MIN][Y], bb[MIN][Z]],
                            [bb[MAX][X], bb[MAX][Y], bb[MIN][Z]],
                            [bb[MIN][X], bb[MAX][Y], bb[MIN][Z]],
                            [bb[MIN][X], bb[MIN][Y], bb[MAX][Z]],
                            [bb[MAX][X], bb[MIN][Y], bb[MAX][Z]],
                            [bb[MAX][X], bb[MAX][Y], bb[MAX][Z]],
                            [bb[MIN][X], bb[MAX][Y], bb[MAX][Z]],
                        ];
                    in [ min bv, max bv ];
        in make_shape {
            //TODO: dist p : shape.dist(...rot3(angle,axis,p'[X,Y,Z]),p[T]),
            dist p :
                do var q := rot3(angle, axis, p'[X,Y,Z]);
                in shape.dist(q[X],q[Y],q[Z],p[T]),
            colour p :
                do var q := rot3(angle, axis, p'[X,Y,Z]);
                in shape.colour(q[X],q[Y],q[Z],p[T]),
            bbox : b,
            is_3d : true,
        }
);

reflect_x shape =
    make_shape {
        dist(x,y,z,t) = shape.dist(-x,y,z,t);
        colour(x,y,z,t) = shape.colour(-x,y,z,t);
        bbox = [
            [-shape.bbox[MAX][X], shape.bbox[MIN][Y], shape.bbox[MIN][Z]],
            [-shape.bbox[MIN][X], shape.bbox[MAX][Y], shape.bbox[MAX][Z]],
        ];
        is_2d = shape.is_2d;
        is_3d = shape.is_3d;
    };
reflect_y shape =
    make_shape {
        dist(x,y,z,t) = shape.dist(x,-y,z,t);
        colour(x,y,z,t) = shape.colour(x,-y,z,t);
        bbox = [
            [-shape.bbox[MIN][X], shape.bbox[MAX][Y], shape.bbox[MIN][Z]],
            [-shape.bbox[MAX][X], shape.bbox[MIN][Y], shape.bbox[MAX][Z]],
        ];
        is_2d = shape.is_2d;
        is_3d = shape.is_3d;
    };
reflect_z shape =
    make_shape {
        dist(x,y,z,t) = shape.dist(x,y,-z,t);
        colour(x,y,z,t) = shape.colour(x,y,-z,t);
        bbox = [
            [-shape.bbox[MIN][X], shape.bbox[MIN][Y], shape.bbox[MAX][Z]],
            [-shape.bbox[MAX][X], shape.bbox[MAX][Y], shape.bbox[MIN][Z]],
        ];
        is_2d = shape.is_2d;
        is_3d = shape.is_3d;
    };

shear_x kx shape =
    warp_domain_xy {
        function(x,y) = (x + kx*y, y);
        inverse(x,y) = (x - kx*y, y);
        fix_distance(x,y,d) = d; // TODO
    } shape;

// TODO: In `taper`, the Lipschitz compensation code seems like overkill.
taper_x (kx0, y0, kx1, y1) shape =
    let assert(kx0 > 0 && kx1 > 0);
        assert(y0 < y1);
    in make_shape {
        dist(x,y,z,t) =
            (if (y <= y0)
                shape.dist(x/kx0,y,z,t) * kx0
            else if (y >= y1)
                shape.dist(x/kx1,y,z,t) * kx1
            else
                do var kx := mix(kx0,kx1,(y-y0)/(y1-y0));
                in shape.dist(x/kx,y,z,t) * kx
            ) * min(kx0,kx1);
        colour(x,y,z,t) =
            if (y <= y0)
                shape.colour(x/kx0,y,z,t)
            else if (y >= y1)
                shape.colour(x/kx1,y,z,t)
            else
                do var kx := mix(kx0,kx1,(y-y0)/(y1-y0));
                in shape.colour(x/kx,y,z,t);
        bbox = shape.bbox * [[max(kx0,kx1),1,1],[max(kx0,kx1),1,1]];
        is_2d = shape.is_2d;
        is_3d = shape.is_3d;
    };
taper_xy (kx0, ky0, z0, kx1, ky1, z1) shape =
    let assert(kx0 > 0 && ky0 > 0 && kx1 > 0 && ky1 > 0);
        assert(z0 < z1);
    in make_shape {
        dist(x,y,z,t) =
            (if (z <= z0)
                shape.dist(x/kx0,y/ky0,z,t) * min(kx0,ky0)
            else if (z >= z1)
                shape.dist(x/kx1,y/ky1,z,t) * min(kx1,ky1)
            else
                do  var kx := mix(kx0,kx1,(z-z0)/(z1-z0));
                    var ky := mix(ky0,ky1,(z-z0)/(z1-z0));
                in shape.dist(x/kx,y/ky,z,t) * min(kx,ky)
            ) * min(kx0,kx1,ky0,ky1);
        colour(x,y,z,t) =
            if (z <= z0)
                shape.colour(x/kx0,y/ky0,z,t)
            else if (z >= z1)
                shape.colour(x/kx1,y/ky1,z,t)
            else
                do  var kx := mix(kx0,kx1,(z-z0)/(z1-z0));
                    var ky := mix(ky0,ky1,(z-z0)/(z1-z0));
                in shape.colour(x/kx,y/ky,z,t);
        bbox =
            let kx = max(kx0,kx1);
                ky = max(ky0,ky1);
            in shape.bbox * [[kx,ky,1],[kx,ky,1]];
        is_2d = shape.is_2d;
        is_3d = shape.is_3d;
    };

at p t shape = shape >> move(-p) >> t >> move p;

// The slice operators convert a 3D shape to a 2D shape
// by extracting a planar cross section.
slice_xy shape =
    make_shape {
        dist p : shape.dist(p[X],p[Y],0,p[T]),
        colour p : shape.colour(p[X],p[Y],0,p[T]),
        bbox : [
            [shape.bbox[0][X],shape.bbox[0][Y],0],
            [shape.bbox[1][X],shape.bbox[1][Y],0],
        ],
        is_2d : true,
    };
slice_xz shape =
    make_shape {
        dist p : shape.dist(p[X],0,p[Y],p[T]),
        colour p : shape.colour(p[X],0,p[Y],p[T]),
        bbox : [
            [shape.bbox[0][X],shape.bbox[0][Z],0],
            [shape.bbox[1][X],shape.bbox[1][Z],0],
        ],
        is_2d : true,
    };
slice_yz shape =
    make_shape {
        dist p : shape.dist(0,p[X],p[Y],p[T]),
        colour p : shape.colour(0,p[X],p[Y],p[T]),
        bbox : [
            [shape.bbox[0][Y],shape.bbox[0][Z],0],
            [shape.bbox[1][Y],shape.bbox[1][Z],0],
        ],
        is_2d : true,
    };

// 'extrude' converts a 2D shape to a 3D shape, linearly extruding it along the
// positive and negative Z axis by a distance of 'h'. The result is centered
// on the XY plane with a height of 2*h. Similar to Autocad extrude and
// OpenSCAD linear_extrude.
//
// The _m variant is cheaper, and has a mitred distance field.
// The _e variant is the same shape with a Euclidean distance field.
extrude = extrude_e;
extrude_m d shape =
    let h = d / 2;
    in make_shape {
        dist p : max(abs(p[Z]) - h, shape.dist(p[X],p[Y],0,p[T])),
        colour p : shape.colour(p[X],p[Y],0,p[T]),
        bbox : [
            [shape.bbox[0][X],shape.bbox[0][Y],-h],
            [shape.bbox[1][X],shape.bbox[1][Y],+h],
        ],
        is_3d : true,
    };
extrude_e d shape =
    let h = d / 2;
    in make_shape {
        dist p :
            do  var dz := abs(p[Z]) - h;
                var dxy := shape.dist(p[X],p[Y],0,p[T]);
            in mag(max([dz,dxy],0)) + min(max(dz,dxy), 0),
        colour p : shape.colour(p[X],p[Y],0,p[T]),
        bbox : [
            [shape.bbox[0][X],shape.bbox[0][Y],-h],
            [shape.bbox[1][X],shape.bbox[1][Y],+h],
        ],
        is_3d : true,
    };

morph(t, shape1, shape2) =
    make_shape {
        dist p : mix(shape1.dist p, shape2.dist p, t),
        colour p : mix(shape1.colour p, shape2.colour p, t),
        bbox : mix(shape1.bbox, shape2.bbox, t),
        is_2d : shape1.is_2d && shape2.is_2d,
        is_3d : shape1.is_3d && shape2.is_3d,
    };

loft d (shape1, shape2) =
    let r = d / 2;
    in make_shape {
        dist(x,y,z,t) =
            max(abs z - r,
                mix(shape1.dist(x,y,0,t), shape2.dist(x,y,0,t),
                    (clamp(z, -r, r) + r) / d));
        is_3d = true;
    };

////////////////
// REPETITION //
////////////////

repeat_x d shape =
    let r = d / 2;
    in make_shape {
        dist(x,y,z,t) : shape.dist(mod(x + r, d) - r, y, z, t),
        colour(x,y,z,t) : shape.colour(mod(x + r, d) - r, y, z, t),
        bbox : [
            [-inf, shape.bbox[MIN][Y], shape.bbox[MIN][Z]],
            [+inf, shape.bbox[MAX][Y], shape.bbox[MAX][Z]],
        ],
        is_2d : shape.is_2d,
        is_3d : shape.is_3d,
    };

repeat_xy d shape =
    let r = d / 2;
    in make_shape {
        dist(x,y,z,t) =
            shape.dist(
                mod(x + r[X], 2*r[X]) - r[X],
                mod(y + r[Y], 2*r[Y]) - r[Y],
                z, t);
        colour(x,y,z,t) =
            shape.colour(
                mod(x + r[X], 2*r[X]) - r[X],
                mod(y + r[Y], 2*r[Y]) - r[Y],
                z, t);
        bbox = [
            [-inf, -inf, shape.bbox[MIN][Z]],
            [+inf, +inf, shape.bbox[MAX][Z]],
        ];
        is_2d = shape.is_2d;
        is_3d = shape.is_3d;
    };

repeat_xyz d shape =
    let r = d / 2;
    in make_shape {
        dist (x,y,z,t) =
            shape.dist(
                mod(x + r[X], 2*r[X]) - r[X],
                mod(y + r[Y], 2*r[Y]) - r[Y],
                mod(z + r[Z], 2*r[Z]) - r[Z],
                t);
        colour (x,y,z,t) =
            shape.colour(
                mod(x + r[X], 2*r[X]) - r[X],
                mod(y + r[Y], 2*r[Y]) - r[Y],
                mod(z + r[Z], 2*r[Z]) - r[Z],
                t);
        bbox = [
            [-inf, -inf, -inf],
            [+inf, +inf, +inf],
        ];
        is_2d = shape.is_2d;
        is_3d = shape.is_3d;
    };

repeat_mirror_x shape =
    make_shape {
        dist(x,y,z,t) : shape.dist(abs x, y, z, t),
        colour(x,y,z,t) : shape.colour(abs x, y, z, t),
        bbox : [
            [-shape.bbox[MAX][X], shape.bbox[MIN][Y], shape.bbox[MIN][Z]],
            shape.bbox[MAX],
        ],
        is_2d : shape.is_2d,
        is_3d : shape.is_3d,
    };

repeat_radial reps shape =
    let angle = tau/reps;
        inradius = shape.bbox[MAX][X];
        circumradius = inradius / cos(angle/2);
        max_y =
            if (mod(reps,4)==0)
                inradius
            else if (mod(reps,2)==0)
                circumradius
            else
                (circumradius * cis((floor(reps/4)+.5)*angle))[Y];
    in make_shape {
        dist p :
            do  var a := phase(p'[X,Y]) + angle/2;
                var r := mag(p'[X,Y]);
                a := mod(a,angle) - angle/2;
                var xy := cis(a) * r;
            in shape.dist(xy[X], xy[Y], p[Z], p[T]),
        colour p :
            do  var a := phase(p'[X,Y]) + angle/2;
                var r := mag(p'[X,Y]);
                a := mod(a,angle) - angle/2;
                var xy := cis(a) * r;
            in shape.colour(xy[X], xy[Y], p[Z], p[T]),
        // bbox is exact for regular_polygon, approximate for general case.
        bbox : [
            [ if (mod(reps,2)==0) -inradius else -circumradius,
              -max_y,
              shape.bbox[MIN][Z] ],
            [ inradius,
              max_y,
              shape.bbox[MAX][Z] ]
        ],
        is_2d : shape.is_2d,
        is_3d : shape.is_3d,
    };

////////////
// COLOUR //
////////////

colour c shape =
    if (is_vec3 c)
        make_shape {
            dist : shape.dist,
            colour p : c,
            bbox : shape.bbox,
            is_2d : shape.is_2d,
            is_3d : shape.is_3d,
        }
    else if (is_fun c)
        make_shape {
            dist : shape.dist,
            colour : c,
            bbox : shape.bbox,
            is_2d : shape.is_2d,
            is_3d : shape.is_3d,
        }
    else if (is_shape c)
        make_shape {
            dist : shape.dist,
            colour : c.colour,
            bbox : shape.bbox,
            is_2d : shape.is_2d,
            is_3d : shape.is_3d,
        }
    else
        error "first argument of 'colour' must be [r,g,b], function or shape";

// Each component of an [h,s,v] triple has range 0...1.
hsv2rgb c =
    do var m := abs(mod(c'0 + [1,2/3,1/3], 1) * 6 - 3);
    in c'2 * mix(1, clamp(m - 1, 0, 1), c'1);

red = [1, 0, 0];
orange = [1, .5, 0];
yellow = [1, 1, 0];
green = [0, 1, 0];
cyan = [0, 1, 1];
blue = [0, 0, 1];
magenta = [1, 0, 1];
white = [1, 1, 1];
black = [0, 0, 0];

radial_rainbow n =
    colour (p->hsv2rgb(mod(phase(p'[X,Y])/tau*n,1),1,1)) everything;
concentric_rainbow n =
    colour (p->hsv2rgb(mod(mag(p'[X,Y])/n,1),1,1)) everything;
linear_rainbow n =
    colour (p->hsv2rgb(mod(p[X]/n,1),1,1)) everything;

///////////////////////////////////////////////////////////////
// RESEARCH -- shapes and operators with bad distance fields //
///////////////////////////////////////////////////////////////

// This is the infinite connected 3D volume enclosed by the gyroid surface.
// Use `shell 0` to obtain the surface itself.
// https://en.wikipedia.org/wiki/Gyroid
// Lipschitz constant == 4/3. Apply 'lipschitz 1.33' after extracting isosurfaces
gyroid =
    make_shape {
        dist(x,y,z,t) = cos(x)*sin(y) + cos(y)*sin(z) + cos(z)*sin(x);
        is_3d = true;
    };

// Twist 3D space into a helix around the Z axis:
// 1 full rotation for each `d` of Z displacement.
// Bad distance field: The fudge factor 't*2' only works in simple cases.
twist d shape =
    let // t full rotations for each tau of Z displacement:
        t = tau / d;
        b = shape.bbox;
        r = max[map mag (
                [b[MIN][X], b[MIN][Y]],
                [b[MAX][X], b[MIN][Y]],
                [b[MIN][X], b[MAX][Y]],
                [b[MAX][X], b[MAX][Y]],
            )];
    in make_shape {
        dist p :
            do var xy := cmul(p'[X,Y], cis(p[Z]*t));
            in shape.dist(xy[X], xy[Y], p[Z], p[T]) /* / (t*2) */,
        colour p :
            do var xy := cmul(p'[X,Y], cis(p[Z]*t));
            in shape.colour(xy[X], xy[Y], p[Z], p[T]) /* / (t*2) */,
        bbox : [[-r,-r,b[MIN][Z]],[r,r,b[MAX][Z]]],
        is_3d : true,
    };

// Take the upper half of the XY plane between X==-d/2 and X==d/2,
// and wrap that radially around the origin to cover the XY plane,
// by mapping rectangular coordinates in the source region to polar coordinates
// in the target region.
// Beware of the distance field.
bend d shape =
    let r = d / 2;
    in make_shape {
        dist(x,y,z,t) : shape.dist(phase(x,y)/pi*r, mag(x,y), z, t),
        colour(x,y,z,t) : shape.colour(phase(x,y)/pi*r, mag(x,y), z, t),
        bbox : [
            [-shape.bbox[MAX][Y], -shape.bbox[MAX][Y], shape.bbox[MIN][Z]],
            [+shape.bbox[MAX][Y], +shape.bbox[MAX][Y], shape.bbox[MAX][Z]],
        ],
        is_2d : shape.is_2d,
        is_3d : shape.is_3d,
    };

///////////////////////////
// LOW LEVEL & DEBUGGING //
///////////////////////////
distance_field shape =
    make_shape {
        dist : everything.dist,
        colour p :
            do  var d := shape.dist p;
                var c := if (d >= 0) ceil(d)-d else floor(d)-d;
            in [max(-c,0), bit(abs(d)==inf), max(c,0)],
        is_2d : true,
    };

// Select an isosurface of the shape's distance field.
// r > 0: inflate the shape, blow it up like a balloon.
// r == 0: no effect.
// r < 0: deflate the shape.
//
// If the distance field is Euclidean, then positive r yields
// the Minkowski sum of a sphere of radius r, aka rounded offset (CAD),
// aka dilation (Mathematical Morphology).
//
// If the distance field is mitred, the result is a mitred offset (CAD).
//
// WARNING: Two shapes can have identical boundaries, but different distance
// fields, so this is sensitive to the implementation of the shape.
// Useful for debugging, to visualize a distance field.
offset r shape =
    make_shape {
        dist p : shape.dist p - r,
        colour p : shape.colour p,
        bbox : [shape.bbox[MIN]-r, shape.bbox[MAX]+r],
        is_2d : shape.is_2d,
        is_3d : shape.is_3d,
    };

// Construct a shell of thickness d,
// whose boundaries are +/- d/2 from the original surface or perimeter.
// WARNING: this is implemented using isosurfaces, so the results are dependent
// on the distance field, not just on the boundary of the shape.
shell d shape =
    let r = d / 2;
    in make_shape {
        dist p : abs(shape.dist p) - r,
        colour : shape.colour,
        bbox : [shape.bbox[MIN] - r, shape.bbox[MAX] + r],
        is_2d : shape.is_2d,
        is_3d : shape.is_3d,
    };

pancake d shape = shape >> extrude_e 0 >> offset (d/2);

// Super kludgy function to scale a shape's distance field,
// to compensate for a Lipschitz constant that is > 1.
// So 'k' is the Lipschitz constant.
// Try k=2 to fix a 3D shape that doesn't render properly.
lipschitz k shape =
    make_shape {
        dist p : shape.dist p / k,
        colour : shape.colour,
        bbox : shape.bbox,
        is_2d : shape.is_2d,
        is_3d : shape.is_3d,
    };

// Colour the XY plane with black where the distance field gradient <= 1 (okay)
// or with rainbow colour where it is > 1 and <= n (bad)
// or with white where it is > n (worst).
// Debug strategy: find the smallest value of n that doesn't produce white,
// and that's your Lipschitz constant. Try n=2 as an initial value.
gradient n shape =
    make_shape {
        dist : everything.dist,
        colour p :
            do  var eps := 0.01;
                var d := shape.dist(p[X],p[Y],0,p[T]);
                var up := shape.dist(p[X],p[Y]+eps,0,p[T]);
                var down := shape.dist(p[X],p[Y]-eps,0,p[T]);
                var left := shape.dist(p[X]-eps,p[Y],0,p[T]);
                var right := shape.dist(p[X]+eps,p[Y],0,p[T]);
                var m := max(abs(d-up),abs(d-down),abs(d-left),abs(d-right)) / eps;
            in if (m <= 1)
                [0,0,0]
            else if (m > n)
                [1,1,1]
            else
                hsv2rgb(min(m-1,n-1)/(n-1),1,1),
        is_2d : true,
    };

show_dist shape =
    let xy = make_shape {
            dist(x,y,z,t) : abs(z),
            colour p :
                do  var eps := 0.01;
                    var d := shape.dist p;
                    var up := shape.dist(p[X],p[Y]+eps,0,p[T]);
                    var down := shape.dist(p[X],p[Y]-eps,0,p[T]);
                    var left := shape.dist(p[X]-eps,p[Y],0,p[T]);
                    var right := shape.dist(p[X]+eps,p[Y],0,p[T]);
                    var g := max(abs(d-up),abs(d-down),abs(d-left),abs(d-right)) / eps;
                    var c := if (d >= 0) ceil(d)-d else floor(d)-d;
                in if (d == d)
                    if (d == inf)
                        [0,1,1]
                    else if (d == -inf)
                        [0,.5,.5]
                    else
                        [clamp(g-1,0,1), max(-c,0), max(c,0)]
                else
                    [1,1,1],
            bbox : [[-inf,-inf,0],[inf,inf,0]],
            is_2d : true,
            is_3d : true,
        };
    in if (shape.is_2d) xy else union(shape, xy);

show_axes shape =
    let eps = .05;
    in if (shape.is_2d)
        union [
            shape,
            rect(eps, inf) >> colour green,
            rect(inf, eps) >> colour red,
        ]
    else
        union [
            shape,
            box(inf, eps, eps) >> colour red,
            box(eps, inf, eps) >> colour green,
            box(eps, eps, inf) >> colour blue,
        ];

}
