// Curv standard library, automatically loaded at startup.
concat(vv) = [for(v=vv) for(i=v) i];

circle(r) = shape2d {
    dist(p) = sqrt(p.[0]*p.[0] + p.[1]*p.[1]) - r,
    bbox = [[-r,-r],[r,r]]
};
square(sz) = shape2d {
    dist p = max[abs p.[0] - sz/2, abs p.[1] - sz/2],
    bbox = [[-sz/2,-sz/2], [sz/2,sz/2]],
};
nothing = shape2d {
    dist(p) = inf,
    bbox = [[inf,inf],[-inf,-inf]]
};
everything = shape2d {
    dist(p) = -inf,
    bbox = [[-inf,-inf],[inf,inf]]
};
complement(s) = shape2d {
    dist p = -s.dist p,
    bbox = [[-inf,-inf],[inf,inf]]
};
union2(s1,s2) = shape2d {
    dist p = min[s1.dist p, s2.dist p],
    bbox = [
        [min[s1.bbox.[0].[0],s2.bbox.[0].[1]],
         min[s1.bbox.[0].[1],s2.bbox.[0].[1]]],
        [max[s1.bbox.[1].[0],s2.bbox.[1].[0]],
         max[s1.bbox.[1].[1],s2.bbox.[1].[1]]]
    ]
};
intersection2(s1,s2) = shape2d {
    dist p = max[s1.dist p, s2.dist p],
    bbox = [
        [max[s1.bbox.[0].[0],s2.bbox.[0].[1]],
         max[s1.bbox.[0].[1],s2.bbox.[0].[1]]],
        [min[s1.bbox.[1].[0],s2.bbox.[1].[0]],
         min[s1.bbox.[1].[1],s2.bbox.[1].[1]]]
    ]
};
difference(s1,s2) = intersection2(s1, complement s2);
