Colour Spaces
=============
A colour space is a coordinate system for describing colours.
Due to the fact that the human eye has 3 types of colour receptors sensitive
to different frequency bands, all colour spaces have 3 coordinates.

There are many different colour spaces in use by the graphics industry.
Different colour spaces must be used in different situations. Unfortunately,
this means that Curv cannot get by with just a single colour space.
In particular, Curv needs to have at least 2 RGB colour spaces: sRGB and linRGB.
This means that an RGB triple is meaningless unless you specify which RGB
colour space it belongs to. Colour is complicated. Sorry.

Colour spaces are denoted by named values in Curv.
Here is a curated list of the most useful colour spaces for Curv to support:
* linRGB
* sRGB
* sRGB.HSV
* LAB
* LAB.HCL

You can call a colour space like a function, passing a list of colour space
coordinates, and it will construct a colour value. Note that in Curv, colour
space coordinates are normalized to the range 0 to 1. Also note that there are
some cases where a colour space coordinate can be legitimately < 0 or > 1.

Other colour space operations are noted here:
* interpolation
* constructing a gradient colour map
* extracting colour space coordinates from a colour value?
  * eg, cspace.get <colour> => <coordinates>
  * eg, cspace.from <colour> => <coordinates>
* when importing an image, specify its colour space?
* TODO

sRGB
----
This is the most popular RGB colour space. It is used by the web.
By default, image files (*.jpeg, *.png, etc) are assumed to use the sRGB
colour space, unless there is metadata that specifies otherwise.
By default, monitors are assumed to use the sRGB colour space,
unless the device driver provides metadata that specifies otherwise.

linRGB
------
linRGB is "linear RGB", and it is the colour space used internally by OpenGL
for 3D rendering and colour mixing. linRGB is also used for blending colours
during alpha-compositing of 2D images. It is based on sRGB (same RGB primaries
and same white point), but the gamma curve is linear. If you multiply a linRGB
triple by *n*, then the number of photons emitted by the monitor will be
increased by a factor of *n*. The effect of shining two light sources on an
object is obtained by adding the linRGB triples of each light source. linRGB
must be used if you want to model physically accurate colour mixing, and Curv
uses it for rendering computations on the GPU.

sRGB exists because linRGB is not perceptually uniform. The human eye does not
have a linear response to increasing light levels, it instead has an exponential
response, which is modelled by the sRGB gamma curve.

sRGB.HSV
--------
sRGB.HSV is a simple (and cheap to compute) transformation of sRGB that is
more ergonomic for colour picking. It is an old and popular standard.
I implemented it because I've ported several pieces of code that use it.

* H is Hue: 0 means red, 1/3 means green, 2/3 means blue, and 1 is red.
* S is Saturation. It is the distance from a neutral colour (white/grey/black).
  1 means fully saturated, while 0 indicates a grey-scale value between black
  and white. Turning down the saturation leaches out the hue and brings the
  colour closer to neutral.
* V is Value (also known as Brightness -- sometimes the colourspace is called
  HSB). It is the distance from black. Turning down the brightness makes the
  colour dimmer and closer to black.

Notes:
* A ``saturation`` of 0 constructs a neutral greyscale colour
  based on the ``brightness``, ignoring the ``hue``. So ``sRGB.HSV(h,0,b)``
  is white if b==1, medium grey if b==0.5, and black if b==0.
* A ``saturation`` of 1 constructs a "shade" (a mixture of a pure
  colour and black), where ``hue`` is the pure colour,
  and ``brightness`` is the distance from black.
* If the ``brightness`` is 0, then the resulting colour is black,
  ignoring the hue and saturation.
* A ``brightness`` of 1 constructs a "tint" (a mixture of a pure colour
  and white), where ``hue`` is the pure colour,
  and ``saturation`` is the distance from white.

Historically, HSV was created by Alvy Ray Smith as an alternative to the older
HSL space. It was described in the SIGGRAPH 1978 conference proceedings:
<http://alvyray.com/Papers/CG/color78.pdf>. Originally, a major benefit of
HSV over HSL was that HSV was faster to compute.

sRGB.HSL
--------
HSL is an older alternative to HSV. Both colour spaces were designed to be
used by artists for colour picking. The web CSS standard supports HSL but
not HSV. I personally prefer HSV, and I haven't needed an HSL transform in
Curv for porting software, so it hasn't been implemented.

sRGB.HWB
--------
HWB is a relatively new (1995) colour space that was designed by Alvy Ray Smith
to be more intuitive for colour picking than HSV or HSL, and to be faster
to compute than the older standards.
<http://alvyray.com/Papers/CG/HWB_JGTv208.pdf>

The three coordinates are Hue (as in HSV), amount of White, and amount of Black.

HWB has been included in CSS level 4, due to its superior ergonomics.
<https://www.w3.org/TR/css-color-4/#the-hwb-notation>

Curv has an interactive colour picker that is based on HWB.

It is not clear if HWB as a coordinate system is useful as an API.
Is HWB useful for interpolating colours, creating gradients, etc?

LAB
---
The CIE LAB colour space is perceptually uniform: a given step size produces
the same amount of perceptually change anywhere in the coordinate space.
* L is lightness (absolute brightness).
* A is the red-green axis.
* B is the blue-yellow axis.
* The LAB gamut covers all perceivable colours. When converting LAB
  coordinates to internal representation, during the construction of
  a colour value, we use linRGB coordinates outside the range 0...1,
  and clamp during lighting calculations.
* Best overall choice for colour interpolation (linear gradients).
  Subjectively, the gradients look good, and have a minimum of unexpected
  behaviour.
  http://howaboutanorange.com/blog/2011/08/10/color_interpolation/
  * Brightness (lightness) increases or decreases monotonically and
    uniformly across the gradient.
    Neither property holds for RGB interpolation.
  * You don't get unexpected hues when interpolating between colours
    on opposite sides of the colour wheel. Eg, you don't get violet
    when interpolating between blue and orange, you get neutral colours
    instead.

There are other perceptually uniform colour spaces (eg, CIE LUV), but the
graphics industry has standardized on LAB. By 'graphics industry', I mean
photography, cinema, computer graphics, printmaking, image editors like
Photoshop (which offer LAB editing), and colorimetry hardware. Curv wants to be
interoperable with this large ecosystem.

LAB.HCL
-------
LAB.HCL is to LAB as sRGB.HSV is to sRGB.
It is a simple transform of LAB coordinates: the AB axes are transposed into
polar coordinates, giving Hue and Chroma axes which are more useful
for colour picking. The H,C,L coordinates correspond closely
to the H,S,V coordinates, but the HCL axes are perceptually uniform.

* H is the Hue axis. Unlike HSV, the spacing of hues is perceptually uniform.
  Red is 0, yellow is 1/4, green is 1/2, blue is 3/4, and 1 is red again.

  In the HSV colour wheel, red and green are separated by 120°, green and
  blue are separated by 120°, even though red and green are much farther
  part perceptually (they are maximally contrasting, complementary hues),
  while blue and green are perceptually much closer together. The HCL
  colour wheel is more perceptually uniform. The complementary hues
  red and green are separated by 180°; the complementary hues blue and
  yellow are separated by 180°.

* Chroma is the amount of colour, or distance from neutral. It's like
  the S (saturation) axis of HSV, except that it is absolute and perceptually
  uniform, instead of being relative to the hue and value.

* L is the Lightness (brightness, distance from black). It's like the V (value)
  axis of HSV, except that it is absolute and perceptually uniform (not relative
  to hue). In HSV, yellow is brighter than green, which is brighter than blue,
  all at the same value level, while in HCL, all colours with the same lightness
  have the same perceived brightness.

LAB.HCL is useful for colour interpolation in cases where you prefer to cycle
through the colour wheel when interpolating between distant hues, rather than
pass through a neutral colour when interpolating between two relatively
more saturated colours. In HCL interpolation, unlike LAB,
the Chroma (saturation) increases or decreases monotonically.

LAB.HCL is heavily promoted on the web, is supported by many Javascript
libraries, and is a standard colourspace in CSS Level 4.

NOTE: There is a competing colour space, also called HCL, but based on the
CIE LUV colourspace. I will call this HCL(uv). It is implemented by the
`colorspace` library, which is available for R and Python. The web site
<http://hclwizard.org/> promotes this version of HCL, without making it clear
that it is different from the LAB version of HCL.

Notes on White
--------------
Black is a unique, absolute colour (the absence of light).

White is not a unique, absolute colour, either in physics, or in the physiology
of human vision. What we perceive as "white" depends on the ambient lighting
environment, and on what colours are nearby. For the purposes of colour
classification, there are a range of "white" colours. "Warmer" whites are
on the yellow side, while "cooler" whites are on the blue side.

Each colour space has a defined "white point".

The white point of sRGB is CIE illuminant D65, which has a colour temperature
of 6500°K, and is markedly on the blue side of white. I think this was a forced
choice, since sRGB was designed to be compatible with the television standards
of the mid 20th century, and the phosphors used in television CRTs resulted in
this very blueish white.

The graphics industry has settled on illuminant D50 as the standard for "white",
and uses D50 as the white point for the LAB colour space. D50 is warmer (or
yellower) than D65. "Daylight" light bulbs sold in North America are roughly
equivalent to D50. CSS level 4 defines a `gray` function, and the grey colours
it generates are based on D50, even though sRGB has a D65 white point.
