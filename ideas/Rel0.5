Curv Changes since Release 0.4
==============================
General Improvements
--------------------
* @ComFreek -- Windows port.
* @Xiaoyuew -- Multi-threaded, multi-core mesh export.
* AMD GPUs supported on Linux using AMD Mesa 19.x driver.
* Configuration file ~/.config/curv contains defaults for -O options.
* All -O option values are now specified as Curv expressions.
  Symbols used in -O options: -Ocolouring=#vertex or -Ocolouring=#face
* `make upgrade` command
* REPL supports full language (assignment statements, generators)
* general tail call optimization

Curv changes at Apr 3 2021 ce178d18
-----------------------------------
- a string is a list of characters
- subcurv: matrix multiplication ('dot')
- extended support for reactive expressions in SubCurv
- multi-dimensional array slicing
- generalized index values (lenses)
- "precise domains" and failure handling:
  - 'error' is a function value (previously was magic syntax)
  - 'id' -- identity function
  - 'identity' renamed to 'idmatrix'
  - 'compose' is generalized to work correctly on partial functions
- vectorized boolean 'not' function; unary '!' operator is deprecated
- vectorized boolean reduction functions 'and', 'or', 'xor'
- 'is_fun' deprecated, replaced by 'is_func' and 'is_primitive_func'
- deprecate '(a,b,c)' list syntax; use '[a,b,c]' instead
- generalized 'polygon' primitive (can be non-convex, self-intersecting)
- 'parametric' records have a 'call' field that reruns the constructor
  with different parameter values. The result is another parametric record,
  also with a 'call' field.
- 'test' definitions, for unit tests in a module, or anywhere else
- 'assert_error', for writing unit tests
- comma separated definition lists in 'let ...' and '{...}'.
  Previously only ';' was allowed as separator.
- '--depr=' option controls deprecation warnings
- 'a.[i]' is new array indexing syntax. 'a[i]' is deprecated.
- 'r.[#foo]' is same as 'r.foo'. Syntax r."foo" is deprecated.
- 'a.foo.[i] := ...' assignment statements
- 'symbol' function (construct symbol from string)
- Add character type. A string literal "foo" is a list of characters.
  - 'char' and 'is_char'
- 'string' and 'ucode' functions
- 'encode' removed, replaced by 'ucode'
- 'decode' removed, replaced by 'char'
- new char escape sequence in string literals: $_ -> $ and "_ -> "
- #"a" is a character literal
- a++b list catenation operator
- in a statement context, () and (a,b,c) are generators.
- deprecate syntax "name":value
- 'where' is deprecated
- in a dynamic record literal, [#a,1] is equivalent to a:1, both expressions
- 'amend index newelem tree'
- 'this', 'tpath', 'tslice'
- 'locative!func1!func2' statement
- deprecate "foo":expr, in expression or pattern context.
- 'help' in REPL is partially implemented

better error messages and stack traces
- an ongoing project
- function names printed in stack traces

Curv changes at version 2e3bc8009, Feb 26 2020
----------------------------------------------

## Language Changes

------
local definitions:
    in a 'do' expression, visible in body
    in record comprehensions
let:
    only definitions are permitted in the head of a `let`
Remove 'generalized do'. Only 'do' expressions are supported.
    vec[i] := newval -- also in SubCurv
    `record.field := newvalue`
    
noise library, rand[1-4]x1

fewer levels of operator precedence:
  unite Power with Unary; not a breaking change; grammar becomes more liberal.
  unite Relation with Range, breaking change, parse error for '1..3==[1,2,3]'

Boolean array operators.
  SubCurv supports Bool32, Bool[2-4], Bool[2-4]x32
  new boolean array operations (also in SubCurv):
    float_to_bool32, bool32_to_float
    nat_to_bool32 (in SubCurv, argument must be a constant)
    bool32_to_nat (not in SubCurv)
    bool32_sum, bool32_product
    lshift, rshift
    and, or, xor
  enhanced operations:
    bit is vectorized
    ! <bool32> in subcurv

`a >> into union [b, c]` means `union [a, b, c]`

AMD Mesa 19.x driver works

'sf1' render function
`shader` render parameter is #standard or #pew
Shape has optional `render` field (rendering parameters)

REPL: support := statement
REPL now supports Field Generator statements
REPL.rst doc

curv: rename -Ocolour= to -Ocolouring=

user config: is a record containing {viewer,export} fields
Config.rst doc

Add Symbol data type.
* There are now 6 fundamental types, down from 7.
  They are: Symbol, Number, String, List, Record, Function.
* syntax: #foo or #'hello world'
* true, false, null are now just aliases for #true, #false, #null
* JSON export exports #true, #false, #null as JSON true, false, null.
* Add 'is_symbol' predicate.
* Remove `is_null` predicate (breaking change).
* Symbol patterns.

  All -O option values are now specified as Curv expressions.
  symbols in -O options: -Ocolouring=#vertex or -Ocolouring=#face

JSON export no longer tries hard to distinguish JSON from non-JSON data.
Non-JSON data is now just exported as a string.
`#foo` exports as `"foo"`. `sin` exports as `"<function sin>"`.

'_' (with quotes) is an identifier pattern, not a skip pattern

-Oray_max_iter, -Oray_max_depth : bug #78

add quoted identifiers

add `make upgrade` command

tail call optimization

---
lib.noise
for-while statement
standard coding style experiments
  use [a,b,c] instead of (a,b,c)
  use let instead of where
SubCurv: sum
`var` still deprecated: can now be replaced with `local`
vectorized: <, <=, >, >=, bit
add `select`
add `equal`, `unequal`
SubCurv: matrix support, bool vec, bool32, bool32 vec
`phase` is now an array op
