Value Oriented Programming
==========================

    Curv is a _value oriented language_. All data is represented by immutable
    values. There are no mutable objects. There are no pointers or object
    references, hence no concept of object identity. Data is hierarchical,
    not cyclic. Mutable state is represented using mutable imperative
    variables, not mutable objects. This design simplifies the language,
    and makes programs easier to understand. It simplifies the implementation
    and improves performance.

Objects vs Values
-----------------
Conventional programming languages are for programming computers.
You think about the computer as a machine with state, and your goal is
to execute a series of instructions that progressively mutate that state
until you get a result. Your language lets you create and modify stateful
objects, that encapsulate bits of the machine's mutable state.

Although Curv has a low level subset that lets you think and program
this way, it's not the main purpose of the language, and we don't force
you to think this way when using Curv at a high level.

Curv is a very high level language for describing geometric shapes.
A shape, eg a tetrahedron, is not an "object", it is a pure, stateless,
immutable mathematical abstraction.

Objects vs Values
-----------------
There are two ways for a programming language to represent data:
as objects, or as values.

Objects are complicated. Objects may be mutable (although they don't have
to be), and each object has a unique 'object identity' that is fixed when
it is created, distinct from the data that it contains.

Values are simple. Values are immutable. Values do not have an 'object
identity'. A value is indistinguishable from the data it represents.

Object-oriented languages like Smalltalk, Python and Java have object
reference semantics, where the result of evaluating an expression is
a reference to an object. (Unlike C, there are no explicit pointers.)
This style predates OOP; it first appeared in Lisp.

Object/reference semantics add language complexity and cognitive load.
* Multiple equality operators. There is at least object identity
  equality vs data equality, but there are often more variants that are
  blends of the two. (In value semantics, there is only data equality.)
* Mutability is a property of object types. This creates a need to define
  mutable and immutable variants of the same abstract type. For example,
  Python has both lists (mutable) and tuples (immutable). Ruby has strings
  (mutable) and symbols (immutable). In value semantics, mutation is orthogonal
  to type, so you don't have this explosion in the number of types.
* There is also an explosion in the number of operations, where you have
  mutating and non-mutating variants of many operations. For example, to sort
  a list, Python has `sorted(a)` (non-mutating) and `a.sort()` (mutating).
* Object/reference semantics make programs harder to understand.
  These things are a burden on programmers:
  mentally keeping track of object identity;
  keeping track of shared mutable state and aliasing;
  using non-local reasoning to understand spooky action at a distance.

The worst case scenario (for added complexity and cognitive load) is when
you represent *all* data as objects. In a value-oriented language, it's a
simple fact that `2 + 2` equals `4`, no exceptions. But if numbers are
objects, it's more complicated. There may be multiple objects representing `4`
with different object identities, and programs may not treat all `4` objects
the same way. In Smalltalk-80, all data is represented by *mutable* objects,
and that's even worse. For example, executing `true becomes: false` causes
the `true` object to become indistinguishable from the `false` object,
which crashes the system.

Most object/reference languages use a hybrid of value and object semantics.
So at least true and false have value semantics in most languages.

Value Semantics
---------------
Curv has pure value semantics. This is shockingly rare in modern languages,
and it is even rarer in dynamically typed languages. I hope that through Curv,
more people will realize that there is an alternative to object semantics.

In Curv, pure value semantics mean a simpler language:
* Only 1 equality operator is needed.
* Only 1 list type is needed (we don't need different types for mutable
  and immutable lists).
* We don't need to distinguish between mutating and non-mutating variants
  of operations like 'sort' and 'reverse', and we don't lose any efficiency
  as a result.
* The semantics are much simpler, there is less complexity and cognitive
  load required to understand and write programs.

In Curv, we use mutable variables, not mutable objects, to represent
changeable state. (There are also pure functional idioms for programming
with changeable state, and these are supported as well, but imperative
mutable variables are often easier to reason about in this context.)

Curv has first class function values, which are lexically scoped closures.
And note that Curv also has mutable imperative variables. Now, if a closure
were to capture references to non-local mutable variables (as happens in
most languages), then such functions would acquire object semantics.
But Curv has pure value semantics, so this doesn't happen. Closures
have value semantics: they capture the *current value* of non-local
mutable variables, they don't capture references. This ensures that
functions are pure values, and it also means that functions are pure:
the result returned by a function depends only on the argument values.
In addition, function calls cannot have side effects, because functions
Thus, Curv's pure value semantics imply that Curv is also a pure
functional language.

Performance
-----------
Value semantics are simple, giving more opportunities to
optimize performance while simplifying implementation.

Unlike mutable objects, immutable values do not have an object identity,
so the implementation doesn't need to (expensively) maintain this identity.
Normally there is exactly one copy of a mutable object in memory, at a known
address, and that's how you maintain identity. But values can be copied.
They can be copied between the CPU and the GPU without changing their identity,
which is important in a language that tries to make the boundary between
CPU and GPU computation transparent. The representation of a value can be
changed dynamically by copying the data to a more efficient representation
based on operations performed. In Javascript and some other OOP languages,
JIT compilers can dynamically change the representation of code to speed
up execution, but it's harder to do this trick with objects, due to the
need to preserve identity.

Mutable objects must be garbage collected, which is complex and requires
global analysis. Values can be reference counted, which is simple and
local. Reference counting supports efficient update of large immutable
data structures using Copy On Write. This works with simple, well known
data structures like arrays: complex "persistent" or "functional" data
structures are not required.

Mutable objects are very expensive on a GPU, where many compute units run in
parallel with shared access to the same object, because objects must be
stored centrally and locking must be used to access them. Values are cheap,
because they can be copied to storage that is local to a compute unit.

More Ideas
----------
* Pointers are the gotos of data structures.
* Hierarchical data structures (no cycles).
* Assignment uses copy semantics, not reference semantics.
* Efficient incremental update of data structures using RC and COW.
* Variables are guaranteed disjoint (no aliasing is possible).
* Programming design patterns that are compatible with hierarchical data,
  or methodologies which encourage its use:
  * "Out of the Tar Pit" http://curtclifton.net/papers/MoseleyMarks06a.pdf
  * The first GUI (Smalltalk) was written in the first OOP language (Smalltalk).
    OOP initially became popular in the early 1980's as a way to implement
    GUIs. But now there are better ways to implement GUIs and interactive
    computer graphics, and these new methods are based on value-oriented
    programming.
    * Data Oriented Programming.
      Separate functions from data. Use generic data structures.
      Functions are free-standing and more generic, more general purpose,
      because they are not bound to a class.
      Data is structured in a way that makes it simple to process.
      Avoids complexities and maintenance burdens of object-oriented design.
      and shared mutable state via networks of mutable objects.
      This term seems to be used only by a few people, and is mostly used to
      describe what is unique about Clojure. Clojure uses functional
      data structures to achieve efficient update of immutable data structures,
      so the DOP people think this is essential. Other than the Clojure
      specific aspects, it seems to be the same as value-oriented programming.
      From video "data oriented programming in practice" 16:00 mark.
      * "data is a first class citizen" 1. Separate code from data. Don't
        encapsulate code + data into OOP objects. 2. Represent data with
        generic data structures. 3. Do not mutate data (values are immutable).
      * Functions are stateless. Do not capture program state in closures;
        keep the state outside of closures, and pass all state as function
        arguments. Reduces system complexity.
      * "Represent data with generic data structures". Don't use a
        large number of abstract types for modelling application data, plus
        functions that only work on specific ADTs. Generic operations can
        be used instead of writing a lot of boilerplate operation code
        inside the ADTs or Java classes.
      * Hierarchical data. Index data using paths, which are pure data
        (eg, can be sent over a network).
    * Data Oriented Design
      In video game programming, a form of value-oriented programming where
      you focus on the layout of data in memory and optimize for processor
      cache performance.
    * Entity component systems (used in video games).
    * Unidirectional dataflow architecture (used in some forms of FRP).
      State changes flow in one direction, parent to child.
      Immutable values, pure functions, acyclic data enable:
      ease of debugging, easy undo, time travel debugging.
      * Lager UI framework
