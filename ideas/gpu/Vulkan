Right now, Curv uses OpenGL. Should I use another API, like Vulkan?

Here are the platforms that I might want Curv to support:
* Linux
* macOS
* Windows WIN32
* Windows UWP?
* Android
* Web, via WebAssembly

(No RaspberryPi, because there is no compute shader support.)
(No iOS, because the App Store restrictions are incompatible with the
principles and practices of Open Source software.)

And here are the APIs supported by these platforms:
| Linux         | GL  EGL  Vulkan
| macOS         | GL*      Vulkan* Metal
| Windows WIN32 | GL  EGL  Vulkan        DX12
| Windows UWP   |     EGL*               DX12
| Android       |     EGL  Vulkan
| Web           |     EGL

There is no universal GPU API that works on all platforms.
Notes:
* OpenGL is deprecated in macOS, and is an old version that doesn't support
  compute shaders. Vulkan is emulated using Metal by MoltenVK.
* Microsoft doesn't support OpenGL or Vulkan in UWP apps.
  ANGLE can be used to get an EGL API. There is a Vulkan portability
  initiative that may eventually emulate Vulkan on DX12 for Windows.
* EGL (OpenGL ES) is mostly a subset of OpenGL, with some API differences.
  On Linux, the EGL library supports offscreen rendering without an X server.
  It's probably not too hard to maintain a mixed GL/EGL code base.
  Newer versions of EGL have compute shaders, are probably capable enough
  to support Curv. I only need a subset of OpenGL anyway, although I
  don't know what that subset is yet.
* WebGL and compute shaders.
  * Firefox 51 added WebGL 2. Chrome 56 added WebGL 2 (Mar 2017).
  * EGL 3.1 has compute shaders. WebGL 2 is based on EGL 3.0. But compute
    shaders may also be available in WebGL 1 and 2 as an extension
    (ARB_compute_shader).
  * On Ubuntu 16.04, I'm running Firefox v61. Consulted about:support and
    about:config. WebGL 2 and ARB_compute_shader are available.
    And this webgl2 demo works: https://playcanv.as/e/p/44MRmJRU/
  * The "WebGL 2.0 Compute specification" proposes to add EGL 3.1 compute
    shaders to WebGL 2.0, while possibly losing some backward compatibility
    with WebGL 2.0. (Not definite: the spec is under construction.)
    Seems to be a Google/Intel thing.
    https://docs.google.com/document/d/1EwhDJO_lBH1mGMMwheQUXGhhFk9yoC98Ant3TPqwmmA/view
    macOS would not be supported:
    https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/bPD47wqY-r8
    This won't be implemented, in favour of WebGPU?
    Meaning no ARB_compute_shader extension in Chrome?
  * "Obsidian" was a Mozilla proposal, but now they are doing WebGPU.
  * "WebGPU" will replace WebGL and its extensions with something resembling
    Metal. Has a clean object oriented API, unlike the OpenGL shitstorm.
    Proposed by Apple, endorsed by Google Chrome, Firefox, Microsoft Edge.
    https://webkit.org/blog/7380/next-generation-3d-graphics-on-the-web/
    Google Chrome committed to implementing it June 2018.
    Mozilla is working on it? https://github.com/kvark/webgpu-servo
    The API hasn't been agreed on. Working on high level concepts, scope.
    https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/dxqWTSvyhDg
    The Chromium Blink rendering engine will implement WebGPU on top of Vulkan,
    DX12 or Metal.

WebGPU sounds awesome. Be nice if there was a corresponding C++ or Rust 
library providing a common API on Linux/Mac/Windows/Android.
The open source browser makers will need this?
* Firefox/Servo: https://github.com/gfx-rs/gfx Based on Rustified Vulkan.
* Chrome/Blink: ?? just a small amount of stub code is in the repo

So a sane, reliable, cross platform GPU API is still years in the future?

For now, I should target a mix of GL and EGL, and not look further until
I need to target a different API, either for its capabilities, or for its
platform support.

On macOS, I need to target either Metal or Vulkan if I want compute shaders.
* Dev machine: Have a late 2012 Mac Mini, Intel HD Graphics 4000.
  Supports Mohave 10.14. Supports Metal 2.
* Is there an open source macOS web browser that supports compute shaders?
  If so, maybe it has an EGL emulation lib that runs on top of Metal?
  Unlikely this exists. First, test browsers on Mohave.
* If not, I need to support Metal or Vulkan to get compute shaders on macOS.
  Probably Vulkan, since it is cross platform.

* Vulkan has higher performance than GL/EGL for certain kinds of applications
  (video games), where you are dynamically adding and modifying assets in the
  GPU while the animation is running: Vulkan increases the CPU-GPU bandwidth.
  Curv doesn't rely on this at all right now. Until I specifically need
  Vulkan either for its capabilities or for its platform support, I should
  ignore it.

Right now, if I want compute shaders on all GPUs that support it (2012+),
I could support a combo of OpenGL 4.3 and Vulkan. Later, Vulkan support will
catch up and support all the same hardware.
* my 2010 Macbook Air doesn't support compute shaders.
* If I support OpenGL/Vulkan, then Vulkan is only needed for macOS.

Due to Vulkan bugginesss, the conservative path to compute shaders is:
* Drop macOS for now. Get a Linux (or Windows) laptop, do Windows+Linux dev.
* Switch to OpenGL 4.3
* Add an experimental Vulkan backend (and add macOS support)
* Drop the OpenGL backend once the Vulkan backend works on all platforms.

macOS: use MoltenVK (open source implementation of Vulkan using Metal).
linux, windows: Vulkan is supported by modern GPUs.
Raspberry pi 3: nope (and OpenGL is stuck at 2.1).

macOS is stuck at OpenGL 4.1, which is deprecated by Apple and poorly supported.
No compute shaders.
MoltenVK supports compute shaders as of Molten 0.19.0, released 2017/11/06.

Vulkan isn't supported by older GPUs.
* my 2010 MacBook Air doesn't support Metal.
* nTopology requirements?
  * How many GPUs support OpenGL 4.3 but not Vulkan?
    Intel/Windows added OpenGL 4.3 June 2014 for Haswell(Jun2013).
    But Vulkan is Skylake(Aug2015), until gfx-rs/portability is ready.
    In the long term, it's the same.
    http://www.geeks3d.com/20140630/intel-hd-graphics-drivers-v10-18-10-3652-with-opengl-4-3-support/

Vulkan benefits:
  A higher level of base functionality.
  So I can rely on a larger set of capabilities, without writing
  platform dependent code.

Vulkan drawbacks:
* Lots of perfectly good old computers don't support it.
  * In general, GPU hardware released in 2012+ will work, except Intel+Windows
  * macOS Metal: hardware must be 2012 or later.
    https://support.apple.com/en-us/HT205073
  * Nvidia: March 2012+ Windows/Linux via Nvidia driver
  * AMD: Windows: Jan 2012+. Linux: Aug 2014+ (Jan 2012+ via AMDVLK)
  * Laptops with Intel graphics?
    Windows: Skylake (Aug 2015) and up (Intel driver). No Broadwell or earlier?
    * gfx-rs/portability has a DX12 backend (Haswell June 2013 and up)
      Windows 10 only. Not ready yet.
    Linux: Ivy Bridge (Apr 2012) and up (Mesa Anvil driver).
  * http://store.steampowered.com/hwsurvey/videocard/
* It's still bleeding edge.
  * Ubuntu 16.10: Vulkan not installed by default, available in Universe.
  * AMD open sourced their Vulkan driver for Ubuntu/Windows on Dec/2017.
    https://github.com/GPUOpen-Drivers/AMDVLK
  * Qt 5.10 added basic Vulkan support in Dec/2017.
    (Ubuntu 18.04 provides Qt 5.9.4)
* It's probably buggier than OpenGL 4.3. From skia.org:
  "Skia has a Vulkan implementation of its GPU backend. The Vulkan backend
  can be built alongside the OpenGL backend. The client can select between
  the OpenGL and Vulkan implementation at runtime. The Vulkan backend has
  reached feature parity with the OpenGL backend. At this time we find that
  many Vulkan drivers have bugs that Skia triggers for which we have no
  workaround. We are reporting bugs to vendors as we find them.


-------
The Vulkan Portability Initiative
https://www.khronos.org/blog/khronos-announces-the-vulkan-portability-initiative
will deliver a subset of Vulkan that runs on all modern platforms,
including macOS/Metal and Windows/Direct X 12.
* https://github.com/gfx-rs/portability
* https://github.com/KhronosGroup/MoltenVK

Wait until most people have Vulkan capable GPUs.
The Steam hardware survey is one way to gauge this.
http://store.steampowered.com/hwsurvey/videocard/

If I compile Curv into SPIR-V, does this speed up shader/compute
kernel compilation?
* with Vulkan Portability, that might be platform dependent.

Vulkan will eventually unify graphics and general purpose compute.
OpenCL will eventually be merged into Vulkan.

The Vulkan API is super complex, so I may need to use middleware.
