Should I use Vulkan? Long term, Yes.

Right now, if I want compute shaders on all GPUs that support it (2012+),
I could support a combo of OpenGL 4.3 and Vulkan. Later, Vulkan support will
catch up and support all the same hardware.
* my 2010 Macbook Air doesn't support compute shaders.
* If I support OpenGL/Vulkan, then Vulkan is only needed for macOS.

Due to Vulkan bugginesss, the conservative path to compute shaders is:
* Drop macOS for now. Get a Linux (or Windows) laptop, do Windows+Linux dev.
* Switch to OpenGL 4.3
* Add an experimental Vulkan backend (and add macOS support)
* Drop the OpenGL backend once the Vulkan backend works on all platforms.

macOS: use MoltenVK (open source implementation of Vulkan using Metal).
linux, windows: Vulkan is supported by modern GPUs.
Raspberry pi 3: nope (and OpenGL is stuck at 2.1).

macOS is stuck at OpenGL 4.1, which is deprecated by Apple and poorly supported.
No compute shaders.
MoltenVK supports compute shaders as of Molten 0.19.0, released 2017/11/06.

Vulkan isn't supported by older GPUs.
* my 2010 MacBook Air doesn't support Metal.
* nTopology requirements?
  * How many GPUs support OpenGL 4.3 but not Vulkan?
    Intel/Windows added OpenGL 4.3 June 2014 for Haswell(Jun2013).
    But Vulkan is Skylake(Aug2015), until gfx-rs/portability is ready.
    In the long term, it's the same.
    http://www.geeks3d.com/20140630/intel-hd-graphics-drivers-v10-18-10-3652-with-opengl-4-3-support/

Vulkan benefits:
  A higher level of base functionality.
  So I can rely on a larger set of capabilities, without writing
  platform dependent code.

Vulkan drawbacks:
* Lots of perfectly good old computers don't support it.
  * In general, GPU hardware released in 2012+ will work, except Intel+Windows
  * macOS Metal: hardware must be 2012 or later.
    https://support.apple.com/en-us/HT205073
  * Nvidia: March 2012+ Windows/Linux via Nvidia driver
  * AMD: Windows: Jan 2012+. Linux: Aug 2014+ (Jan 2012+ via AMDVLK)
  * Laptops with Intel graphics?
    Windows: Skylake (Aug 2015) and up (Intel driver). No Broadwell or earlier?
    * gfx-rs/portability has a DX12 backend (Haswell June 2013 and up)
      Windows 10 only. Not ready yet.
    Linux: Ivy Bridge (Apr 2012) and up (Mesa Anvil driver).
  * http://store.steampowered.com/hwsurvey/videocard/
* It's still bleeding edge.
  * Ubuntu 16.10: Vulkan not installed by default, available in Universe.
  * AMD open sourced their Vulkan driver for Ubuntu/Windows on Dec/2017.
    https://github.com/GPUOpen-Drivers/AMDVLK
  * Qt 5.10 added basic Vulkan support in Dec/2017.
    (Ubuntu 18.04 provides Qt 5.9.4)
* It's probably buggier than OpenGL 4.3. From skia.org:
  "Skia has a Vulkan implementation of its GPU backend. The Vulkan backend
  can be built alongside the OpenGL backend. The client can select between
  the OpenGL and Vulkan implementation at runtime. The Vulkan backend has
  reached feature parity with the OpenGL backend. At this time we find that
  many Vulkan drivers have bugs that Skia triggers for which we have no
  workaround. We are reporting bugs to vendors as we find them.


-------
The Vulkan Portability Initiative
https://www.khronos.org/blog/khronos-announces-the-vulkan-portability-initiative
will deliver a subset of Vulkan that runs on all modern platforms,
including macOS/Metal and Windows/Direct X 12.
* https://github.com/gfx-rs/portability
* https://github.com/KhronosGroup/MoltenVK

Wait until most people have Vulkan capable GPUs.
The Steam hardware survey is one way to gauge this.
http://store.steampowered.com/hwsurvey/videocard/

If I compile Curv into SPIR-V, does this speed up shader/compute
kernel compilation?
* with Vulkan Portability, that might be platform dependent.

Vulkan will eventually unify graphics and general purpose compute.
OpenCL will eventually be merged into Vulkan.

The Vulkan API is super complex, so I may need to use middleware.
