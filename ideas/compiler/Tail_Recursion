Tail Recursion Optimization
===========================
What are the minimal changes required to the current evaluator?
(We don't yet support single stepping in a hypothetical debugger.)

Expressions that are in tail position:
* Top level of a program.
* Body of a lambda.
* If a let/where/do is in tail position, then so is its body.
* If an if-then-else is in tail position, then so are its then and else exprs.

Add a new method, Operation::tail_eval(), which defaults to calling eval()
in most cases.
If you tail_eval a function call, then you don't push a new Curv stack frame,
and you also do not push a new C++ stack frame.

Normal eval() is 'Value eval(Frame&)'.

New design, based on my previous design for a CPS based VM.
-----------------------------------------------------------
The Frame now contains new VM registers:
* 'const Operation *next_op_',
* 'Value result_', to which is stored the result of a tail call.

The new interpreter is now a loop that invokes the current instruction,
referenced by the IP.  Each instruction is responsible for advancing the IP,
and possibly for replacing the current Frame with another one.

    void Operation::tail_eval(unique_ptr<Frame>&) const

    Value evaluate(unique_ptr<Frame> f)
    {
        while (f->next_op_ != nullptr)
            f->next_op_->tail_eval(f);
        return f->result_;
    }

The Operation::tail_eval method:
* Reads dynamic arguments from the Frame, and static arguments from the
  Operation.
* Performs a computation, usually producing a result, sometimes causing
  side effects.
* "calls its continuation", which means storing result values in the frame,
  updating `f->next_op_` to point to the next Operation, sometimes replacing
  the frame stack with the frame of its continuation.

Program::eval()
    frame_->next_op_ = &*expr_;
    return evaluate(frame_);

Operation::tail_eval(unique_ptr<Frame>& f) // default implementation
    f->result_ = eval(f);
    f->next_op_ = nullptr;

Call_Expr::tail_eval(unique_ptr<Frame>& f)
    eval function
    eval argument
    f = make frame
    fun->tail_call(arg, f)

Value Call_Expr::eval(Frame& f)
    eval function
    eval argument
    f2 = make frame
    fun->tail_call(arg, f2)
    return evaluate(f2);

Closure::tail_call(Value arg, unique_ptr<Frame>& f)
    f->nonlocals_ = &*nonlocals_; // TODO: dangling pointer risk?
    pattern_->exec(f->array_, arg, At_Arg(*this, *f), *f);
    f->next_op_ = &*expr_;        // TODO: dangling pointer risk?

If_Else_Op::tail_eval(unique_ptr<Frame>& f)
    ...
    if (cond.is_bool()) {
        if (cond.to_bool(cx))
            f->next_op_ = &*arg2_;
        else
            f->next_op_ = &*arg3_;
        return;
    }

Truncated Stack Traces
----------------------
So I implemented this, and noticed that stack traces now have missing
elements. The concern is that this will impact debugging, by making stack
traces harder to use due to discontinuities.

Javascript ES6 introduced a requirement for tail call elimination,
and there was pushback (Chrome implemented it, then reverted the changes).
This counterproposal was written:
    https://github.com/tc39/proposal-ptc-syntax
This was a bad idea; it wasn't added to Javascript, and would also be bad
for Curv.

Lua has tail call elimination. I found a forum discussion with instructions
on how to disable it by hacking the compiler, so that you can debug programs.

Is there a way to make stack traces more useful while still keeping the
good bits of tail call optimization? Let's set out some requirements.

First, consider programs that do not treat functions as value: they are not
passed as arguments, returned as results, or stored in data structures.
For this subset of programs,
* If a program contains no recursion, then no tail call frames are elided.
  Stack traces are the same as you expect in an imperative language.
* If there is recursion, then for a tail call to a recursive function,
  within a recursive function, the new stack frame is elided.

Next, consider programs that treat functions as data (this is a characteristic
of functional programming style). Consider tail calls where the identity
of the function is not determined until run time. These function calls might
be part of a tail recursive loop, but as a first approximation, we don't know.
So to be safe, the frames for these tail calls are elided.

These rules try to achieve two goals:
1. We guarantee that tail-recursive loops will not blow up the stack.
2. Imperative-style programs will have imperative-style stack traces,
   except in cases where this violates goal 1.
