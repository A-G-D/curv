New GL Compiler
===============
This is a large project to improve the GL compiler:
* Expand the subset of Curv useable in GL code.
  * Functions with record arguments.
  * Call a library shape constructor from a GL compiled function.
  * Static aggregate data (arrays and structs) for table driven dist functions.
* Support image import.
* Support GUI value pickers for parametric shapes.
* `sRGB` is overloaded over Vec3 and Vec4, and called from colour functions.
* Secondary goal: better compile time error messages.
* Secondary goal: visibility and control over GL compiler output.
* Deferred goal: If time is not used, set -Olazy=true.
* Deferred goal: Optimized GLSL code, to support the Mesa GPU driver.

New GL Compiler
---------------
Two phases.
* First phase:
  * type inference
  * partial evaluation
  * generate a sequence of non-recursive definitions in dependency order.
  Values are represented by IR trees.
  Records lowest GLSL version that will work for this code.
* Second phase, generate GLSL or C++ from the tree representation.
  Outputs GLSL #version when appropriate.

Can generate definitions for the following cases:
* On first use of infinity, generate a definition for it, eg GLSL:
    #version 410
    const float inf = 1.0 / 0.0;
* Image reference, from `file "foo.png"`.
* Uniform variable, from parametric shape.
* Aggregate value (array or struct), turns into global const variable.
* Monomorphic non-recursive function.
* Compile a shape record into a set of definitions.

An IR tree can represent intermediate values that are not GL compatible.
An IR tree can be partially evaluated to infer more specific expression types
and to eliminate non-GL-compatible expressions:
* constant folding
* dead code elimination
* inlining calls to polymorphic functions
* abstract evaluation of a[i] and r.f
* if (true) a else b => a

Other optimizations that could help make Curv work with the Mesa GPU driver:
(deferred; future work)
* common subexpression elimination
* algebraic identities/strength reduction

An IR tree is an Operation tree, but changes are needed.

Type Inference
--------------
* Static operation types (expr,elem gen,field gen,action) would help.
  In order to have static expression types, we need to know which operations
  are expressions. Also, for abstract evaluation of (x,y,z)[1]
  it helps to know if x is an Expr.
  * We also know that static operation types can be used to generate
    higher quality error messages (get rid of "not an operation" error).
* Static expression types are needed,
  * To determine if a function value is monomorphic, so that it can be emitted
    as a function def.
  * For pattern matching a non-const expression argument.
  * Maybe they are useful for generating better error messages?
* Expression types cover the full range of Curv values, and cover the full
  range of GL static types, which will now include monomorphic arrays,
  structures, and functions.
* An Expression type is a set of values. The set of expression types form a
  lattice.
  * `All` is the set of all values, the union of all expression types.
  * `None` is the empty set, the type of a call to `error`. We could also store
    a Location. If the top level expression of a program has type None, then
    we issue a compile time error indicating the Location where it fails.
  * Single(value) is the type of a constant expression.
  * Null, Bool, Num, String.
  * List(count,elemtype)
  * Tuple[Type1,Type2,Type3]
  * Record(fieldname to type map)
  * Fun(argtype,resulttype)
  * An ambiguous expression like (1,2,3) can be either a Vec3 or an array
    of numbers. It can be both in the same program: the code generator can
    make two copies of the value, one to use in an array context, and one to
    use in a Vec3 context.
* The List and Record types must rich enough to match what is supported
  by List and Record patterns.
  * If we add a [x,y,...] pattern then we need
    a corresponding [Type1,Type2,...] type.

Compiler Mechanisms
-------------------
What's the minimum set of compiler mechanisms I need to call a shape library
constructor from a GL compiled function?

Abstract Interpretation of a shape expression S yields a type, which can be
checked to ensure that it is a shape record.
Then we Partially Evaluate the expressions S.dist and S.colour and generate
GL functions. The type annotations guide partial evaluation and code generation.

Can Abstract Interpretation, Partial Evaluation, function call inlining,
all be combined in a single Abstract Evaluation pass which maps IR to IR?

Consider box[a,b,c].
* box is a record value, captured by a closure.
* [a,b,c] is a non-constant expression, maybe containing param refs.
* box[a,b,c] => box.call[a,b,c]
* box.call is a function value F, so we have F[a,b,c].
* F is:
    F a = a >> match[pat1->..., pat2->..., pat3->...]
  One of those patterns is (is_vec3 b).
* A function call, when the function is a constant, is inline expanded to a let
  expression, where parameter references are remapped to local variable
  references.
* So we get
    let a' = [a,b,c];
    in a' >> match[pat1->..., pat2->..., pat3->...]
* The body of the `let` is a function call to a `match` expression.
  We inline expand this by attempting to match the argument expression against
  each argument of `match`.
* Pattern matching expression 'arg' against a pattern:
  * If arg is a constant, match it directly.
  * Otherwise, infer the type of arg, and match the type against the parameter
    pattern.
  * If arg has a GL type, then either we can complete the pattern match at
    compile time, or if we are searching a `match` list, then we can generate
    an if-else chain and then see if that has a GL type.
  * Otherwise, there isn't a GL type. But maybe the arg is a list or record,
    and the pattern is a list or record. Then we deconstruct the arg by
    constructing 'arg[i]' or 'arg.f' IR expressions, and then simplifying
    those expressions, with the hope of simplifying down to a GL compilable
    expression. This simplication is easy if 'arg' is a list or module
    constructor, but could otherwise lead to code duplication of parts of 'arg',
    similar to inline expanding calls to functions that don't have GL types.

* Pattern matching a' against (is_vec3 v):
  * a' has type [Ta,Tb,Tc]. Let's say that Ta,Tb and Tc are all Num.
  * is_vec3 x =
      is_list x && count x == 3 && is_num(x[0]) && is_num(x[1]) && is_num(x[2]);
  * `is_list x` partially evaluates to `true`
  * `count x` partially evaluates to 3
  * `count x == 3` partially evaluates to true
  * x[0] has type Num
  * is_num(x[0]) partially evaluates to true
  * yielding: true && true && true && true && true
  * yielding: true, so the pattern matches.

* Pattern matching a' against [x,y,z]:
