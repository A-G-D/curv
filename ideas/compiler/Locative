Locatives
=========
The idea is to support compound assignment statements like
    a[i].f := x
My initial goal is for SubCurv to match the features of GLSL.

'a[i].f' is a Locative.

Assignment_Action contains a Locative and an Expression.
void Locative::store(Value) stores a value at run time.

I've got two choices:
1. Use a special analyser to analyse Locatives.
   That's based on what we have now, where env.lvar_lookup() is used
   to analyse a locative.
2. Locative is a subtype of Expression. Bottom up semantic analysis:
   := analyses its left argument in a general way, then checks if it is
   a Locative.
   * This is more complicated to implement, given how the existing code works,
     and provides no benefit, since there will never be abstraction over
     locatives: they can't be passed as parameters or returned as results, etc.

So use choice 1.

Typed Locatives
---------------
A Locative can be typed, and can enforce that the right side of := has the
same type as the left side.
* I need this for the magic `render` variable in the REPL.
* The Shape Compiler already does this, since SubCurv variables are typed.
  The type is inferred from the variable's initial value.

Should we make typed locatives a general feature of Curv?
This syntax:
    let x :: is_num = 3;
    in do x := x + 1;
    in x
seems to be a syntax for defining a typed variable.

All assignments of the same local variable should contain the same Locative
object, which carries the variable's type and location.
Which means Environ::lvar_lookup should return a Locative.

Do record values contain field types, enforced when a field is updated?
Given `a = {x :: is_num = 3}`,
does `a.x := y` enforce the `is_num` constraint on `y`?
This means a module dictionary contains field types. And these field types
will need to be shown when a module value is printed.

Locative Patterns
-----------------
Maybe I should support
    (a, b) := x
This is a low priority; I don't need it for porting GLSL code.
