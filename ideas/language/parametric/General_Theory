General Theory of Parametric Values
===================================
A parametric value is a record or function that remembers how it was
constructed. This generalizes parametric records, prototypes, and terms
into a common framework.

(1) parametric record
Remembers its constructor function and its constructor argument.
Use case: the customizer: tweak parameters using sliders.

(2) prototype
A 'prototype' is a parametric record R that is callable like a function.
When you apply R to an argument, you are really calling R's constructor.
This lets you clone the record with modified parameters using function call
syntax, like OpenSCAD2. Eg, like 'box' and 'cube' in the standard library.
This allows you to construct prototypical shapes without specifying an argument,
and is inspired by prototype oriented programming.
* Use the -D command line option to modify the shape, like in OpenSCAD?
  The design for -D requires the constructor argument to be a record.
  Let's lose this restriction.

(3) term
A term is a record or function that prints as a constructor expression.
Use cases:
* Printing a high level representation of the value.
* Preserve the CSG tree of a shape, for high level processing.
* Application-level types: pattern matching, high level equality,
  typeful programming.

Parametric Records
------------------
The current design for `parametric` requires the argument to be a record.
This conflicts with my desire to convert standard library shapes like `cube`
into parametric shapes. Either I need to consistently use record arguments
in the standard shape library, or I need to generalize the parametric record
constructors to support non-record arguments (like numbers and vectors), and
I need to extend the viewer to display a picker for such parametric shapes.

For example, `cube` is a parametric shape, with default argument `2`.
How do I construct a parameteric record with a number (rather than record)
as a parameter? Something like this:
    cube = parametric(d :: scale_picker = 2) box(d,d,d);
vs
    parametric{def1, def2, ...}
which uses a record argument.

In practice, I use records to group multiple arguments.
But for a single argument, I just pass it directly, as it is terser.
`parametric` can use the same convention if there is a single parameter.
If a parametric record P has one parameter, then:
* P.constructor accepts `{name:val}` or `val` as an argument.
  The former is compatible with -D. The latter is compatible with shape library
  parameter conventions. So P.constructor is a piecewise function.
* P.argument is `{name:val}`, not `val`. So `cube` prints as `cube{d:2}`,
  not as `cube 2`, once `cube` is a parametric term. Parametric shapes are
  printed in verbose form, showing all of their parameter values, even if some
  of these are same as default, and also showing all parameter names.
* The viewer now needs to deal with P.constructor if it is piecewise.
  It finds the parameter pattern that matches P.argument.
* With this design, no additional metadata is needed,
  and no additional language complexity is needed.

Alternately, `cube` is overloaded over `cube n` and `cube{d:n}`. The former
syntax is forwarded to the latter; the latter yields a parametric shape.
So, we don't need to extend `parametric` with this special case.

A parametric record's constructor should return another parametric record
of the same type.

`curv -Dname=val foo.curv` overrides the value of a shape parameter.
* Mimics a feature of OpenSCAD.
* Implemented as `curv -x 'file "foo.curv" {name=val}'`.
* prototypes: R is record, R(x) searches for R.call then R.constructor
* Parametric record's constructor returns another parametric record.
* Single-parameter parametric-record's constructor accepts either
  `{name=val}` or `val` as an argument.

Metadata
--------
By characterizing the metadata, we describe the set of all possible
parametric value configurations.

The metadata matches one of the following three possibilities:

(1) The value was constructed by calling a function.
    The metadata is `constructor` and `argument`.
    (1p) If this value is also a record, and is a prototype,
         then the `call` field is an alias for the `constructor` metadatum.

(2) The value was constructed by field selection from a parent record.
    The metadata is `parent` and `name`.
    * `parent` is a record containing just the metadata for the parent
      record, to avoid circular reference.
    * `name` is the fieldname within parent, and is a string.

(3) The value has a name, is the head of a term.
    The metadata is `name`, a string.

The `constructor` and `parent` metadata fields form a chain or linked list.
If this chain terminates at a parametric value with a name, then we have found
the head of a term.

Parametric values without a head are not terms, and are dubbed 'anonymous'.

Syntax
------
We need syntax for constructing all of the different variants
of a parametric value, as enumerated in the metadata model.
I'll skip prototypes for now; variants are:
    f1a, f1t, r1a, r1t
    f2a, f2t, r2a, r2t
    f3, r3
where 'a' and 't' are anonymous and term variants.

Given an ordinary function definition F in a record constructor R,
* If R is a parametric value, then F's metadata is `parent`=R, `name`.
  Variant f2. If R is anonymous, f3a; if R is a term, f3t.
* If R is not a parametric value, then F's metadata is `name`.
  Variant f3.
If F is curried, then partial applications of F are parametric values
with `constructor` and `argument` metadata. Variants f1a and f1t.

`parametric <parameters> in <record expression>` (per issue #62)
constructs a parametric record. In isolation, variant r1a, and the `constructor`
function has no metadata.
If used on the right side of a definition within a record constructor,
then the `constructor` function acquires metadata.
* Data definition, with a single identifier pattern Id on the right side:
  The `constructor` function gets `name`=Id metadata. Variant r1t for the
  record, and its constructor has variant f3.
* Function definition F.
  The `constructor` function gets `constructor`=F,`argument` metadata.
  The record's constructor has variant f1a or f1t based on F.

Missing so far: r2, r3.

Record Metadata Syntax
~~~~~~~~~~~~~~~~~~~~~~
Note: a function definition is
    f x = x + 1
    f = x -> x + 1
    f = match [x -> ...; ...]
A data definition with function constructor syntax on the right side is enough
to create metadata. No special annotation syntax is required.

By analogy, a record definition is
    Rc = { ... }
    Rp = parametric ... in ...
If a record definition is contained within a parent record constructor PR,
* If PR is not a parametric value, then Rc's metadata is `name`=Rx, variant r3.
  Rp.constructor's metadata is `name`=Rx, variant f3.
* If PR is a parametric value, then Rc's metadata is `name`=Rx,`parent`=PR,
  variant r2.

If we have function constructor syntax, and the function body is
{...} record constructor syntax, then the constructed record has r1 metadata.

But, I need to be careful about which record constructor syntax I magically
add metadata to. If metadata fields are ordinary record fields, then I
definitely don't want to do this for {a: 1, b: 2} style records, which are
used to provide labelled arguments to functions.
But maybe it's okay for 'module' records, {a=1; b=2;}.

Let's define a 'module' as a record that is used to represent a library,
or to represent an instance of a named application data type like 'shape'.
Modules can contain parametric metadata. I need syntax for a module literal
(to which metadata can be implicitly added as extra record fields).
 * {a=1; b=2;}
 * module {a=1; b=2;}
I also need a naming convention for metadata fields, one that avoids name
collisions.
 * constructor, argument
 * CONSTRUCTOR, ARGUMENT
   Use `CALL` instead of `call` if we use this convention
   for naming magic record fields.
 * meta.constructor, meta.argument
   In directory syntax, metadata fields would be defined by
   a `meta.curv` file. We could also put package metadata here, eg
   author and licence.

It should be possible to use record comprehensions to build a module.
The `...` spread operator can be used for a kind of inheritance, where one
module is defined as changes to another module. This argues in favour of an
explicit keyword for marking a module.

Prototypes
----------
A 'prototype' is a parametric record R that is callable like a function.
When you apply R to an argument, you are really calling R's constructor.
This lets you clone the record with modified parameters using function call
syntax, like OpenSCAD2. Eg, like 'box' and 'cube' in the standard library.
This allows you to construct prototypical shapes without specifying an argument,
and is inspired by prototype oriented programming.

Perhaps the simplest design is to change the semantics for calling a
record like a function. First, we check if the record has a `call` field.
If not, we check if it has a `meta.constructor` field. With this design,
we get prototypes almost for free.

Some parametric records are not prototypes: they have a `call` field which
is different from their `meta.constructor` field. These things are "extended
functions" whose primary use is to be called as a function, but which have
additional fields beyond the `call` field to provide additional features.

Primitive Shapes are Parametric
-------------------------------
Let's say that all primitive shapes in the standard library are parametric.
What's missing from this design that would let me do that?

If the API is:
    cube
    cube d
then define
    cube = parametric d :: scale_picker = 2 in box(d,d,d)
This relies on the extension of `parametric` that treats single-parameter
precs specially. Without this extension, use:
    cube = match [
        d :: is_num -> cube{d:d};
        parametric d :: scale_picker = 2 in box(d,d,d);
    ];
This relies on support for recursive `match`.

If the API is:
    cube
    cube(d)
    cube.mitered
    cube.exact
    cube.mitered(d)
    cube.exact(d)
Then define:
    cube = let
        exact = parametric d :: scale_picker = 2 in box.exact(d,d,d);
        mitred = parametric d :: scale_picker = 2 in box.mitred(d,d,d);
    in {
        ... exact;
        exact : exact;
        mitred : mitred;
    };
I don't need a `call` field, I get one for free from the "prototype" mechanism.

In the above design, `cube(d)` does not have `exact` or `mitred` fields.
I can fix this:
    cube = let
        exact = parametric d :: scale_picker = 2 in
          { ... box.exact(d,d,d);
            exact : exact d;
            mitred : mitred d;
          }
        mitred = parametric d :: scale_picker = 2 in
          { ... box.mitred(d,d,d);
            exact : exact d;
            mitred : mitred d;
          }
    in exact;

With this version, if you display an exact cube in the viewer, you do not have
a picker that lets you switch to the mitred version (or vice versa).
 1. Let's say that, internally, a fully parameterized invocation of `cube`
    looks like this:
        cube{exact:{d:2}}
        cube{mitred:{d:2}}
    The other constructor syntax is sugar for this.
    Then we extend the picker gui to support record-encoded algebraic types.

Piecewise Primitive Shapes
--------------------------
half_space =
    match [
    {d, normal: n} -> impl(d*n,n);
    [a, b, c] -> impl(a, normalize(cross(b-a,c-b)));
    {at: a, normal: n} -> impl(a,n);
    ]
where (
    impl(a,n) = // a is point on boundary, n is unit normal
        make_shape {
            dist(x,y,z,_) = dot(-n, a-[x,y,z]);
            bbox = [ [ if (n[Y]==0 && n[Z]==0 && n[X]<0) a[X] else -inf,
                       if (n[X]==0 && n[Z]==0 && n[Y]<0) a[Y] else -inf,
                       if (n[X]==0 && n[Y]==0 && n[Z]<0) a[Z] else -inf, ],
                     [ if (n[Y]==0 && n[Z]==0 && n[X]>0) a[X] else inf,
                       if (n[X]==0 && n[Z]==0 && n[Y]>0) a[Y] else inf,
                       if (n[X]==0 && n[Y]==0 && n[Z]>0) a[Z] else inf, ] ];
            is_3d = true;
        };
);

Primitive Shapes are Terms
--------------------------
I want `cube` to be a term. How is it defined, how is a cube printed?
The above definition doesn't have the right syntax to be automatically
converted to a term. I guess I need special syntax after all. Eg,
    term cube = let
        exact d = parametric ...;
        mitred d = parametric ...;
    in {
        ... exact 2;
        call : exact;
        exact : exact;
        mitred : mitred;
    };
