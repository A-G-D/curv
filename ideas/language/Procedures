A procedure is a lambda-abstraction of a statement.

Benefits:
* Make it possible to replace any use of `for` with tail recursion.
* Make it possible to use `match` in any context where `if` is legal.
  Eg, in a list comprehension.
* Once I have an interactive debugger, and a rich set of actions for
  controlling the debugger, then procedures are used as debugger scripts.
* print, error, warning, assert become values.
* Another step in making it easier to port imperative code?

Technical Challenge: The REPL.
------------------------------
It ought to be possible to call any procedure or function from the command line
and see what it does.

Problem:
  Right now, I analyze a command line to a Definition or an Operation.
  For operations, I call the generate method, which fails for a field generator.
  Generate works for expressions, actions and element generators.

Solution:
* Currently, Operation has 4 methods: eval(), exec(), generate(List_Builder&)
  and bind(DRecord&). These are replaced by: eval(), exec(Consumer&).
* Consumer::put_value(Value,cx) is called to output an element value.
* Consumer::put_binding(Symbol,Value,cx) is called to output a field binding.
* expression.exec(c) calls c.put_value(result).
* The list constructor Consumer only consumes element values.
* The record constructor Consumer only consumes field bindings.
* The action Consumer (used by `do`) fails on put_value or put_binding.
* The REPL now calls exec() on an operation. The REPL Consumer supports both
  put_value and put_binding. In most cases, the value or binding is printed on
  the console. If there is 1 put_value and no put_binding calls, then I test
  if the value is a shape, and display the shape graphically.

This design fixes a bug in the REPL, and also eliminates code duplication
among exec, generate & bind methods.

Philosophical Challenge: Two ways to do it.
-------------------------------------------
Under this proposal, there are two ways for a function to return a sequence
of values: either by returning a single list value, like this:
    iota n = 1..n;
or by generating a sequence of values, like this:
    gen_iota n = ...(1..n); /* or */
    gen_iota n = for (i in 1..n) i;

During the pre-Curv design process (OpenSCAD2), I explicitly did not want to
support two ways for a function to return a sequence. I didn't want to
encourage fragmentation of library APIs, where you have to know which of the
two protocols was being used, and then possibly write glue to convert between
the two protocols, either '...iota n' or '[gen_iota n]'.

So now I have generators, which are phrases that generate a sequence of values.
Consider generators in Icon, or generators in Python.
I'd rather have lazy lists (like Haskell) instead.

There is no way to directly iterate over a generator. You have to
capture the output in a list or record first. Does this mitigate the problem,
by deterring the use of generator procedures in libraries?

"If you only have a hammer, then every problem looks like a nail."
Element generators will have a performance advantage over lists, in the
case where you are incrementally accumulating a list of values, eg 1 per
function call, due to the O(N) cost of list concatenation.

Proposal: Procedure Call Syntax
-------------------------------
Maybe the syntaxes for procedure and function call should be segregated.

Benefits:
* It can be helpful for human readability. It makes the procedural subset of
  Curv stand out syntactically from functional code.
* The compiler can distinguish expressions from statements at compile time.
  We can distinguish expressions from element generators in a list constructor.
  Because we know that 'f x' is an expression, not a procedure call:
  * The partial evaluator can replace '(f x, a)[1]' with 'a'.
  * We can produce better At_Index error messages. Instead of:
        ERROR: at index [1]: true is not a number
        1|       [f x,true,3]
                 ^^^^^^^^^^^^
    we can say:
        ERROR: true is not a number
        1|       [f x,true,3]
                      ^^^^
* After calling Program::compile(), you can query the Program to determine
  if you have compiled an expression, statement or definition, and then call
  Value eval(), exec(Consumer&) or Shared<Record> define()
  to execute each type of program.
  * Right now, the REPL doesn't distinguish between 'cube' and '...[cube]',
    because it can't distinguish an expression from a statement. No big deal,
    but now it can make that distinction.
* The proposal for compiling Curv into CPS instructions benefits if we can
  generate different code for expressions and statements.

A proposed syntax for procedure call:
  postfix ::= postfix '!'   -- this is a procedure reference, not an expression
  procedure call syntaxes:
    procedure_ref primary
    expression >> procedure_ref
    procedure_ref << expression
For example,
  print! "hello world"
  "hello world" >> print!
Curried procedure call is a bit odd:
  myproc a b! c

If you call a procedure using function call syntax, or call a function using
procedure call syntax, you get an error. So procedure and function values must
be internally distinguished in some way.
* Maybe not. This seemingly conflicts with the doctrine that Expression
  is a subtype of Element_Generator. So is Function a subtype of Procedure?

* `print`, `warning`, `assert` are procedure values.
* As a special case, `error` is both a procedure and a function.

Two type predicates: `is_fun` and `is_proc`.

Libcurv has a "generalized function" class with both a call() method
(for function call) and an exec() method (for procedure call).

Lambda expressions and functor definitions need not have segregated syntax
for procedures and functions. The compiler doesn't need it, it would only be
for the benefit of human readers, if there is a benefit. Syntax could be:
    param => statement
    param1 -> param2 -> finalparam => statement
    identifier! param = statement;
    identifier param1 param2! finalparam = statement;
If a procedure body is an expression, it's treated as an element generator.
Without this syntax, you would use `x->...[x]` for a procedure that generates x.
With this syntax, you could use `x=>x`.

Can a Curv source file contain a statement?
We could use `file! filename` to execute such a program.

A procedure cannot reassign a nonlocal sequential variable
----------------------------------------------------------
`x := x + 1` cannot be the body of a procedure, because of restrictions
on the scope of sequential variables.
* The OpenSCAD 'do' proposal had procedures with by-reference 'var' parameters.
  If 'x' was a 'var' parameter then this would be legal.
  However, this idea doesn't allow us to simply evaluate procedure argument
  expressions to pure values.
* Not a problem. The important use case is action procedures.
  In that case, you write a function that invokes actions as side effects,
  using `do`, and you just return the results from the function call.

Proposal: Unified Function and Procedure Values
-----------------------------------------------
* No new syntax.
* print, warning, assert become values with no syntax change.
* error is a value, only one syntax to invoke it.

When a function is called, it optionally causes side effects, it optionally
returns a value, and it optionally generates a sequence of elements or fields.
The context of a function call determines which of these behaviours are legal.

Since we distinguish returning a value from generating a single value,
and since there is no `!` marker to distinguish procedure from function calls,
I want the REPL to distinguish generated from returned values in the output
of a command. A `>` prefix for generated values.

Instead of Program::eval() and ::exec(), we have ::run().

Proposal: Procedures are not Values
-----------------------------------

Old Thoughts about Procedures
=============================
Procedures (Functions returning actions or generators):
* A statement is an action, element generator, or field generator.
  A procedure is a function that abstracts over a statement.
  Procedures are values, but can only be invoked in a statement context.
* Pragmatic justification:
  * It should be possible to replace any use of `for` with tail recursion.
    This requires procedures.
  * It should be possible to use `match` in any context where `if` is legal.
    Eg, in a list comprehension. This requires procedures.
  * Once I have an interactive debugger, and a rich set of actions for
    controlling the debugger, then procedures are used as debugger scripts.
  * print, error, warning, assert become values.
  * Maybe I get rid of metafunctions, and all of the metafunction bindings
    in the standard prelude become values or keywords. Now the standard
    prelude can be represented as a record value.
* Theoretical justification:
  * You can abstract a statement with a let block.
    According to the principle of equivalence, this means you should also be
    able to abstract these phrases using functions.
  * Suppose I use the Haskell 'monad' trick to implement phrase abstraction.
    Then a statement is a function value (with a weird argument type, of a
    special type of value that can't be counterfeited, like the IO type in
    Haskell). A procedure would then also be a value. This
    demonstrates that procedures can be made theoretically sound.
* Challenges:
  * Can I invoke an arbitrary procedure from the command line?
  * `...` is ambiguous in a weak context. So I can't mark a procedure as being
    an action, element gen or field gen abstraction at value construction time:
    it could be argument dependent, as in `spread x = ... x`.
    So procedure calls are ambiguous in a weak context.
    Does it help if I split `...` into 2 operators?
  * `seq(p1,p2) = (p1();p2())`. Another polymorphic procedure. Since `if`, `for`
    and `;` are polymorphic operations on statements, this naturally leads to
    user defined polymorphic procedures.
  * By creating a set of higher order procedures (combinators), you could write
    procedures whose bodies look like expressions: no syntactic clue that they
    are procedures. A function can be polymorphic across the expression and
    statement worlds. The Haskell Monad argument justifies this as meaningful.
  * Right now, [f(x)] compiles into code that evaluates f(x) as an expression.
    A user can tell by inspection that this is a 1-element list. But no more.
    We need to compile into less efficient code (in the general case), and do
    more work to identify the efficient case.

What is `x := x + 1`? Can this be the body of a function?
* Ugh. Sometimes the drive towards full expressive power creates monsters.
  Eg, `call/cc`: generalized goto labels as first class values. Leads to code
  that is nigh impossible to understand.
* Don't be misled. From a monad perspective, `x:=x+1` is a pure function that
  transforms a state value to a state value. This state value is some
  abstraction of the scope that variable `x` is defined in.
  * The state value could be a totally locked down, non-counterfeitable
    abstraction of the frame containing the slot for `x`.
    Maybe each frame has a signature, and `x:=x+1` checks that its state
    value is a frame with the correct signature.
  * The state value could be a record containing the field `x`.
    And there's a bunch of research needed to flesh this out and make it
    efficiently compilable.
* The OpenSCAD `do` proposal had procedures with reference (var) parameters.
  This is more actually useful than the ability to mutate non-local variables.
* Maybe mutable variables are deliberately limited and deprecated.
  Use functional style if you want unconstrained abstraction.
* A procedure cannot reassign a nonlocal sequential variable.
  Use a function instead: `(V1, V2) := F(V1,V2,0);`

I think this is technically achievable.
But it's a can of worms with limited utility.
Consider defining a subset of this that provides the greatest benefit,
to limit the implementation and design cost.
Not for MVP.
