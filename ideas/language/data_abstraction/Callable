# Callable Values

Using {call x = f x}, a record can behave like a function.
So is there a subtype relationship between 'function' and 'record'?

Callable records should work in any context where a function would work.

Should functions work in any context where a callable record would work?
That is less clear. That would imply that functions have a `call` record
(that returns the function itself, I guess). That cyclic reference would
mess up general-purpose tree traversal code unless it uses a predicate to
check for primitive functions and avoid descending into such nodes.
So we at minimum need `is_callable` to be distinct from `is_function`.

Some conclusions:
* Functions cannot be indistinguishable from callable records.
  is_function is a concrete type test, while is_callable is an abstract
  type test (does the value support the 'function call' interface?).
  is_callable is recommended for generic code (most cases), while is_function
  is reserved for specialized code. I don't want `is_function` to be any
  shorter than `is_callable`, to discourage its use in generic code.
* Functions do not have a `call` record (to avoid confusing tree-walkers).
* Therefore, functions print differently than callable records.
  A callable record is {call:...,...} while an anonymous function is <function>.

Open issues:
* If we have tagged traits, then Callable is a trait that must be
  applied to a record to make it callable (the record must also have a `call`
  field). The predicate Callable? is true both for callable records, and for
  functions.
* Are String and List callable values? is_callable "a" and is_callable [a]?
  * Are there use cases for generic code that treats String and List as
    callable? Or is my use of list[index] syntax ad-hoc overloading?
    I think the latter. If strings and lists were callable for the purpose
    of generic programming, then a more useful correspondence would treat them
    as maps from single indices to values.
* What generic operations should be available on a callable value C?
  * function call
  * compose[f1,f2,...]
  * match[f1,f2,...]
* Functions have fields? (Yes, but not `call`.)
  So F.x and fields F work.
* Functions are records: is_function implies is_record? (?)
  Maybe has_fields is an abstract type predicate.
* Use `include F` or `... F` to generically inherit from a callable value?
  If inheriting from a function, synthesize a `call` field.

--------------------
Some possibilities:
 1. Functions and records are distinct.
    is_function and is_record are disjoint.
    Functions have no fields, and can be applied.
    A record with a call field can be applied.
    Kind of inconsistent, because is_function doesn't accurately tell you
    if a value is 'callable'. But `is_callable` is true both for functions
    and for records with a call field. But now there is a subtle distinction
    between is_function and is_callable, which would lead to mistakes.
 2. Callable records should work in any context where an equivalent function
    would also work.

Take the "parametric record" proposal into account.
Two models for how built-in or primitive parametric records could work.
 1. `R` is a parametric record.
    `R.call` is a primitive function (no fields).
    `R.call arg` is a record, another instance of R.
    `R arg` is an abbreviation for `R.call arg`.
 2. `R` is a parametric argument.
    There is no `call` field.
    `R arg` is an instance of R.


* For symmetry, a function behaves like a record with a single `call` field.
* What about `is_fun`?
  * Get rid of `is_fun`. `is_record` is true for primitive functions.
    Test for `call` field in a record to identify a function.
  * Or, `is_fun` is true for records that contain a `call` field,
    and `is_record` is true for primitive functions. So Fun is a subtype of
    Record.

A virtual Record::call() allows easier creation of "parametric records".
(As opposed to extracting the `call` field, and requiring it to be a Function,
which when called returns another Structure.)
* This has a subtle but funny effect on the data model. In effect, an image is
  a kind of native function. Either there is no `call` field, or the `call`
  field is the value itself, which are also the choices we have for functions.

Lists and Strings
-----------------
What about lists and strings, which also support function call syntax?
Are List and String subtypes of Fun?

Callable Values are Functions
-----------------------------
`is_callable X` is true for any value that can be applied:
* function
* record with a `call` field
* list
* string

Callable values work with any primitive operator that also accepts functions.
* f x
* match[f1,f2]
* compose[f1,f2]
* (f x) = expr -- lists and strings aren't suitable for f

Function is a subtype of Record???
----------------------------------
This implies that a function can be used in any situation where a record with
a call field would work. Maybe 'functions' and 'records' are collectively
called 'objects'.

This implies that (maybe) primitive functions have a `call` field, which is the
function itself, and the following operations are supported:
    f.call
    fields f == ["call"]
    ... f
    include f
    is_record f == true
This is a bit weird. It handles the case where code is written that assumes
a record with just a call field, and ensure that functions work in that context
as well.

To the contrary, Curv data structures are meant to be finite, acyclic trees,
and `f.call.call.call.call.call.call ...` violates this.
This suggests that the presence of a call field is not a requirement for
callable values.

If the requirement exists, then String and List should also have `call` fields.

The "parametric record" proposal makes this more plausible, since these are
records that are also functions.
