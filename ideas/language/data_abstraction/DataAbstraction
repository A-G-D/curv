Data Abstraction
================

Tar Pit or Virtue?
------------------
The modern practice of OOP leads to code with thousands of classes, an
explosion of specialized ADTs, bloated code that is mostly boilerplate,
and a huge tower of abstraction, code built on top of deeply nested giant
libraries that nobody understands. Data abstraction mechanisms in OOP languages
are incredibly complex and account for most of the language complexity.

Haskell isn't OOP, but it is 'typeful programming', where the coding task is
dominated by defining and using large numbers of ADTs. There's a high learning
curve due to the complexity of the type system and the libraries.

The opposite of this is the practice of programming in APL/J/K, where there
are no data abstraction mechanisms, and you encode most data as nested arrays
of numbers. You make little or no use of libraries; you just apply the very
powerful language primitives to your arrays of numbers to get things done.
Curiously, this leads to much shorter code, and much lower overall program
complexity due to the absence of dependencies. Eg, look at the co-dfns project:
an optimizing APL compiler in 750 lines with no dependencies. Down side: the
code is opaque.

Clojure is a less extreme reaction against the excesses of OOP. Being a
pragmatic language that integrates with the JVM, it doesn't entirely eliminate
data abstraction, and Rich Hickey admits that ADTs still have a small role to
play. Clojure tries to remove much of the complexity of OOP. There are still
classes, but no information hiding, and no implementation inheritance. Instead,
genericity is obtained by implementing interfaces/protocols. There are still
nominal types, but most data should be stored in generic collections and maps.

Curv needs to find a middle ground between the no-abstraction Turing tar pit
and the typeful programming/OOP tar pit. If "no-abstraction" is taken to its
logical conclusion, you get shadertoy.com, where you code in raw GLSL and
there are no reusable libraries. This coding style is just too difficult.
We need higher level abstractions, including data abstractions. We need
libraries of reusable code. We need the ability to define DSLs within Curv
to simplify the use of various artistic techniques, eg like L-systems.
But the language needs to be kept very simple.

Requirements
------------
Curv has informal data types like Shape, Colour, Intensity Field, etc.
There is already informal data abstraction: what further language support is
needed? The language must be kept simple, so what are the minimum requirements?

There is a need for "abstract values": instances of application data types
where the representation is abstracted out of the interface.
* An abstract value is constructed by calling a high level constructor function
  associated with the application type. The user is not required to
  know the internal representation (usually as a record).
* Abstract values are displayed using a high level representation (as calls
  to constructor functions, or graphically, for some types in Visual Curv).
  This is in contrast to displaying the internal representation of an abstract
  value (as a pure text [...] or {...} literal).
* Out Of The Tar Pit advocates a separation between "essential" and
  "accidental" data, to reduce complexity. In a Shape value, the 'essential'
  data is really the constructor name and arguments, while the 'accidental'
  data are all the fields generated from the constructor arguments. Printing
  a shape record with all of its fields is confusing and low level,
  which is why the REPL has a kludge to suppress that information.
* Visual Curv has a requirement for an extensible set of graphical value types.

Language enforced information hiding, wherein the user is prohibited from
accessing the underlying representation of an abstract value, is not a
requirement.

Not all application data types should be abstract. If no confusion is caused
by identifying the type with its representation as a list or record, and there
is no requirement for graphical values, then it is better to just use a plain
list or record. For some application types, it's best to just use a numeric
array as the representation: then you can perform arithmetic on the value
without explicitly converting between abstract and array representation.
In Clojure culture, most application types are just plain maps or records.

The distinction between abstract and concrete values is in how they
are printed. Curv values are printed as *constructor expressions*, which
usually can be evaluated to recreate the original value. The Curv equality
predicate works on any pair of values. Two values A and B compare as equal
(A == B) if and only if they have the same printed representation.

Abstract Values
---------------
What is the simplest design that supports abstract values? How are they encoded?
What code do you write?

 a) Abstract values are *not* tagged. An abstract value is recognized using
    record patterns. There is an external registry that maps patterns onto
    instructions for how to display a value. For a user defined package to
    define a new abstract type, it requires extending the registry. Kind of
    like defining a generic function in CLOS.
    
It's possible to have conflicts between packages, if they try to register
the same pattern. A conflict could occur if two independent packages A and
B are loading different versions of a third package C.

A more general kind of conflict occurs if two packages accidently pick the
same internal representation (the same set of record fields) for different
abstract types, which in any case are advertised to the user in terms of
the constructor functions you call, not the representation.

In general, there's no simple reliable way to resolve these conflicts.
This seems bad.

 b) Abstract values are somehow tagged with application type information
    that is distinct between packages (or at least cannot conflict).

The failure mode for (b) is much less catastrophic than (a): It is that
two versions of the same package will generate distinct abstract types.

So, abstract values will contain type information. And it seems I have chosen
'nominal' type equivalence in preference to 'structural' type equivalence.

Let's characterize that type information.
* Type `Colour` is a simple abstract type. There is a single constructor
  function used to print colours: `sRGB(r,g,b)`. There is one internal
  representation: as a linear sRGB triple. `sRGB` is a constructor function
  that constructs an instance of `Colour`.
* Type `Shape` is more like an abstract OOP class with multiple concrete
  subclasses, each with their own constructor function. So `cube` is a
  constructor function that constructs a cube, which is also a Shape.
  So there is a type hierarchy.

In the Branded Value proposal, only leaf node ADTs have nominal types (brands),
and Shape is a structural type. Here, I seem to have concluded that Shape is
also a nominal type. Does this follow from requirements?

If Shape is a structural type (there's no tagging to identify a Shape)
then we need a record pattern registry to hook up the code that makes Shape
a graphical value. (What I have now but generalized.) I've argued above that
this approach has problems for user-defined graphical types in packages.

I've previously considered that Shape *should* be a structural type,
on the general principle that structural/duck typing is more flexible
than nominal typing. Structural typing lets you induct existing types
into a new interface/protocol type without modifying existing constructors.
* The real question, then, is whether we need the ability to create new
  ad-hoc 'abstract' types from existing code, changing the way those values
  are printed or making them graphical, without changing their constructors.
  I don't think we *need* this. The remaining question: what's simpler?

Abstract Values with Nominal Types
----------------------------------
What language features are provided? This design is OOP inspired,
only simplified, with no classes and no mutable objects. Inspiration is
derived from Self, OCaml, and other OOP languages that have anonymous classless
object literals.

A Module is an immutable Record with some extra features. A Module can be
branded with the identity of the Constructor that created it, which is a
proxy for application type information, in which case it represents an instance
of an abstract type. It's analogous to an OOP object.

A Constructor is a function that returns a branded Module. It's analogous to
an OOP class, in that it represents an abstract data type,
by virtue of being the only way to construct instances of such a type.

And there's subtyping, so that `cube` can be a subtype of `Shape`.
So `cube` and `Shape` are constructors, and `cube` is a subconstructor
of `Shape`. So `cube?` and `Shape?` are type predicates, and `cube?`
implies `Shape?`. These are nominal types.

What's missing from the Branded Values proposal is subtyping: a Constructor can
apply its own brand to an already branded module, and the brands nest.

In Julia, "all concrete types are final and may only have abstract types
as their supertypes". This is a restricted variant of OOP that avoids some
of the well known problems. Curv abstract value types are consistent with
this philosophy.

There are two kinds of constructors, corresponding to concrete, final classes
and abstract classes in OOP.
* 'mixin constructors' correspond to abstract OOP classes.
  A mixin constructor takes a module as an argument, and returns a copy of the
  module, modified to contain all of the fields required by the mixin.
  * Required fields with default values will be added if missing.
  * If a required field doesn't have a default, and it is missing, then raise
    a domain error.
  * Required fields with bad values will raise a domain error.
  * Unrecognized fields will pass through without change (these unrecognized
    fields belong to other types, not known to the mixin).
  * A brand is added to the module certifying that the required fields are
    present and have appropriate values.
* 'final constructors' correspond to concrete, final OOP classes.

A module can have 0 or 1 final constructors. It can have 0 or more mixin
constructors. There is a total ordering on the constructors. The outermost
constructor (the final constructor, if present) is used when printing the value.

Signatures
----------
A 'mixin constructor' is actually a representation for a module interface or
signature. A signature is a set of named fields that any conforming module
must possess, plus constraints that specify the meanings of those fields.
The constraints can include type constraints, and axioms. A signature S can
inherit structure from 'super' signatures. S can define additional fields,
or it can further constrain inherited fields.

Curv doesn't have a logic system for reasoning about and proving axioms.
Instead, the axioms are in the documentation. Conforming modules are given
a 'brand' (or type tag) that certifies that the module conforms to the
signature (which includes upholding the documented axioms).

In abstract algebra, the only difference between a Magma and a Monoid is that
the monoid has additional axioms like associativity. Monoid <: Magma.
So that's an example of a situation where the set of field names alone
are not enough to distinguish two signatures. It's another argument for adding
branding (branded modules) to the language.

If I'm adding branded signatures to Curv, I want to use this feature
consistently, rather than use a mishmash of structural and nominal signature
matching. Shape becomes a branded signature, so does Callable.

Syntax
------
As a straw-man, I'll use the @ style syntax from Branded Values.
    f x = @...;     // final constructor
    g x = @@...;    // mixin constructor
It's cryptic, but it's more important to get the semantics right first.

This implies that constructor-ness and branded-ness are orthogonal.
* I do use anonymous final constructors in the `parametric` construction.
* Anonymous mixin constructors are useless, I think. So we don't need syntax
  for them.

The Branded Value proposal allows a module to be re-branded.
This entails changing the brand on each branded field.
I wonder if there is a problem with something like
    {
        @ctor x = ...;
        y = ctor 0;
    }
If we retroactively rebrand this module, then how does the brand of `y`
get updated?

------
Maybe the syntax for this is:
    cube d = @@Shape { ... };
The @@ operator can only be applied to the body expression of a function,
and it creates a nested brand.

What this effectively gives us is single inheritance. "Multiple inheritance",
or interfaces, or protocols, can be accomplished using duck typing.
Hmm, well, this also gives us mixin inheritance, which is basically ordered
multiple inheritance.

Why do we need both @ and @@ style constructor functions?
Consider
    cube d = @box[d,d,d];
We use @ instead of @@ because in this case, we don't want cube to be
a subtype of box.

It's evident that Shape is designed to be subtyped, and box isn't.
Perhaps this distinction should encoded in the Shape and box values,
instead of encoded in the choice of @ or @@ when invoking Shape or box.

We will call Shape a mixin constructor and design syntax for it. Shape takes
a record argument, and returns a modified version of that record. The result
record R is marked as being a Shape (Shape? R is true). A pure Shape is
printed as `Shape {...}`.

Previous Notes
--------------
What code do you write to define an abstract value constructor function?

So, abstract values will contain type information, but what kind?
* A pointer to a 'type' object that contains all of the necessary information.
  Abstract values are self contained.
* A GUID that is distinct across packages, a type tag.
  The code that interprets these tags is stored outside of the value.

-----
There will be no OOP classes: no information hiding, and no implementation
inheritance. (Clojure also omits these features.)

There may be a requirement for values that are tagged with application data
types. (There are many ways to do this: requirements first.)

The data model should be simple: when you print a datum, what you see
is all there is.
* Therefore, we may have a requirement for "abstract" data, which are
  printed as constructor expressions, rather than as [...] or {...} literals.

Visual Curv has a requirement for an extensible set of graphical value types,
which are displayed graphically, rather than as pure text [...] or {...}.

So much for displaying abstract values. There is also a need for predicates
and pattern matching on abstract values.
* Colour is a single concrete type with a fixed (R,G,B) internal representation.
  All colours are printed the same way, using a single constructor.
* Shape is a family of concrete types that share a common set of fields.
  There are multiple constructors. I need a predicate that recognizes all
  shapes, regardless of the constructor.

---------
I might want a concept of tagged values. Provisional syntax:
    #tag:primary_expr
The payload can be any (untagged?) value. A tagged value behaves just like
its payload when passed to most primitive operations. Possible use case:
use #colour:[r,g,b] to tag a colour value, so that colours are graphical values,
and so that a colour picker is invoked to edit the value in the visual editor.

Data Abstraction and Generic Programming
----------------------------------------
Data Abstraction means several things to me:
* The act of coding a generic algorithm, which involves specifying the
  minimum requirements on the data that the algorithm acts on.
  I would like to support generic programming in Curv, as long as it doesn't
  involve too much language complexity. Ideally, generic programming arises
  as a side effect of simplicity, orthogonality and generality, rather than
  being supported by complex, specialized features.
* The complex facilities found in general purpose languages for defining
  data types, which may include classes, inheritance, information hiding,
  types, user defined types, type constructors, and so on. These features
  in C++, Haskell, CLOS, etc, are far too complex for Curv.

The original Curv design rejects complex features for defining data types.
There are only 7 types: the 6 JSON data types, plus functions. There are no
user defined types, and no concept of a named type. You represent data
structures the same way you do when encoding them in JSON.

I'm not 100% happy with this.
* In some cases, like shapes, the representation can be large and messy,
  and I don't always want to dump this representation on the screen
  when you examine the value.
* There are some technical benefits to storing the CSG tree in a shape value.
  Eg, for symbolic export of a shape, to an SVG file.
* Parametric shapes know what their parameters are, and let you interactively
  modify those parameters using a GUI.
So now I want to separate the outside representation of a shape from its inside
representation (both can be examined). The outside representation is a
constructor name, and a set of parameters.

So there is plain and branded data.
* Plain data is JSON data, and you construct it directly using using JSON
  value constructors. When you print the data, it looks like JSON.
  Pattern matching works using JSON value constructors.
* Branded data is constructed using high level constructor functions.
  The underlying representation is usually a record.
  When you print the data, it looks like calls to high level constructor
  functions. Pattern matching uses calls to constructor functions.
  So this is a kind of data abstraction.

[Functions are maybe another kind of value where you have an outside and
an inside representation. In some languages that are based on Symbolic
Expressions, a function is represented internally by a data structure that
you can examine. I can see some utility in doing this for Curv: it provides
a low level mechanism that would allow more language primitives to be coded
in Curv rather than in C++. But this is tangential to the main concerns of
this page.]

Branded Data
------------
* Branded data is constructed using high level constructor functions.
* The printed representation looks like calls to constructor functions.
* Pattern matching uses calls to constructor functions.

Equality compares the constructor name and the argument values.
This is the only way to get meaningful equality tests for shapes, or any
other compound data that includes functions.

Branded data is important for visual programming. A parametric shape is a
branded datum with constructor arguments that you can tweak in the Viewer
window using graphical value pickers. Branded data may be nodes in a node-based
visual programming environment.

Branded data can support a particular style of generic programming, where
CLOS-like generic functions have different implementations for different
constructors. Like Haskell type classes, except with dynamic dispatch.

Branded data will use the simplest design that meets the requirements:
* A shape (may) contain its CSG tree in symbolic form.
* A parametric shape contains its parameters and its constructor function.

There are many possible designs.

OOP:
    Branded data are records. Parameter names and shape fields occupy the same
    namespace (both are just fields). Class names and inheritance. There is a
    shape class, and every concrete shape inherits from that.
Records have branding metadata:

Maximally Generic Functions
---------------------------
I'll start by describing a system that maximizes the reuseability and
generality of generic functions.

A Signature is:
* A set of abstract type names.
* A set of value and function names, together with requirements that
  give the semantics of these value names.
  A requirement for a value name could be a type signature, written in
  some static type language. For a simple example, value V has type T,
  where T is one of the abstract type names.
  Requirements can more generally be axioms: equations
  that must be true, involving one or more named values.
  Since axioms can describe relationships between two or more named values,
  they can describe requirements that can't be described using just a type
  signature.

Signatures can be organized into a multiple inheritance DAG.
Examples from abstract algebra: Group and Monoid are signatures;
Group is a subsignature of Monoid.

A Structure is an instance or a concrete implementation of a Signature.

Note that Structures are not contained inside of types, so this is not like
OOP. You could have multiple structures, defined in different modules or
packages by different authors, that implement different signatures for the
same concrete type. For example, you could have two different structures
that implement the Monoid signature for Number: one would be the additive
monoid, the other the multiplicative monoid.

An interface in OOP is like a restricted Signature over exactly one type.
And a class in OOP is like a Structure that implements an interface.

A generic algorithm is an algorithm that uses named types and values and
functions described by a signature. A generic algorithm can be instantiated
for any structure that implements that signature. When a structure contains
one or more functions that are defined in terms of the structure's signature,
those functions are generic algorithms.

My model for this system is the SML module system.
C++ templates are another system with this goal.
A related system is Racket's combination of Units and Mixins:
http://www.cs.utah.edu/plt/publications/icfp98-ff/icfp98-ff.pdf

What these systems have in common is that, in order for a generic
algorithm to be maximally generic, it must be embedded in some kind of
parameterized module. Eg, the parameters can have signature types and the
arguments can be structures. Maybe all of the parameters have default values,
but to cover all the use cases, you have to be able to explicitly invoke
the module multiple times with different arguments.

Curv can mostly do this already. You can define a generic function inside
a parameterized record, and invoke the parameterized record with structure
arguments. You could even use a parametric record, so that passing an
argument is completely optional.

There is missing syntactic sugar: if the structure defines a '+' operator,
you can't invoke it from inside the generic function using a+b syntax.
* What would that look like? Maybe, following Mathematica, a+b is a hardwired
  synonym for plus[a,b].
    S.plus(a, b)
    a S.+ b

In Mathematica, code and data are represented by symbolic expressions,
which can be manipulated as data. I think you can also reinterpret the meaning
of unbound symbols within an S-expression. In which case, there is no need
to plan ahead and explicitly parameterize a generic function with respect to
its dependencies?
* If this account is true, then it is in conflict with the idea of a closure,
  where a function value carries around bindings for all of its dependencies.
* Curv could have operations for querying and modifying the environment of a
  closure. Is this a good idea? It seems related to the idea of a parametric
  record, which also has an 'environment' that you can query and modify.
* I suspect that genericity may be more complex than this. Perhaps, in some
  cases, it is necessary to decide which occurrences of '+' belong to which
  signatures. Either your type system deduces this for you (as in Haskell with
  type classes) or you do it manually.

Dynamic Type Tags
-----------------
Curv is dynamically typed. Curv values contain type tags that attest to
their type. A type is not the same thing as a signature or a structure,
so this is different from OOP, where a class is a type. Signatures contain
abstract type names, and values contain type tags: am I using the word "type"
consistently in these two cases? Maybe a Signature is a Pattern.

What are the possible type tags?
* List values contain an element type. This is for efficiency reasons.
  A general list [a,b,c] can contain any type of value.
  A string "abc" is a list restricted to only contain character values.
  Once I support image import, I will have image data values, which are
  arrays of pixel values, using a compact type-specific representation
  for the pixel values (ie, not 64 bit boxed values). And I will have types
  that correspond to various pixel value representations.
  In-place update of a list will be restricted to members of the list's
  element type.
* Atomic types (null, bool, character, number) have a type tag.
  Looks like there will be multiple numeric types, due to image import.
* There are an infinite number of record type tags.
  There's some way to construct a branded record, I think.
  Maybe related to the 'term' proposal.
  Record branding means we are diverging from duck typing.
  But, it allows overloading an interface,
* Function values can also be branded. A brand on a function attests to that
  function having certain properties, so we are diverging from duck typing.

Is there a concept of "subtype" for type tags?
I think so. An imported 8 bit greyscale image has pixel values in the range 0
to 1, but represented as 8 bits, not as 64 bits. So that's a subtype of Number.
(Julia doesn't have subtype relationships between concrete types.
On the other hand, Julia has abstract types, which I don't think makes sense
in my framework. I have signatures and structures instead.)
