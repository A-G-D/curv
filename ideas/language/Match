Special Syntax for `match`
==========================
A call to `match` has special properties if it has the form
    match[f1,f2,...]
where the function position is a literal constant (the `match` function)
and the argument position is a list literal:

 * You can define recursive piecewise functions.
 * A match call like this is considered a function literal, for the purposes
   of the Abstract Value proposal.
 * The argument expressions f1, f2, ... are in tail positions if the match
   literal is in a tail position. This is relevant to tail call optimization
   and the Abstract Value proposal.

How is this implemented?
* Maybe `match` is a keyword. This prevents `match` from being used as
  a normal function.
* Maybe `match` is a metafunction (a Meaning) that recognizes special syntax in
  a call, but promotes to a value (via to_operation) outside of that context.

1. `colour`
-----------
The `colour` operator is currently defined like this:

    colour c shape = c >> match [
        c :: is_vec3 ->
            make_shape {
                ... shape,
                colour p : c,
            };
        (ifield, cmap) ->
            make_shape {
                ... shape,
                colour : compose(ifield, cmap),
            };
        c :: is_shape ->
            make_shape {
                ... shape,
                colour : c.colour,
            };
        c :: is_fun ->
            make_shape {
                ... shape,
                colour : c,
            };
    ];

But this form is more desirable:

    colour = match [
        c :: is_vec3 -> shape ->
            make_shape {
                ... shape,
                colour p : c,
            };
        (ifield, cmap) -> shape ->
            make_shape {
                ... shape,
                colour : compose(ifield, cmap),
            };
        c :: is_shape -> shape ->
            make_shape {
                ... shape,
                colour : c.colour,
            };
        c :: is_fun -> shape ->
            make_shape {
                ... shape,
                colour : c,
            };
        ];

because:
 1. Partial application with a bad first argument reports an error immediately.
 2. Using the IDE to query the first argument (presumably) works better.

The second definition doesn't work, the error is "illegal recursive definition".
To fix this, `match` is special syntax, not an ordinary function binding.

The lambdas in the match argument list should inherit the name 'colour',
so that partial applications print better and we get better error messages.
That also requires `match` to be magic.

2. piecewise parametric records
-------------------------------
If a piecewise function definition (like the second form of `colour`)
is declared `parametric`, then the parametric property should be inherited
by the lambdas in the match argument list. Also requires `match` to be magic.

In the Picker and Prototypes proposals, perhaps
    parametric match [...]
is an anonymous parametric function. This works if `match` is a keyword.

...more thought is required...

3. switch statement
-------------------
How do I write a switch statement over a symbol variable in SubCurv?
Ideas:
 * Generalize `match` so that a call to match can return a procedure
   rather than a function.
    * By introducing first-class procedure values, see Procedures.
      But that requires procedure values that capture mutable variables,
      and that is forbidden (Curv is a pure functional language).
      Such procedures can't be mapped to GLSL values in any case.
       * What about 'second-class' procedure values that don't violate purity?
         aka Meanings.
    * Special syntax. `match` is a keyword, or it is a metafunction that can
      be promoted to a value. As a keyword/metafunction, it can handle an
      argument of the form
         match [pattern1->statement1,...]
      which compiles into a piecewise procedure (which is not a value).
 * Add a `switch` statement: switch (arg) [pattern1->statement1, ...]
