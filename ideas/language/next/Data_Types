User Defined Data Types
=======================
We introduce user-defined data types (UDTs), which can't be confused with
built-in data types. This allows for simple data abstraction.

You can create an abstract interface to a user defined type using a fully
functional interface (all operations on the data type are functions).
The operations may optionally be typed checked (only values created by your
data constructors are allowed as arguments). Your data constructors can be used
for pattern matching. Instances of your data type are printed as constructor
expressions, no extra code is required. The internal representation of your
type can optionally be hidden, so that it doesn't appear in the printed
representation.

UDT Requirements:
* constructor functions
* instances print as constructor expressions
* constructor expressions can be used as patterns
* index values as selectors
* equality and referential transparency

Other considerations:
* Backwards compatibility with POD based functional interfaces?
  This is possible using a `match` with cases for the old POD values
  and the new UDT values. No special features required.
  So it's just a question of how convenient this is (and how important it is).
* Metaprogramming: construct a UDT algorithmically?

An operation on a UDT is a function:
* A constructor (maps arguments to an instance).
* A combinator (maps one or more instances to another instance).
* An observer (maps an instance to a noninstance).
* A selector (an observer that maps an instance to a data structure element,
  and can be used for updating an instance; aka an index or lens).

By convention, the operations on a UDT are packaged in a module named after
the UDT.

Data Types
----------
Every boxed Curv value contains a type tag, which is used for dynamic
dispatching. This is a statement about the Curv VM.

I've considered two models:
* All type tags are disjoint. This is similar to Scheme, where primitive types
  are disjoint.
* Type tags form a hierarchy. Julia is like this, with the restriction that
  only leaf-node tags can be attached to values.
I prefer to keep things simple.

A value's type tag is determined when it is constructed. In fact, I believe
that it is uniquely determined by the value's constructor (and not by any
constructor arguments).

A simple data constructor has a unique type tag associated with it.

Each type tag has an associated Type value -- all of the values with that tag
belong to the associated type. Not all Types have an associated tag: those
that do are called "data types".

Primitive types (which are not constructed using 'data' definitions) also
have tags and data types. For example, `Num` is a data type.

Data types are used by theories for efficient dynamic dispatch of overloaded
operations. A theory used for dynamic dispatch may require its types to be
data types.

If we use the simple design, where all data types are disjoint, then every
value has a unique data type associated with it. This means, in theory, we
can provide an operation that returns a value's data type. I don't have a
use for this. But, Python has a type(x) function that seems to implement this.
In Julia, only the leaf nodes of the tag tree can be associated with objects,
so in this scheme also, a value has a unique data type which is either the 
same as or disjoint from the data types of other values.

Singleton Data Types
--------------------
A singleton data type has exactly one instance (called a 'singleton' for short).
I want singletons to be labelled values (in most cases): this labelled value
is the constructor of the data type (even though it isn't a function), and
constructors should be labelled values. So I need to extend the definition
of 'labelled value' to allow this.

In a data type with a single constructor, which is a function, the constructor
can also be the data type. A single value can be both a function and a type,
by implementing both the function theory and the type theory.
Unfortunately, it's not possible for a singleton to be its own data type.
Because that would conflict with the existence of singleton types such as Num.
* I assume that Num is a singleton that implements the Type theory.
  Num can't be a singleton type that includes only itself, because Num is
  already the type of numbers.
* Can all types belong to the same data type? If they do, then the problem is
  that each value has a unique data type. A singleton can't belong to its own
  singleton data type and also belong to the type data type at the same time.

Too many contradictions. In Curv, a singleton value cannot denote both itself
and the singleton data type to which it belongs.
* Haskell can give the same name to both concepts because it has different
  name spaces for types and values. That can't work in Curv.

No matter. Regardless of this, data constructors can be distinguished from
other values, and there can be contexts where a data constructor is used
to represent its data type.

Three Designs for Data Constructors
-----------------------------------
 1. single monadic constructor
 2. single variadic constructor
 3. multiple constructors of varying arities

### 1. single monadic constructor
A data type has exactly one constructor, with exactly one argument.
 * For a singleton data type, the argument is [].
 * For a sum data type, the argument is a symbol `#foo`
   or an arrow `bar: 42`.

In the modelling language, you use POD to represent all your data
(instead of defining new data types). You use symbols and arrows to represent
sum types. There is a direct upgrade path from this style, where the POD value
becomes the data constructor argument.

### 2. single variadic constructor
A data type has exactly one constructor, which can have zero, one, or
multiple curried arguments.
 * For a singleton data type, the constructor is niladic.
 * For a sum data type, the constructor is monadic, and the argument is
   a symbol `#foo` or an arrow `bar: 42`.

### 3. multiple constructors of varying arities
 * For a singleton data type, the constructor is niladic.
 * For a sum data type, there are multiple constructors, like in Haskell.

Simple Data Constructors
------------------------
A simple data constructor is defined like this:
    data CtorName ArgType0 ArgType1 ... -- 1 or more arg types

This syntax defines a constructor function that also denotes a data type.
Can you use this syntax to define a singleton type? Well yes, if there
is a single constructor argument whose parameter type has one value.
You can do this:
    data Foo [];
    def foo = Foo [];
So 'Foo' is the data type and 'foo' is the sole instance of 'Foo'.

The shape library needs data constructors with zero or more curried arguments.
With the above workaround for singletons, I think this is covered.
    everything
    cube 10
    rotate (45*deg) cube

Sum types could be defined like this:
    data MySumType (Enum [#foo, #bar, baz: Num])

Haskell-Inspired Data Constructors
----------------------------------
Another possibility is Haskell-like data type definitions:
    data TypeName = ctorspec1 | ctorspec2 | ...
where a ctorspec is a constructor name followed by zero or more argspecs,
and an argspec is a primary expression denoting a type.

This separates the data type name from the constructor names,
and allows for multiple constructor names. For singleton constructors,
it avoids the problem cited earlier of overloading a constructor name
with a data type name.

(We can imagine an alternate reality where each constructor name also has
an associated data type, which would then require a hierarchical space of
data tags. But there's no real requirement for this, and it's better to keep
data type definitions simple. If you need a type with multiple constructors,
where each constructor has its own type, then you can use theories for this.)

Abstract Data Constructors
--------------------------
In some cases we wish the true representation of a UDT value to be different
from the constructor argument (that is printed when the value is printed,
and that is matched on by constructor patterns).

For example, I want this for the Colour type. External: sRGB, internal:
linear RGB.

Here's a possible syntax:
    data TypeName = {
        construct param = internal_representation;
        deconstruct internal_rep_param = external_representation;
    }
With this design, the data type is identified with the data constructor,
which has exactly one argument.
* 'construct' is called to construct an instance of the data type.
* 'deconstruct' is called to print an instance (it maps the instance
  to a constructor argument).
* 'deconstruct' is used when matching an instance against a constructor pattern.

This feature could be handled using a Theory, similar to how Haskell has
a type class Show and Rust has a trait. This Theory provides a bidirectional
mapping between the internal representation and the constructor argument.

Referential Transparency and Equality
-------------------------------------
Curv is referentially transparent. But a data type definition creates a new
data type, different from all existing data types. It is as if executing the
definition causes the side effect of allocating a new data type object.
And since data type definitions can occur in module literals, that would mean
evaluating the module literal causes a side effect. Two exact copies of the
same module literal would not return equivalent values, even if both are
evaluated in the same lexical scope.

These side effect semantics don't even make sense if you consider distributing
Curv values over the internet. How do we ensure that the same data type
exists in two different computers connected only by the internet? There has to
be a description of the data type that can be copied without losing its
identity.

I have two alternative proposals for restoring referential transparency:
 1. nominal equivalence
 2. structural equivalence

Under Nominal Equivalence, data type definitions can only occur in modules.
All modules are labelled, with absolute pathnames as labels.
Module equivalence is determined by comparing labels.
* Data type definitions cannot occur in `let` heads, which is a restriction
  on composability. Some code can only be written at the 'top level' inside
  modules.
* The benefits of this somewhat restrictive approach are that it avoids the
  difficulty of implementing structural equivalence, and it lets you reason
  about module equivalence by looking only at module names.
* The problem is that structural equivalence of API values still pops up
  when we consider 'functors' (module constructors), because functor arguments
  now appear in module labels, and these arguments could be lambda expressions.
  We could beat this problem back by requiring that functions appearing as
  functor arguments must have absolute labels. Ugh.

Under Structural Equivalence, we take on the hard task of providing a
referentially transparent equivalence relation for anonymous functions,
where equivalence guarantees that the two functions have identical input/output
behaviour, and non-equivalence is silent on whether the functions behave the
same. We still have labelled values, but the labels are not the sole criteria
for determining value equivalence.
* The Unison language appears to solve this problem. They ignore names, which
  violates my goals, but that's a minor issue. My real question is whether their
  method is referentially transparent.
* Dependently typed languages such as Idris would appear to solve the problem
  of referentially transparent structural equivalence of anonymous functions.
  In this context, I know that preserving referential transparency and
  equational reasoning is a key goal, so their method should work, if I can
  repurpose the algorithms without converting Curv to a dependently typed
  language.

So apparently I've reduced this to the problem of understanding how to
implement Idris. Yay?

How about this: two anonymous functions are structurally equivalent if
they have identical parse trees, and if all of their non-local bindings
have equivalent values. This is good enough to support referential
transparency. It doesn't preserve equivalence across semantics-preserving
program transformations (like Idris would) but that's not critical.

It looks like Stupid-Simple Structural Equivalence is the winner for now.

Two user-defined data types are equivalent if:
 * The parse trees of the data type definitions are identical.
 * The non-local bindings have equivalent values.
 * The labels are equivalent. Note that if the data type definition is
   embedded in a module, then the module's label is added to the type and
   constructor labels. So here is where nominal equivalence is mixed in.

Data type definitions can appear in any context, including a `let` head,
or as a REPL command.

Given two UDT instances that print the same (as textually identical
constructor expressions `F x`), these two values are equal if the F's
(the constructors) are equal and the x's (the constructor arguments) are equal.
[In other words, I am not at present guaranteeing an isomorphism between
equality of value and equality of printed representation. Maybe later.]

TODO: figure out how this interacts with Theories and operation overloading.

Strawman #A: Constructors
--------------------------
Only this:
    data CtorName ArgType
Ultimate simplicity, and is a subset of #H. Could be extended to #H later.

If you are modelling your data using POD, then algebraic type instances
look like this:
    #foo
    bar: 1

In proposal #A, you lift this to an abstract type by adding a single
constructor name that takes symbols and arrows as an argument, like this:
    data Dat Enum[#foo, bar: Num]
So now the instances look like this:
    Dat #foo
    Dat (bar: 1)
(Unlike proposal #H, which would use this:)
    Foo
    Bar 1

Could you make the new interface fully backward compatible with POD?
 * Sure, nothing special required. Just use a `match` with cases for
   the new UDT and the old POD.
 * Use a transform pattern in operations with a UDT argument, like this:
      f (x <: CtorName) = ...
   And we specify that CtorName is an idempotent function.

   ??? But the usual Haskell idiom is pattern matching on the ctor, like this:
      f (CtorName x) = ...

Metaprogramming: This proposal allows UDTs to be constructed algorithmically,
since all the complexity is in the ArgType, which is a runtime value.

Selectors
---------
Index values for a UDT.
