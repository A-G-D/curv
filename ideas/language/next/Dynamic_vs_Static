Dynamic vs Static Typing
========================
Curv is a dynamically typed language with a statically typed subset, SubCurv,
that can be compiled into GPU shader code.

Dynamic typing enables Curv to meet its design goals:
* Type declarations and static type checking are optional, not mandatory.
* The type of every value is available at run time.
* Live programming is possible. In a live programming setup, you edit a
  program's source while it is running. Type errors in code that isn't being
  executed are tolerated: they do not crash your live programming session.
* Simplicity, Orthogonality and Composability are more important than type
  checking. Everything is a first class value, that can be bound to a variable,
  passed as an argument to a function, returned as a result, or stored as an
  element in a data structure.
* Universal abstraction is both possible and easy. I mean that it is always
  possible to write a function that abstracts out an arbitrary subexpression
  of some expression, replacing it with a parameter. This is provably
  impossible in a statically typed language with a sound type system. The
  inability to create arbitrary abstractions in these languages has fueled
  the creation of increasing more complex higher order type systems with
  steeper and steeper learning curves.

Other Critiques of Static Typing
--------------------------------
The map is not the territory.
Static type systems are an imperfect map of runtime behaviour.
People put up with the complexities and limitations of static types 
only because of the benefits of static checking.
The territory (what you actually care about) is runtime behaviour.
Always keep the territory in mind; don't confuse the map with the territory.

Aaron Hsu: "Does APL Need a Type System?"
-----------------------------------------
https://www.youtube.com/watch?v=z8MVKianh54

Pragmatically, what is the benefit of static typing? Value proposition?
 * Common answer: productivity.
 * Provides static analysis. Other things do this as well (linters).
 * Static types must be explicit, must constrain the semantics of the language.
   Constraints are good, make it easier to explore a design space.
 * Must impose a syntactic burden.
Benefits: types assist us in the past, the present, and the future.
 * past: formal documentation, document intent of the code
 * present: robustness, performance, productivity.
   Helps you refactor, change code while preserving correctness.
 * future: code prediction. It's a constraint on your design space.
   Type directed programming. Helps find a correct solution more quickly.

Benefits of APL: Intent, Robustness, Performance, Time to Solution
* Almost the same benefits, delivered in a different way.
* This approach is: Tool of Thought. Less a programming language,
  more a notation that provides us with a way of thinking. Solution oriented.
* To understand if static types make sense in APL, must understand the
  social and linguistic context in which APL is used.
* There are many failed attempts to embed APL in other languages.
  These fail in kinda the way that pure functional programming in C fails.
  Something important is missing (syntax).
* This is an HCI problem. Syntax is important, not just semantics.
  This is true for FP as well as for APL.
* Intent (readability). It's not about how comfortable you feel when reading
  the source code (ease of onramping). It's about expert level confidence.
  How confident are you that a change you are about to make will work
  the first time, without using mechanical aids? Because this is about
  readability, not tooling. It's about understanding your source code by
  reading it.
  * The type system community relies on abstraction for this.
  * APL solves the problem using Directness.
  * Naming is hard. Requiring programmers to invent proper names for everything
    creates problems. Types are structural names. When we introduce names
    into our code, we increase the Distance metrics in our code: semantic
    distance (abstract indirection) and syntactic distance. "Abstraction
    means that the code that does what you want isn't where you think it is."
  * (gives examples of APL expressions) Is there a benefit to adding a type
    system on top of these examples? Impacts readability.
  * Maybe APL is a type system: we've eliminated term level programming, and we
    are programming directly in our type system. APL regularly computes over the
    things that would be considered types in other languages.
  * Lisp: Code is Data. APL: Types are Data.
  * Aaron created a dependent type system for APL. The types were 3x, 5x, 7x
    longer than the code they described. Not usable. APL typing is research
    level hard: hard to create a usable type system that allows for the degree
    of rank polymorphism found in typical APL code.
* Robustness/Performance. Benefit of types: theorums for free, infinite tests.
  Eliminates whole classes of bugs, improves correctness and performance.
  Provides mechanical assistance for refactoring. BUT danger of mechanical
  guarantees. If you go too big picture, you lose ability to reason about
  small details and destroy your performance. If you focus too much on the
  details, you have usability issues thinking about problems, because you have
  too many abstractions you need to build up. So what you want is:
    a language that allows you to reason about the little details without
    worrying about them, and see the big picture without getting lost.
  APL is really high level. Often you don't need any abstraction to solve the
  problem. It's "ultra-instinct high level". Not only do these programs show
  good high level behaviour, they are also mechanically sympathetic. Their
  cost model is directly related to modern simd and vector architectures.
  * on data structures:
    * "Functional data structures are like sausages. The more you see them
      being made, the less well you will sleep." -- Martin Thompson
    * If you want to get things done quickly, use an array.
  * on shorter code:
    * "Shorter code is easier to debug" -- Arthur Whitney
    * HCI: the more you can see, the more you can know.
    * Get real benefits by shrinking code size by orders of magnitude.
    * How does APL do it? Very general, in a specific way: rank polymorphism.
    * Allows very fast iteration on problems, "hyper agile".
      Iterate on multiple solutions spaces very fast.
    * Often APLers will have code memorized. There's a big value in the ability
      to memorize large pieces of non-trivial code. If you can internalize that
      knowledge, it becomes deep knowledge, and now it can affect everything
      you are doing. And this makes APL a tool of thought.
    * Optimize for whole program rewrite. This is how you remove technical debt.
      (APL code is so terse, it's preferable to rewrite than to live with the
      pain of technical debt.)

--------------------------------------------------------------------
0. Is Curv dynamically typed or statically typed? The answer is yes.

That's not a very useful categorization, though, is it?
There is a dichotomy, popular in the programming community,
which states that every programming language is either dynamically
typed or statically typed. Many people align themselves with
one camp or the other. True believers belonging to each camp use straw-man
definitions of "statically typed" and "dynamically typed" that aren't true
of modern practical programming languages. These false beliefs, in turn, make
the categories less useful for communication.

I would like to reclaim the term "dynamically typed" so that it has a
real meaning, and so that we can have real discussions about real issues.

Myths about dynamically typed languages:
* They by definition do not have type declarations.
  (Reality check: Common Lisp has had type declarations since the 1980s.)
* It is impossible for the compiler to detect type errors at compile time.
* They are inherently slow, due to the impossibility of using efficient
  value representations, and due to the requirement to perform all type
  checking at run time.
* Functions cannot detect bad parameters up front, at the point where you
  called them. Instead, you invariably get a type error deep inside the
  function; you have to decode a stack track and understand the function's
  implementation to understand the error.
I mean, you can write slow programs in a dynamically typed language, and
you can write functions that don't check their arguments, but it's not a
requirement. And these same problems can occur in statically typed languages.

Here is my definition of "dynamically typed", in the context of Curv:
* Type declarations and static type checking are optional, not mandatory.
* The type of every value is available at run time.
* Live programming is possible. In a live programming setup, you edit a
  program's source while it is running. Type errors in code that isn't being
  executed are tolerated: they do not crash your live programming session.
* Simplicity, Orthogonality and Composability are more important than type
  checking. Everything is a first class value, that can be bound to a variable,
  passed as an argument to a function, returned as a result, or stored as an
  element in a data structure.
* Universal abstraction is both possible and easy. I mean that it is always
  possible to write a function that abstracts out an arbitrary subexpression
  of some expression, replacing it with a parameter. This is provably
  impossible in a statically typed language with a sound type system. The
  inability to create arbitrary abstractions in these languages has fueled
  the creation of increasing more complex higher order type systems with
  steeper and steeper learning curves.

Finally, Curv is a dynamically typed language with a statically typed,
efficient subset called SubCurv.

1. Dynamically typed languages are inherently more expressive.
In Curv, you can abstract any expression with respect to any subexpression,
creating a function whose body is the abstracted expression and whose parameter
is the abstracted subexpression. It is dead simple to do this. The things
we call 'types' or which we use as surrogates for 'types' are in fact values
that are denoted by expressions, so we can arbitrarily abstract over 'type'
expressions as well. In a statically typed language with a sound type system,
you cannot do this. Static type people want to be able to do this, though,
so for the past 40 years they've been creating ever more complex type system
extensions that handle one or another special case of this problem, without
ever solving the entire problem, which is provably impossible. Haskell GHC
has several hundred extensions, most of which extend the type system to deal
with various special cases of this problem. The complexity of this is far
beyond anything I want to deal with.

2. Is Curv dynamically typed or statically typed? The answer is yes.

There is a false dichotomy, popular in the programming community,
which states that every programming language is either dynamically
typed or statically typed. To explore why this dichotomy is false,
I'll give descriptions of the stereotypical statically typed and
dynamically typed language, together with the ideological beliefs
associated with these stereotypes. Then I'll note that many existing
languages don't fit into either stereotype. In the case of Curv,
neither stereotype is capable of satisfying Curv's design requirements.
I'll close with a style of typing that does meet Curv's requirements.

The Stereotype of the "Statically Typed Language"
--------------------------------------------------

The Stereotype of the "Dynamically Typed Language"
--------------------------------------------------

Curv
----
Instead of "type checking", let's call it input data validation.
A function must validate its arguments. Eg,
* The 'abs' function must validate that its argument is a number.
* A JSON parsing function must validate that its argument is a character
  string containing valid JSON data.

If a function is passed a bad argument value that is not in its domain, then
the function call fails. If no arrangement is made to handle the failure,
then the failure is converted to a panic, which terminates the process.

If the compiler can prove, at compile time, that a panic will happen 
at run time, then the compiler is permitted to report the panic at compile
time, instead of waiting until run time.
