Labelled Values
===============
A labelled value is a kind of value that prints as a constructor expression.
This is a form of data abstraction: the representation of the value is
hidden behind the expression used to construct the value.

In this proposal I distinguish between an MVP "prototype" implementation
and a feature complete final design. The latter will learn from the mistakes
of the former, and might not be backward compatible.

Some kinds of labelled values, the ones that correspond to APIs, and not
to regular data, can have docstrings, which are stored in the value as metadata.

Here are the kinds of labelled values. Some of these kinds have
an associated definition syntax.
 * abstract data, constructed using a data constructor
 * data constructor (`data` definition syntax)
   This covers two cases: constructor functions, and singleton constructors.
 * labelled functions (`func` definition syntax)
 * constructors, a special category of labelled functions that
   construct labelled values.
 * labelled records, aka modules (`module` definition syntax)
 * algebras and theories (see [[Algebraic_DA]]).
   They use an `algebra` and `theory` definition syntax.

This means we are introducing 5 new definition syntaxes, which are type
specific. This makes Curv just like every other mainstream language, Lisp
dialect, and ML dialect. It's a strawman design which happens to be the
path of least resistance for designing and testing a prototype. A simpler,
more orthogonal design might become apparent later, once I have that prototype.

There are 4 keywords which can appear in a number of shared contexts:
    func, module, algebra, theory

Here are those contexts:
  Definition syntax, legal in a moduleexpr, can have a docstring:
    func id = funcexpr
    module id = moduleexpr
    algebra id = algebraexpr
    theory id = theoryexpr
  Top level of a *.curv file which is a child of a directory record:
    func funcexpr
    module moduleexpr
    algebra algebraexpr
    theory theoryexpr
  Constructor literal:
    param -> func funcexpr
    param -> module moduleexpr
    param -> algebra algebraexpr
    param -> theory theoryexpr

Labelled Definitions
--------------------
A labelled definition is prefixed with `data`, `func`, `module`,
`algebra` or `theory`. It can appear in a scoped record constructor,
or as a REPL command.

My current thought is that labelled definitions are *not* general definitions,
and are not permitted in the contexts `let defn in phrase` or `local defn`.
This restriction allows labels to be globally unique within a program, so
that they are easy to reason about. Globally unique data labels then become
a feature used by algebraic data abstraction for supporting overloaded
operations and run-time polymorphism in a modular way.

I'm copying this approach from other programming languages. It's the most
popular approach to nominally-typed data abstraction. It can be criticized
as a limitation on composability, forcing some kinds of code to be written
only at the module level, and not locally inside a function body. The excuse
is that this is a straw-man design, the limitation helps me get a working
prototype more quickly.

Docstrings
----------
A labelled definition can be preceded by a documentation comment:
    /// one line summary
    /// ...documentation body...
    <definition>
The doc string is stored as metadata in the labelled value.
It can be accessed using the REPL `help` command.

The one line summary is used when help is generated for a module.
The summary is printed for each module member with documentation.

A directory record is a module. It can have a docstring,
which is stored in the file `.doc`.

In principle, a constructor function could generate a docstring for
the labelled value that it returns. But in the prototype I'm not
supporting that feature.

Metaprogramming
---------------
Labelled values are first class values constructed at run time.
For each kind, there should be a metaprogramming interface that lets you
algorithmically construct a value of that kind, eg using imperative code
or a combinator API. This metaprogramming API would appear to involve the
ability to build 'anonymous' versions of labelled values from components,
followed by binding the anonymous value to a name.

For the prototype, we are proposing a metaprogramming API for building
labelled functions (with anonymous constructors), but there is no such API
for modules yet due to technical complexity. The missing module API will
also support algorithmically generated docstrings.

Labelled Functions and Constructors
-----------------------------------
A labelled function has a name (aka constructor expression), like F.
In which case it prints as F.

A one-argument labelled function is defined like this:
    func F = x -> expr
    func F x = expr
Then 'F' prints as 'F', but 'F x' prints as whatever the value returned
by F prints as.

A constructor is a labelled function that returns a labelled value,
where the result is labelled with the identity of the constructor function.
Data constructors are a special case.

A one-argument constructor is defined like this:
    func F = x -> labelledexpr
    func F x = labelledexpr
where labelledexpr is one of the following:
    func funcexpr
    module moduleexpr
    algebra algebraexpr
    theory theoryexpr

A labelled function may be curried, such that a partial application
prints as `F x` or `F x y`. Note that the label of the base function
is printed. But this is just an application of constructor functions.
A two-argument curried labelled function can be defined like this:
    func F x y = labelledexpr
    func F = x -> func y -> labelledexpr

Modify the syntax for lambda expressions so that a two-argument curried
labelled function can be defined like this:
    func F = x y -> labelledexpr
That is, 'x y -> expr' is the same as 'x -> func y -> expr'.

A funcexpr is an arbitrary expression that returns a function value,
which may be an anonymous constructor. This allows us to use combinators
to define labelled functions.

`rotate` is defined like this:
    func rotate = match [
        (a :: Num) shape -> ...,
        {angle, axis} shape -> ...
    ]

Since both arguments to match are constructors, the piecewise function returned
by match is also, effectively, a constructor. But this constructor status is
actually determined at runtime. When a labelled function F is called with an
argument x, and if the result is the labelled value 'F x', then F behaved
like a constructor for that argument value.

If you call an anonymous constructor,
the label of the result value contains the function literal.

Modules
-------
A module M (aka labelled record) may have a mix of fields: some are labelled,
some are not. When selecting a labelled field L from M, then M.L has the
label 'M.L'.

Any module member, labelled or not, can have a docstring. Docstrings for
unlabelled members are stored in the module's metadata. Docstrings for
labelled members are stored in the member values themselves.

A moduleexpr is a phrase that denotes a protomodule, which is the content
of a module prior to applying a label to it. Eg, in `module M = moduleexpr`.
I'm finding it tricky to decide what constitutes a moduleexpr and a protomodule.

 1. Syntactic Protomodules
    Certain syntactic phrases are interpreted during analysis as protomodules,
    based on the syntactic context in which the phrase is found.
    These phrases might include:
     * A scoped record constructor, augmented with optional docstrings
       and labelled definitions. These extra elements are only legal in this
       syntactic context.
     * `file <pathexpr>`. Needed by `module lib = file "lib"` in std.curv.
     * `<mcexpr> <argexpr>`. The <mcexpr> is a constant expression denoting
       a module constructor.
    This approach, if moduleexprs are limited to {...} syntax, is equivalent
    in expressiveness to the module syntax in most programming languages.
    Most languages don't allow abstraction over module literals.

 2. Phase Restricted Protomodules.
    Ambitious, but I think it allows general abstraction over modules without
    creating performance and semantic issues.
    Resembles "first class modules" in typed functional languages,
    in that run-time module values differ from compile-time modules.

 3. First Class Protomodules.
    Curv 0.4 has first class modules, with no complexity or restrictions:
    they are just record values. But this becomes trickier with labelled
    modules and metafunctions as module members.

First Class Protomodules
------------------------
Curv 0.4 has first class modules, with no complexity or restrictions:
they are just record values.

Naively, first class protomodules with no restrictions should be the simplest
and most expressive design. But it gets tricky with labelled modules
and metafunctions as module members.

What if we extend scoped module constructors with docstrings and labelled
definitions, and we say this returns a protomodule. What is this value?

Given a protomodule PM with a member A, what is the label of `PM.A`?
 1. It's illegal? That would suck; it means that adding a docstring or a
    labelled definition to a scoped record causes big change in behaviour.
+2. No module label is applied, just a relative symbol label ('A' in the
    example. This is consistent with Curv 0.4. But this doesn't give us
    globally unique labels. (Okay, *some* labels are globally unique.)
    It is compatible with labelled definitions in a 'let'.
 3. No label is applied; just return the definiens value. This is confluent
    with anonymous records, and consistent with globally unique labels.
    BUT: what's the definiens for a data constructor? Maybe this is incoherent.
 4. The label is 'M.F' where 'M' is replaced by the module literal? That seems
    consistent with the proposed label for the result of calling an anonymous
    constructor. But it's not supported by my proposed label implementation,
    and it would also suck due to extreme verbosity of printed representation.

Option #2, which eliminates the distinction between modules and protomodules,
and introduces a distinction between relative and absolute labels, seems best.

In this design, an existing labelled module can be relabelled by
    module M = <labelled module>
and a protomodule can be labelled by
    module M = {...}
How does this labelling/relabelling work?

Naively, you could traverse the tree representation of the module value,
looking for labelled values whose labels are rooted at the module that
you are relabelling. Each such value must be relabelled. You'll need to
look everywhere, including captured values within closures. This seems
complex and expensive.

Or, you could retain a thunk representing the unevaluated module, and
evaluate this thunk in a new context (which provides the new module label)
in order to relabel the value. This is less complex to implement.
There is a memory cost in carrying around those thunks at runtime.

std
---
`std` is a primitive expression denoting a labelled module that contains
all of the standard top-level bindings (except 'std' itself).

`std` is used in my proposal for globally unique labels. The labels
of all standard bindings are prefixed by `std.`. Eg,
 * `std.sin`.
 * `file "dirpath"` returns a labelled directory module whose label
   is `std.file "absdirpath"`.
`std` is analogous to the root directory (`/`) in Unix pathnames.

`std` should be a reserved word so that it can't be shadowed.
This ensures that globally unique labels have the same meaning in all scopes.

What kind of entity is `std`? The problem is metafunctions.
How does `std.file` work?
 1. In the "syntactic protomodules" proposal, `std` is special syntax,
    it is not an expression. `std.file` works, and is also not an expression.
 2. In the "phase restricted protomodules" proposal, `std` is promoted to
    an expression denoting a phase restricted value. This allows `std.file`
    to be an expression without implementing run-time metafunctions.
 3. If `std` is a first class module value, then we have run-time metafunctions
    (aka Lisp FEXPRs). Which means performance problems and loss of
    referential transparency.

Phase Restricted Values
-----------------------
In this proposal, `std` and `std.file` are values.
Metafunctions are values, but you can only call them at compile time.

A module M can contain a metafunction binding mf. `M.mf` can be invoked without
restriction, it returns a metafunction value. However, `M.mf x` will not invoke
the metafunction unless M is a constant, otherwise you get a compile time error
(phase error).

I like this idea that constant expressions have some additional powers.
That the phase restriction on metafunctions is imposed using constants.
Because you can abstract over constants, using 'let' or functions, without
adding additional language complexity. In Lisp, macros are not values, and
a shadow realm is created for abstracting over macros. But functions are
phase polymorphic, and no shadow realm is required.

Phase Restricted Protomodules
-----------------------------
In this proposal, protomodules are distinguished from modules. Both are values.
Protomodules are phase restricted values, which in general represent
unevaluated, anonymous modules. Modules are runtime labelled values.

The phase restriction aids performance: module values don't need to carry
around a thunk that is used for labelling or relabelling the module.

We could make protomodules similar to Racket 'units'. A Unit has
'imported variables' which must be resolved by linking with other units.
In Curv I'd call these 'declarations' (definitions without a definiens).
A set of units can be linked together to form a module.
A possible use for definitions might be to emulate 'partial methods'
in C#, which are used for metaprogramming in conjunction with code generators.
This stuff is speculative and outside of the MVP for next gen Curv.

The full set of operations are only available on the constant form.
You can't use 'M.a' since the member values are generally not available
(the module is unevaluated). The set of member names is available.

The main use for a protomodule is as RHS of a labelled definition.
This will evaluate the module, binding a label to it.
In this context, it must be a constant.

What syntax for constructing a protomodule? They are distinct from records.
How about
    #{defn, defn, ...}
where 'defn' can optionally be a labelled definition, and can optionally be
preceded by a doc string. With the metaprogramming/module linking extension,
'defn' can also be a declaration.

Data Constructors
-----------------
The most minimal form of the 'data constructor' definition syntax is:
    data name typeexpr
So that's the prototype. A more expansive version is patterned after Haskell
data type definitions.

How do you define a data constructor using directory syntax? Perhaps:
    data typeexpr
at the top level of the file.

Patterned Definitions?
----------------------
In the prototype, labelled definitions bind a single identifier.
However, earlier proposals have supported arbitrary patterns as
defienda. Eg,
    def id = labelledexpr
    def [x, y] =  pair_expr
    [x, def y] = par_expr

Equivalence, Equality and Referential Transparency
--------------------------------------------------
At present, I have two competing proposals for equivalence of labelled values.

 1. Globally unique labels. All labels are absolute.
    Labelled values are equal if their labels are equal.
    Composability is limited: some kinds of code must be written only at
    the module level, and not locally inside a function body.
    Labelled definitions are not general definitions, they can't occur
    in a 'let', only in a protomodule. Protomodules are not modules.

 2. Relative and absolute labels. Two labelled values are equal if the labels
    are equal and the payloads are equal. Labelled definitions may be used
    locally (in a 'let'), where they create values with relative labels.
    Labelled definitions can run in the REPL, creating relative labels.
    There is no protomodule/module distinction.

For #2, the payload of a labelled function, module, data constructor
is a function, module or type.

Either way, I need an equivalence/equality operator on all API values,
including functions and modules, because these can appear as constructor
arguments in a label.

Labels
------
A label is the "constructor expression" that a labelled value prints as.

  <label> ::= <symbol>                // variable label
            | <label> . <symbol>      // field selection label
            | <function> <argvalue>   // function call label

Storing the original constructor function value in a call label is useful
for "customizing" a parametric model (tweaking some of the parameters).
It also arises when labelling the result of calling an anonymous ctor.

Storing the original module value in a field formula may also be useful, but
would result in a recursive object cycle (requiring a tracing garbage collector
or cyclic reference counts). To avoid this, we store the module's label.

Labels are globally unique. There's no scope where two values can have the same
label but different provenance. This makes labels easy to reason about.
* Labels for standard bindings are prefixed with `std.`
* Labels for members of a top level directory record are prefixed
  with `std.file "pathname".`
* The only situation where a label is a bare symbol (other than `std`) is in
  the REPL local bindings scope. Those values cannot escape the REPL context.
