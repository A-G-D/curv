lib: a hierarchical module namespace for the standard library
=============================================================
Curv is meant to have a large standard library that provides a rich set
of primitives for constructing shapes. The new `lib` feature allows these
primitives to be organized into a hierarchical module namespace, with modules
that are only loaded into memory on first reference.

Suppose that `web_colour` is a standard library module that contains all of
the HTML5 colour names. To define it, create `lib/curv/web_colour.curv`,
then run `make install`. Then here is how you can use it:

    lib.web_colour.peach_puff

    let
        include lib.web_colour;
    in
        peach_puff

    let
        wc = lib.web_colour;
    in
        wc.peach_puff

Here are some ideas for new library modules.

web_colour
    Defines all of the HTML5/CSS colour names.
    Defines the function rgb(r,g,b): arguments are in the range 0 to 255.
    The colour names are defined using the `rgb` function.
    For example: `peach_puff = rgb(55,218,185);`
blend
    A richer set of blending primitives, pulled from multiple sources.
    @gsohler is working on a pull request to add the Mercury blend primitives
    from http://mercury.sexy/hg_sdf/
noise
    Math functions that hash their arguments to generate pseudo-random numbers
    that represent different kinds of visual noise patterns. Eg,
    * white noise (uniformly distributed random numbers).
    * value noise.
    * gradient noise.
    * fractal noise (fractal brownian motion). Useful for smoke, clouds,
      mountains, procedural textures.
    * cellular noise, aka Worley noise, aka Voronoi noise.
    This is a foundation for other library modules, such as fractal and texture.
    Resources:
    * http://github.com/ashima/webgl-noise
    * https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
fractal
    Primitives for making fractals, perhaps based on Mandelbulber
    and the example code in Fragmentarium.
texture
    Primitives for making 2D and 3D procedural textures.
sculpt
    Engraving & embossing primitives. Modify or deform the surface of an object,
    in order to apply a decorative pattern.
lattice
    Regular lattices, like cubic and tetrahedron/octahedron.
    Individually construct the vertices, edges and faces of such lattices.
    A "Voronoi" lattice based on cellular noise.
polyhedron
    Construct regular polyhedra, such as platonic, archimedean, catalan,
    and their derivatives.
    Individually construct the vertices, edges and faces of such polyhedra.
    Transform polyhedra into new polyhedra using Conway polyhedron notation.
repetition & space folding
    Eg, the Mercury space folding operators from http://mercury.sexy/hg_sdf/
    There might be overlap with the lattice and polyhedron modules:
    consider if APIs should be be integrated.

Additional resources:
Look at the examples in Fragmentarium, or perhaps shadertoy.com, and recreate
interesting examples using high level library primitives, inventing new
primitives as necessary.
