Reactive Programming: Connecting External Inputs to a Shape
===========================================================
Inputs:
* Audio input, processed into power levels within frequency bands.
  Eg, from a microphone, or a sound file.
* OSC events (Open Sound Control).
* Video input.
* Graphical sliders control shape parameters.
* Mouse and keyboard.

Create interactive animations to explore mathematical objects.
A video synthesizer for VJ-ing, or for a public art installation.

Curv is a pure functional language.
What does this look like at the language level?

Fran: Functional Reactive Animation
-----------------------------------
Fran was the first FRP system: Conal Elliott, 1997:
http://conal.net/papers/icfp97/icfp97.pdf

Animated Values (Behaviours)
----------------------------
In Fran, a *Behaviour* is an "animated value": one that varies over time.
Internally, a Behaviour encapsulates a function mapping time to a value.
Externally, a Behaviour with value type V can be used as an argument to any
operation expecting a value of type V, and the result is another Behaviour.

Curv has 3 kinds of animated values: shapes, colour fields, and intensity
fields. An animated shape can be used as an operand to any shape operation,
yielding another animated shape. So Curv is almost an FRP system,
it just needs to be generalized.

In an FRP system, an audio input would be modeled as an animated number.
From a programming perspective, using an animated number variable is like
using a uniform variable in GLSL. In an FRP system, `time` is a global
variable bound to an animated number, and other animated values can be
constructed by expressions over `time`.

A critical difference between GLSL and Curv or Fran is that a behaviour value
is actually a function from time to a value. You can access that function,
and call it with a constructed time value.

Next step for Curv: animated numbers.

In Curv, do we need to restrict expressions over `time` to the GL subset,
so that they can be implemented on the GPU?

Events, and Integrating over Time
---------------------------------
To handle mouse, keyboard and OSC events, we need *Events* (another Fran
concept).

In order to create something like a text editor, we need values that evolve
over time, accumulating changes triggered by events. This is missing from Curv.

I don't think that Event streams are a requirement for Curv. In the VJ and
interactive art use cases, use a front end that converts events to an animated
tensor value that is robust to being sampled at various frequencies.

Integration over time is a big change from how Curv currently works on the GPU.
You can do it on the CPU.
It is a useful technique for 3D modelling, so I must consider it in more detail.
(Let the CPU language render things on the GPU and then query the results.)
In the context of FRP, the question is whether animated values can integrate
over time, or whether they have GL-restricted semantics that prevent this.

(TODO: add details.)

Behaviour Proposal
------------------
What is the Curv language interface for a time varying external input I?
It needs to be simple. The syntax should be 'I'. Curv must be pure-functional,
expressions must be referentially transparent. So use FRP Behaviours.
* 'I' is a behaviour variable. A behaviour is a sequence of time-stamped values,
  or a function from time onto a value. This comes from FRP.
* A primitive behaviour value:
  * Is represented by a variable in the std namespace. There are a fixed number
    of these with distinct names.
  * Compiles into a GLSL uniform variable name.
  * Has a GL type like Num or Vec3. If X is a numeric behaviour, 'is_num X'
    is true.
  * The only way to extract a numeric value from a primitive behaviour variable
    is during GPU execution. In the standard interpreter, it remains an
    abstract <behaviour> value.
* Composite behaviour values:
  * Numeric operations are generalized to accept numeric behaviours as
    arguments, in which case a numeric behaviour is the result.
  * A composite behaviour value is represented, in the general case, as code,
    a thunk that depends on one or more primitive behaviour variables.
    Eg, if `time` is a primitive behaviour, then `sin time` is a thunk that
    computes a new number each time the time changes.
  * A behaviour need not be code. For example, '0*B' can return 0 if B is
    a numeric behaviour. So a number is a special case of a numeric behaviour.
    These optimizations increase the expressiveness of GL by eliminating code
    from a behaviour thunk that might not be GL compatible.
  * All primitive operations are extended to accept behaviour arguments.
* When you print a behaviour B, you see the names of all primitive behaviours
  that B depends on.
* Invoking a behaviour with modified primitive behaviour values.
  * In FRAN, `Behaviour` is just a wrapper around a function; you can access
    the function directly and call it with an argument.
  * In Curv 0, shape dist functions have an explicit time parameter,
    which you can specify as something other than the current time. This
    permits temporal shape transformations.
  * So in this proposal, there's a syntax for invoking any Behaviour with
    modified values of any primitive behaviour variable. Since a function can
    itself be a behaviour (dist and colour functions are important examples),
    this syntax isn't just function call syntax. Eg, b@{var1=val1,...}
    Reactions:
    * Is this necessary? Why not use ordinary functions to parameterize values?
    * Are the semantics similar to dynamically scoped variables?
    * Is this really part of the Behaviour feature, or an orthogonal feature?
    * 'b@' converts a behaviour to a function.

Probably I'll call these 'reactive variables' and 'reactive values', since
'reactive' is a well known buzzword.

Does it make sense to support new user-defined behaviour variables?
Associate these variables with picker configs. Is this a workable design for
parametric shapes? Maybe we have a feature, 'parametric values'.

Parametric Records
------------------
How does this relate to the parametric record proposal, for connecting shapes
to graphical inputs? A parametric record is a kind of function that: maps a
parameter record onto a shape, gives all parameters initial or default values,
and advertises those parameters so that we can hook them up to external inputs.

Maybe call this a Reactive Record. One key feature of a Reactive Record would
be restricting expressions over reactive parameters so that they can be
compiled into GL.

Relation to other FRP systems
-----------------------------
Fran prioritized simplicity of use and expressive power over ease and efficiency
of implementation. Subsequent FRP systems have made different tradeoffs.
* An efficient implementation means different things on a CPU vs on a GPU.
  The way you write efficient code is different. Curv needs to follow its
  own path.

There are many varieties of FRP: continuous vs discrete time, push vs pull vs
push-pull, etc.

Curv has a very particular architecture, based on volume representation,
continuous fields (distance and colour fields), GPU evaluation, animation
as a pair of 4D space-time fields. Is there a variety of FRP that fits this
architecture? Fran seems like a good fit: continuous functions parameterized
by time.

Elm is a functional language; it transitioned from a discrete time, "push"
variety of FRP to the new "Elm architecture" that is said to be simpler
and more powerful (than the old Elm FRP model). But is it? The animated clock
example on elm.org has more complexity and boilerplate than a Fran or Curv
solution. The real test is a complex example that processes events and
integrates over time, comparing Elm to Fran code.

Pull vs push:
* Fran is a "pull" system: continuous resampling of data, efficiency issue.
  Like how Curv currently works on the GPU. The efficiency issue in Curv is
  redrawing the view 60 times per second even when nothing changes.
* Elm is a "push" system: discrete events, values only change when events occur,
  global event dispatcher pushes events. In Curv, a CPU side event dispatcher
  that only draws a frame when something changes would improve GPU efficiency.

Figure out some programs I'd like to write, try implementing them using
different paradigms, see what is simplest and easiest.
