## Fluent String Escapes
Here, "fluent" means pronounceable and readable as (close to) English prose.
Verbosity is not considered a problem for fluent interfaces.
More important is that the meaning of the code is obvious.

${dollar}  expands to $    similar to &dollar; in HTML5
${quot}    expands to "    similar to &quot; in HTML5
${apos}    expands to '    similar to &apos; in HTML5

    print "Can't open file $quot$filename$quot: $error";
    print "Can't open file ${quot}${filename}${quot}: ${error}";

## Compact String Escapes
The escape sequences for $ and " should be compact, and should not grow
exponentially if you escape the escape sequence, and escape it again.

$.  expands to $      instead of $$
$-  expands to '      instead of '', in a quoted identifier
$=  expands to "      instead of "", in a quoted string

Earlier proposal, inconsistent with quoted identifiers:
$'' expands to "      instead of ""

It's compact because the characters after the $ are not metacharacters
(neither $ nor " nor '). Thus, this escape syntax is more suitable for
iterated string escaping/unescaping. The escape sequences do not grow
exponentially if you escape an escape sequence, then escape it again.
    $... -> $.. -> $. -> $
    instead of $$$$$$$$ -> $$$$ -> $$ -> $
Also:
    $..= -> $.= -> $= -> "
    instead of """""""" -> """" -> "" -> "

Readability: it is easier to visually parse these sequences out of the noise
of the surrounding text, without counting characters.
* " characters do not appear in the middle of a quoted string, so it is easier
  to scan and find the start and end of the string.
* . - =, which are not full height characters, are juxtaposed with $, which
  is a full height character, making the pair easy to parse visually.
* Mneumonics:
    = is a sideways " character.
    . is the smallest ASCII character, so $. is visually close to $

repr "foo" => "$=foo$="
repr(repr "foo") => "$.=foo$.="
print "Can't open file $=$filename$=: $error";

A short Quine:
    (s->"$s$(s)")"(s->$=$.s$.(s)$=)"
In the REPL, the output prints as
    "(s->$=$.s$.(s)$=)$=(s->$.=$..s$..(s)$.=)$="
instead of
    (s->"$s$(s)")"(s->""$$s$$(s)"")"
which prints as 4 characters longer than the compact syntax:
    "(s->""$$s$$(s)"")""(s->""""$$$$s$$$$(s)"""")"""

The downside is that this is novel syntax. You have to memorize it.

## Compact Escapes, Version 2
I implemented `$.` and $=`. The implementation is simple, but it's not very
recognizable to developers who are used to the `\\` and `\"` escapes of C-like
languages.

Here's another design:
  $ -> $$ -> $\$ -> $\\$
  " -> $" -> $\" -> $\\"
Note that `$\\\"` is a multi-character escape sequence
that is rewritten to `$\\"`. These escape sequences should be easier for
developers to recognize in text, since they reference the C-style escape
sequences using a kind of visual pun. This syntax is probably also easier
to remember and easier to figure out the meaning of if you aren't familiar
with it.

    print "Can't open file $"$filename$": $error";
Quine:
    (a->"$a$(a)")"(a->$"$$a$$(a)$")"
 vs (a->"$a$(a)")"(a->$=$.a$.(a)$=)"
The new design might be more *recognizable*, but in the Quine, it's harder
to visually parse, because: $ is not always the beginning of an escape,
and " is not always the beginning or end of a string literal.

Syntax colouring helps with readability and recognizability, but syntax design
is still quite important.

Here's a variant of the new syntax that helps with readability:
  $ -> $\$ -> $\\$ -> $\\\$
  " -> $\" -> $\\" -> $\\\"
The benefit is that $ and " are always preceded by \ when they are quoted.
    (a->"$a$(a)")"(a->$\"$\$a$\$(a)$\")"
 vs (a->"$a$(a)")"(a->$=$.a$.(a)$=)"

## Swift-Inspired Fat String Literals
`#"... #${foo} ..."#` is a fat string literal. The `#` can be replaced with
2 or more hashes. $ escapes are prefixed with the same number of hashes.
Use case: quoting a multiline string containing " and $, without escaping
each occurrence of " and $. Not recommended if you have many escape sequences.
    #"Can't open "#$filename": #$error"#
Iterated escaping:
    "foo" => #""foo""# => ##"#""foo""#"##
 vs "foo" => "$=foo$=" => "$.=foo$.="

## Indentable Multi-Line String Literals
It should be possible to indent a multi-line string literal
without adding the indentation to the string content.

Solutions I've seen:
* Nix expression language:
  * If the first line of the literal is " then whitespace then newline,
    then those characters are ignored.
  * Each line of the string begins with a variable amount of whitespace.
    The longest initial whitespace prefix that is common to each line is
    ignored.
  Problem: this is visually ambiguous, especially for a long string literal
  that spans multiple screens, where the lines have varying indentation.
* C++ string literal concatenation
    "first line\n"
    "second line\n"
    "final line\n"

My solution:
* A non-initial line of a multi-line string literal begins with optional
  whitespace, followed by the '|' character, and this prefix is ignored.
  Note that '"' and '|' are both a single character, so they line up:
    "first line
    |second line
    |final line
    "

### Extension: line continuations
Problem: break up a long line over multiple source code lines.

Solution: The escape sequence `$ optional-spaces-and-tabs newline`
expands to nothing.

    "First line.
    |This line$
      | is broken up$
      | over multiple source lines.
    |Final line.
    "

As a special case, if you want the first line of a multi-line string
to not contribute any text (not even a blank line), then you could write
    my_string = "$
        |First line.
        |Second line.
        |Final line.
    ";

Use this escape to write embedded, multi-line statement blocks which themselves
do not introduce an additional newline.
    "solid polyhedron
    |${for (f in triangles)
        "facet normal 0 0 0
        |  outer loop
        |${for (v in f)
            "    vertex ${v[X]}, ${v[Y]}, ${v[Z]}
            "
        }$
        |  endloop
        |endfacet
        "
    }$
    |endsolid polyhedron
    "

You can introduce comments into the middle of a multi-line string literal
like this:
    "Some text.
    |${ /* comment */ }$
    |Some more text.
    "

### Ugly line continuations (do not use)
Note that these examples can also be written using ${} split over 2 lines.
But, this coding style is too ugly to recommend.
Eg,
    "First line.
    |This line${
      } is broken up${
      } over multiple source lines.
    |Final line.
    "
Or,
    "solid polyhedron
    |${for (f in triangles)
        "facet normal 0 0 0
        |  outer loop
        |${for (v in f)
            "    vertex ${v[X]}, ${v[Y]}, ${v[Z]}
            "
        }  endloop
        |endfacet
        "
    }endsolid polyhedron
    "

### Extension: clean syntax for embedded, multi-line statement blocks
As an alternative to writing
    |${ ... }$
you can instead write
    { ... }
within a multi-line string literal.

For example,
   "solid polyhedron
   {for (f in triangles)
      "facet normal 0 0 0
      |  outer loop
      {for (v in f)
         "    vertex ${v[X]}, ${v[Y]}, ${v[Z]}
         "
      }
      |  endloop
      |endfacet
      "
   }
   |endsolid polyhedron
   "
A continuation line may begin with `{`, a code insertion that continues
to a matching `}`. After the `}`, whitespace is eaten up to and including a
newline, which is dropped.

An embedded comment:
    "Some text.
    { /* comment */ }
    |Some more text.
    "

If the first element in the string is a multi-line block,
you can begin the string with a `"$` line:
    "$
    { for (a in list)
        "${a}
        "
    }
    "

### Can the syntax be even more regular?
A multi-line string literal looks like this:
    """
    |First line.
    |Second line.
    |Final line.
    """
If you don't want a trailing newline after the final line, use:
    """
    |First line.
    |Second line.
    "Final line."
    """
Another use case:
    """
    |First line.
    "This line"
      " is broken up"
      | over multiple source lines.
    |Final line.
    """
The STL generator becomes more regular:
   stl triangles =
      """
      |solid polyhedron
      {for (f in triangles)
         """
         |facet normal 0 0 0
         |  outer loop
         {for (v in f)
            """
            |    vertex ${v[X]}, ${v[Y]}, ${v[Z]}
            """
         }
         |  endloop
         |endfacet
         """
      }
      |endsolid polyhedron
      """;

A multi-line string literal is a sequence of zero or more segments
between """ delimiters.
   `|...` includes a trailing newline. Within `...`, `"` is not special.
   `"..."` does not include a trailing newline.
   `{...}` is a string comprehension.
   Commentary is allowed between segments.

There is no trailing line-continuation escape. The information you need
to interpret a segment is in the first non-white character on the line.
Trailing-newline segments always begin with |.
And that's the benefit.

## String Comprehensions
"${ stmt1; stmt2; stmt3 }"
eg, "${if (c) "foo"}"

If I allow for loops on strings, following the recent change to OpenSCAD,
then `for (c in "abc")` generates the sequence "a", "b", "c", which when
placed inside a string comprehension, gives:
    "${for (c in "abc") c}" == "abc"
This does not support generic algorithms across lists and strings,
like what you get in Haskell, where a string is a list of characters.
