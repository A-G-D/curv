This is an alternate design for parametric shapes with graphical value pickers.
We now have picker parameter patterns like
    d :: slider(1,10)
What if we allow them everywhere that they make sense?

They make sense in phrases where there is a record expression as a body,
and a separate parameter pattern. Like these:
 * f (d :: slider(1,10)) = cube d
 * let d :: slider(1,10) = 2 in cube d
 * d :: slider(1,10) -> cube d
 * for (d :: slider(1,10) in 1..10) cube d
They don't make sense in field definitions in a record constructor.

The record is extended with 'constructor', 'argument' metadata.
For a `let` phrase, the argument is a record.

Syntax
------
How do we know to trigger this behaviour (assert that the body is a record,
and generate constructor metadata)?
 1. The 'parametric' keyword must be present. In the case of function literals,
    the parametric property can be inherited from the parent phrase,
    see proposal below. E.g.,
     * parametric f (d :: slider(1,10)) = cube d
     * parametric let d :: slider(1,10) = 2 in cube d
     * parametric d :: slider(1,10) -> cube d
     * parametric for (d :: slider(1,10) in 1..10) cube d
 2. Special syntax for picker assertions. This syntax triggers the behaviour.
    E.g.,
        d ::: slider(1,10)  // delete a ':' to disable picker GUI for 'd'
        d pick slider(1,10)
    The right argument of a picker assertion is a picker value.
    Picker assertions are only legal in contexts where they can be acted on.
    A pattern containing picker assertions is a picker pattern.

    let
        Diam ::: slider(.5, 2) = 1;
        Stick_Len ::: slider(2, 8) = 4;
        Colour ::: colour_picker = red;
    in
    union(candy, stick)
    where (
        candy = sphere Diam >> colour Colour;
        stick = cylinder {h: Stick_Len, d: Diam/8} >> move(0,0,-Stick_Len/2);
    )

    I like the ease with which `let` bindings are converted to picker
    parameters.

            Diam ::: slider(.5, 2) : 1;
            c ::: colour_picker -> shape -> make_shape {...}

            Diam ::> slider(.5, 2) : 1;
            c ::> colour_picker -> shape -> make_shape {...}

            Diam ::* slider(.5, 2) : 1;
            c ::* colour_picker -> shape -> make_shape {...}

            Diam ::? slider(.5, 2) : 1;
            c ::? colour_picker -> shape -> make_shape {...}

            Diam ::/ slider(.5, 2) : 1;
            c ::/ colour_picker -> shape -> make_shape {...}

            Diam ::& slider(.5, 2) : 1;
            c ::& colour_picker -> shape -> make_shape {...}

            Diam ::# slider(.5, 2) : 1;
            c ::# colour_picker -> shape -> make_shape {...}

            Diam pick slider(.5, 2) : 1;
            c pick colour_picker -> shape -> make_shape {...}

`let` bindings are a special case, because we don't support dependencies
between parameters. How to enforce this restriction?
* Perhaps we distinguish recursive from parallel let.
  * `parametric let ...` is a parallel let.
  * Or, parallel let uses ':' definitions instead of '=' definitions.
    This echoes the distinction between ':' and '=' field defs in records.
    (And sequential let uses ':=' definitions.) So:
        let
            Diam ::: slider(.5, 2) : 1;
            Stick_Len ::: slider(2, 8) : 4;
            Colour ::: colour_picker : red;
        in ...
* Compiler dependency analysis reports error for dependent parameters.

Dependencies between parameters would be useful in some cases:
* [Dependent Parameters] Range of one parameter depends on value of another.
* [Variant Parameters] Some parameters only appear if a toggle is set to true,
  or if an enum is set to a particular value.

[Dependent Parameters]
* For a let phrase, we could allow parameter dependencies in a recursive let,
  and have the compiler report illegal dependencies. Or, you could nest two
  parallel let clauses or parametric clauses.
* For a function, you could use a curried function, with the dependee parameters
  in the first fun param, and the dependents in the second fun param. This is
  consistent with the nested let construction.
* For a `for` loop, you nest a `let` inside the `for`.
Nested binding constructs for the win.

[Variant Parameters]
This can be handled by modelling a parameter set as an algebraic type.
* Within the parameter bindings, there is a pattern that matches an instance
  of an algebraic type, and binds it to a identifier.
* Within the body, you must do a pattern match on the identifier to discover
  the variant name (using `match` I guess), then you have a pattern that
  matches the value for that variant.

An Algebraic Value is a single-field record (field name is variant name).

Here's a predicate that matches an Algebraic Value:
  is_variant{ vname1: <pred1>, vname2: <pred2>, ... }
The predicate arguments could be pickers, in which case the result is also
a picker. And the GL type system is extended with variant types.

Pattern match an algebraic value V to discover its variant:
  V >> match[ {vname1: a} -> do1(a); {vname2: b} -> do2(b); ... ]
In GL code, a variant value must be pattern matched like this in order to
be used, due to strong typing.

Viewer
------
Using the syntax sketched out above, how do we use metadata to lay out
value pickers in the Viewer GUI?

    cube 2
    >> colour red

    (colour red) (cube 2)

precord:
    .constructor = (colour red)
        pfunction:
            .constructor = colour
            .argument = red
    .argument = (cube 2)
        precord:
            .constructor = cube
            .argument = 2

In the Viewer, we display pickers as a hierarchy with flattened pipelines,
in pipeline order: output the argument as a single node, then output the
constructor as a series of nodes. Constructor names are used as labels.
    cube: 2
    >> colour: red

Parametric Shape Constructors
-----------------------------
The above assumes `colour` has a simple definition like this:
    colour (c ::: colour_picker) shape = ...

But, `colour` is currently defined as
    colour c shape = c >> match
      [
        c :: is_vec3 -> make_shape { ... shape; colour p : c };
        ...;
      ]
I could add some more rules for the body of a function definition to inherit
the function name. Consider this definition of `colour`:
    colour = match
      [
        c :: is_vec3 -> shape -> make_shape { ... shape; colour p : c };
        ...;
      ]
The lambdas in the match argument list could inherit the name 'colour'.
This version of `colour` also has the benefit that a partial application
with a bad first argument reports an error immediately. And presumably,
using the IDE to query the first argument also works better.

Consider:
    colour = match
      [
        c ::: colour_picker -> shape -> make_shape { ... shape; colour p : c };
        ...;
      ]
The function 'colour' has the name 'colour' (it is a term).
'colour <vec3>' is parametric, because of the ':::', and inherits the name
'colour'. 'colour <vec3> <shape>' inherits the parametric property and the
name property.
