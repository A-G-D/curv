A 'prototype' is a record with a `call` field (constructor function)
that constructs a new instance (or clone) of the record, with different
parameterization, given a single argument value,
which is typically a record, number or list.
Based on an idea from OpenSCAD2.
Examples include `cube` from the standard library.

Ideally, this new instance (the clone) is also a prototype.
* Some prototypes have .mitred and .exact variants. These variants should
  also be prototypes. The clones should also have .mitred and .exact fields.
* Some prototypes have piecewise constructor functions (in the call field).
  Their clones should also have piecewise constructor functions.

It is reasonable for all named prototypes to be terms.
There is no conflict between terms and the different kinds of prototypes
(non-record constructor arguments, variants, and piecewise constructors).
So if we are providing magic syntax to simplify the definition of prototypes,
that same syntax can also create all of the term metadata, right?

There are also anonymous prototypes, where some of the metadata is missing.
A parametric record is pretty much an anonymous record term.

It is not reasonable for all record terms to be prototypes.
Even if a record term has a call field, it need not be a prototype.
So terms and prototypes are distinct concepts.

We can consider prototypes to be a generalization of parametric records.
All prototypes are also parametric records.
This would mean we support anonymous prototypes.
P-recs were created to support the customizer. It's already the case that
not all p-recs have pickers. Likewise, not all prototypes have pickers, not
all structure in a prototype is recognized by the customizer.

---
So: Prototypes subsume and replace parametric records.
Named prototypes are terms. There are also anonymous prototypes.

Syntax for constructing prototypes?

This is from the Picker and Match papers.
All syntactic forms contain parameter patterns that may optionally
contain picker assertions, which are usable by the customizer.
 1a. parametric f x = r(x)
        f is not a prototype. f x is a prototype.
        f and f x are terms.
 1b. parametric x -> r(x)
        function that maps x onto an anonymous prototype.
 2a & 2b: curried parametric functions (named & anonymous)
 3a & 3b: piecewise parametric functions (named & anonymous)
 4.  parametric let x = 2 in r(x)
        result is an anonymous prototype.
 5.  parametric for (x in 1..10) r(x)
        result is a sequence of anonymous prototypes.

Piecewise constructor functions:
* form 1a with a multipart definition.
* anonymous piecewise parametric function, see Match:
    parametric match [...]

Variant prototypes:
