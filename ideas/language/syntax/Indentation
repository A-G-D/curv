## Indentation As Syntax
The main problem that "indentation as syntax" solves is the redundancy between
two kinds of information: layout, that tells the human reader how the code is
hierarchically structured, and punctuation like { ; } that tells the compiler
how the code is structured. It's a problem if you have to manually keep these
two kinds of information in sync, and confusing if they get out of sync.

I would like a smart editor that automatically generates layout for an
expression-oriented functional language, and that automatically reflows
the text when the window width changes. With such an editor, I don't need
to manually specify layout. I don't need to ever hit the return key or
issue indent/undent commands. The layout is generated from the punctuation
that I write. This is attractive for Curv, since it's not statement oriented:
instead of a single kind of list (a statement list) that can be described
using layout, there are 3 kinds of list (a;b), [a;b] and {a;b} that need to
be distinguished using punctuation.

This means that, instead of getting rid of manually specified punctuation,
I'd like to get rid of manually specified layout. Indentation as syntax is
not my preferred solution to the problem. (Structured Lisp editors work this
way: ParEdit and ParInfer.)

The consequence of this to Curv, especially in the generalized Mixfix operator
proposal, is that statement lists are delimited by ( ), not indentation,
and statements are terminated by ;, not newline.

Pyret
-----
The Pyret language (pyret.org) has the same opinion, except that they also have
a Python inspired syntax with no semicolons. Quote:

    We believe indentation is critical for readable code, but we don't want the
    whitespace of the program to determine its meaning. Rather, the meaning
    of the program should determine its indentation structure. Indentation
    becomes just another context-sensitive rule.

    Unambiguous syntax (the reason for explicit end delimiters) means you
    can copy-and-paste code from email or the Web, and its meaning won't
    change. Your IDE can help you reindent code without worrying that doing
    so will change the meaning of the program.

Pyret achieves a Python-like appearance without significant indentation or
significant newlines using this strategy:
 * Mixfix forms are self-delimiting: they end with the 'end' keyword.
 * Mixfix forms are hard coded into the grammar, and mixfix keywords are
   reserved words. Thus, when encountering a mixfix keyword inside a mixfix
   statement list argument, we know if it continues the outer mixfix or if it
   begins an inner mixfix, from the grammar.
 * Non-mixfix statements are self-delimiting, like Turing.

Strangely, the hatred some people have for semicolons does not extend to commas.
Only Lisp has comma-free list syntax, and Clojure lets you optionally type the
commas for people who miss them. Note, there's no way to eliminate commas
from a list syntax that uses traditional Algol-like expressions. For one,
you get ambiguity from prefix vs infix minus: [a,-b] vs [a-b].

Curv can't shed its semicolons without going the Haskell route and introducing
a mode where newlines are significant. I might be able to design an action
syntax that doesn't need separators. The problem is in list comprehensions,
where a compound statement (a;b;c) is a compound value generator, meaning that
the items can be general expressions.

Other Stuff
-----------
let:
  x=1
  y=2
in x+y

Also, `do:`, `where:`, `[:` and `{:`.

Another idea for compound value constructors:
  []:
    1
    2
    3
  {}:
    a: 1
    b: 2
  "": // multiline string. '>...' is a string segment that includes a newline.
    >Now is the time for all good men
    >to go to the aid of their party.

TOML supports records and list without end tokens or commas. Newline is
significant: it terminates an item. But indentation is not significant.
The designer of TOML claims significant indentation is a big problem in YAML.

TOML and Java .properties allow dotted identifiers when defining
nested record items, eg like 'foo.bar.baz = 42'.

In TOML, to avoid significant identation, structure headers encode their
nesting level. Plus, a non-compound item can't follow a compound item on the
same level. This is more complex and arbitrary.

Python3 forbids mixing spaces and tabs. YAML forbids tabs altogether.
Here's a person who hates YAML config files: "The problem occurs when you are
SSH'ed to a machine you are setting up, or one that is customer owned, you use
whatever editor is around to make a quick edit, not realising that the file
labeled .conf is actually a YAML file, you hit tab because it makes logical
sense and then shit breaks."

from eev.ee:
* Python’s syntax is relatively low on noise.
* If your language has braces, then you are indenting for the sake of humans
  (because humans are good at noticing alignment and edges), and bracing for
  the sake of computers. That’s double the effort for something as mundane
  as where a block ends. If they get out of sync, then your code naturally
  breaks in a way that’s very difficult for you to detect.
* Braces mean that you waste an entire line at the end of every block just for
  a single closing brace. See Locality.
* Locality. A stronger and better-defined constraint than “readability”.
  I want to maximize how much I can know about runtime context for a given line
  of code, while minimizing how much stuff I have to read (or, worse, hunt
  down). Brevity is part of this: an idea that seems simple to humans should
  ideally take less code to express.
