https://elm-lang.org/news/the-syntax-cliff

Curv has a complex syntax. For somebody not familiar with this kind of language,
making mistakes, understanding and fixing syntax errors could involve a steep
learning curve. This seems to be the case for Elm, and Curv is not far from Elm.

How can we mitigate this problem?
* Can the syntax be made more beginner friendly?
  There are languages designed for teaching, eg the Pyret language.
* Can syntax error messages be more helpful? That's what Elm has done.
* Provide an integrated programmer's assistant editor that makes it easier
  to write code without syntax errors. For Lisp, we have ParEdit and ParInfer.
  For an Elm-like syntax, investigate Hazel.
  * Perhaps layout is fully automatic. Certain syntax errors will result in
    unexpected layout, prompting you to fix the problem.
* I have a plan to simplify the syntax by reducing syntactic variability.
  * Deprecate 'where' in favour of 'let'.
  * Deprecate all of the redundant cases of ',' vs ';', leaving only:
      [a,b] {a:1,b:2} {a=1;b=2} (stmt1;stmt2)
    Now commas are used only in list and record comprehensions, while
    semicolons are used in modules and compound statements.
  Will this help beginners? I once had a tech support request asking me
  to explain: when should you use commas, when should you use semicolons?

https://www.case-podcast.org/27-felienne-hermans-on-programming-education/transcript
From research on how people learn how to program.

> One of the skills that programmers need is to absolutely memorize the syntax
> of their programming language by heart.
[And this knowledge must be acquired early in the learning process.]

So how do we make this easier, in the context of Curv?
* Simplify the syntax.
  Make the grammar smaller and more regular.
  Fewer levels of precedence (I never managed to fully memorize the C operator
  precedence table).
* Most Curv users will all know some other programming language.
  Making Curv syntax similar to other languages might help reduce the
  memorization load, although it depends on what other languages you know.

On the other hand, I also want to make Curv friendlier for artists who
might never learn a language like C.

> Computer science has a higher drop-out rate than programs that are
> typically seen as very hard, like physics. So why is that? Probably
> because some of the students just never reach the level where that
> algorithmic explanation makes sense to them, because they're still
> struggling with "How does the syntax work? How will the compiler interpret
> this program?"

So the syntax cliff is real.

Hedy and Pronounceable Programming
----------------------------------
https://github.com/Felienne/hedy
https://www.youtube.com/watch?v=CgR5mSAGxtA&feature=youtu.be&t=2663

Hedy is a 'gradual programming language', which increases in syntactic
elements level by level. Directly attacks the problem of teaching complicated
Python syntax to public school students. Illustrates all the problem areas
in Python syntax.

Parentheses and the colon are the hardest syntax to learn for high-schoolers,
possibly because of their pronunciation. So this is introduced last.
According to this research, learners verbalise programs and work with the
pronounced version as their mental representation. Any ambiguities with the
pronounced version causes problems. Eg, for non-English speakers, the 'for'
keyword is hard to grasp because it sounds like '4'. So Hedy uses 'repeat'.

(I did some previous research uncovering that 'fun' is a bad abbreviation
for 'function' for non-English speakers due to confusion with 'fun' in English.
So 'func' is better.)
