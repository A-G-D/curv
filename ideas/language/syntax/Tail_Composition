Tail Composition, aka Tail Nesting, aka Chaining
------------------------------------------------
The Curv syntax supports "tail composition", a feature absent in Lisp, and
present in varying degrees in Algol descendents.

Tail Composition is the ability to extend an expression by appending clauses
to the end, without causing parentheses to pile up at the end. As the
expression grows, the final parenthesis would get further and further away
from its mate at the start of the expression.

curried function calls:
    f x y z
postfix expressions
    a.b.c
    f(x).g(y)
infix arithmetic expressions
    a + b + c
pipelines
    cube 3 >> rotate {axis: Z_axis, angle: 45*deg} >> colour red
statement-like
    let D in do A in E
    if A then B else if C then D else E

Chained Lisp
------------
A variant of Lisp syntax that supports chains.
(f x) is a function call.
(f x y z) is a curried function call.
(let (def1 def2) do (stmt1 stmt2) result)
    wait, how does the third argument of 'let' work here?

Pipelines are the Thing
-----------------------
APL has right-to-left pipelines
    atom op <everything-to-the-right>
    op <everything-to-the-right>
combined with very simple operator precedence.

Curv has left-to-right pipelines. I don't need 13 levels of operator precedence,
but I do need pipelines. Let's reduce Curv expression syntax to the essence.
A simplified expr syntax will be easier to make graphical.

    <pipeline> op                       -- unary case
    <pipeline> op <arg>                 -- binary case
    <pipeline> op <arg1> <arg2> ...     -- general case

    'a + b + c' is a binary pipeline.

To convert a pipeline into an argument, use parentheses for grouping.
See also Infix

Extended >> Pipelines
---------------------
A proposal to make >> pipelines more chainable.

You are typing a pipeline, and suddenly you need to grab a pipeline value
so you can reference it later.
      a >> x -> b >> f x
  is  a >> (x -> b >> f x)

      a >> let x=foo in b >> f x
  is  a >> (let x=foo in b >> f x)

      a >> do print "here" in b >> f x
  is  a >> (do print "here" in b >> f x)

Downside: left operand of -> is now a term, not a pipeline. Requires more
parens in `match` expressions: match[(x::Num)->x+1,...]. Unless I prefix
lambda exprs with \ or fn like in Haskell or Rust.
