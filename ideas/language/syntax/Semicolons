Canonical Syntax
----------------
Sebastien expressed concern that Curv syntax provides too many ways
of expressing the same things (in ways that other languages don't).

The following are equivalent list expressions: (1,2,3) [1,2,3] [1;2;3].
  But (1;2;3) is a compound statement that can be used in a list comprehension.

The following are equivalent record expressions: {a=1;b=2} {a:1;b:2} {a:1,b:2}.
  But {a=1,b=2} is a syntax error.

In the examples, the calls to `make_shape` sometimes use {dist p=...}
and sometimes use {dist p:...}. These should be made consistent.

To simplify this, we will standardize on a smaller number of canonical forms.
We will only use these canonical forms in example code in the documentation,
and in the `examples` directory.

I'll say that commas are used for separating items in a list or record
comprehension, while semicolons are used for:
* separating definitions in a scoped record constructor or in a `let` clause;
* separating statements in a compound statement or in a `do` clause.

This leaves us with:
* [a, b] or (a, b) is a list comprehension.
* {a:1, b:2} is a record comprehension, used for labeled arguments to a
  function call, such as `make_shape`.
* {a=1; b=2} is a scoped record constructor, used to construct a library.
* (a; b; c) is a compound statement. It is used in list and record
  comprehensions, and in `do` clauses.

Note: In my usual coding style, I use `;` in list and record comprehensions if
they are "code like", and `,` if they are "data like". By "code like", I mean
"contains multi-line functions". Eg, the argument to `match` is code-like,
and the argument to `make_shape` is code-like. So I actually the syntax the
way it is.

Semicolons
----------
From reddit, re: programming language design:
"I think it's more recently that people understand the value of not being
unnecessarily permissive; it keeps code more homogenous and prevents
misunderstandings."

From a recent Curv support email:
"Its not clear, when to put an ';' in between the statments and when they
even forbidden."

I don't have a good answer to the question "When should you use semicolon,
and when should you use comma?". They are interchangeable in some contexts,
but not others, and it's a bit arbitrary.

Let's start with a recommended coding style.

The best rule I've come up with is that semicolons should be used to
terminate a statement or definition.

Commas can be used in the following contexts:
   (expr1, expr2, expr3)
   [expr1, expr2, expr3]
   {id1: expr1, id2: expr2, id3: expr3}
These expressions construct lists or records, and each comma-separated item
adds exactly 1 member to the data structure.

When you switch to the more general list/record comprehension syntax,
then you use square brackets (for lists) and semicolons.

------
In C, semicolons are used to terminate a statement.
That's quite different from Curv, even if I said "terminate a statement"
above. Semicolons are separators in Curv. Case in point:
  {
    if (defined(config.fmax))
        bmax(a,b) : config.fmax(a, b, args);
    else
        bmax(a,b) : -config.fmin(-a, -b, args);
  }
The first semicolon turns this into a syntax error, but it looks valid
from the perspective of C / Javascript / C++ etc.

Pascal has the same issue: ';' before 'else' is illegal.
But semicolons as terminators have won, in imperative language syntax.

Haskell 2010 allows a `;` to be inserted before an `else`.
This seems like the easiest fix.
While parsing an `if`, if the 'then' phrase is terminated by a `;`,
and the following token is `else`, then consume the `;` and process the
`else`. When this happens, the `else` phrase must also be terminated by `;`.
