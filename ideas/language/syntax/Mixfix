Mixfix Notation
===============
A more uniform mixfix notation, consisting of alternating keywords and
arguments, similar to this:
    let A in B
    do A in B
    parametric A in B
    if A then B else C
    while A do B
    for A in B while C do D

Chaining is supported. It is indicated by two adjacent mixfix keywords.
There is no dangling else ambiguity.
    if A then B else if C then D else E
    let A in do B in C

Extensibility. New mixfix operators can be defined without adding new reserved
words and breaking backwards compatibility. User defined mixfix operators.

Current Proposal
----------------
We use a new syntax where mixfix keywords are lexically distinct from
identifiers. There are several ways to achieve this. In this proposal,
a mixfix keyword consists of two or more uppercase ASCII characters,
with no lowercase, digits or underscores.

Every proposal I've looked at either takes away valuable syntax that Curv
already uses for other purposes, or is even uglier than uppercase keywords.
The nice thing about this proposal is that uppercase identifiers are the least
valuable of those 'valuable syntactic assets' that I would need to repurpose.

The grammar is:
 * An initial mixfix keyword is either KEY or <postfix>.KEY
 * a mixfix phrase is an <item>
 * a final mixfix argument is an <item>
 * an intermediate mixfix argument is a <junction>

IF a THEN b ELSE c <=> 'IF THEN ELSE'[a,b,c]

    colour [x,y,_,_] =
        DO (
            LOCAL z = [x,y];
            LOCAL color = [0,0,0];
            LOCAL done = false;
            FOR i IN 0 ..< 100 WHILE !done DO (
                z := csqr(z) + [x,y];
                IF dot[z,z] > 4 THEN (
                    LOCAL cr = (i-1)-log(log(dot[z,z])/log 2)/log 2;
                    color := [0.95+.012*cr, 1, .2+.4*(1+sin(.3*cr))];
                    done := true;
                );
            );
        )
        IN srgb.hsv color;

Comments:
 * The uppercase keywords are "shouty" and will need to be subdued using
   syntax colouring.
 * Statement or definition arguments need to be parenthesized. But this
   at least happens consistently.
 * Can introduce this new syntax mostly without breaking backward compatibility.
   I will rename sRGB.HSV to srgb.hsv. The old reserved words are deprecated.

Alternative Ways to Distinguish Keywords
----------------------------------------
 1. Mixfix non-final arguments are primary expressions, which must be
    parenthesized if they are bare identifiers.
        if (a) then (b) else (c)
    The same applies to function call arguments, which destroys the look
    of curried function calls: we go from 'f x y' to 'f(x)(y)'.

 2. Mixfix keywords are suffixed with ':', inspired by Smalltalk.
        if: a then: b else: c
    This interferes with record literals, for which I don't have an alt syntax.

 3. Mixfix keywords are reserved. No user-defined mixfix operators.
    Can't add new mixfix syntax without breaking changes.
    Complicates the surface grammar. Keywords aren't visually distinct,
    so we use syntax colouring to make them distinct.  if a then b else c

 4. Ugly: %if x %then y %else z

Previous Ideas
--------------
"Loose" mixfix: arguments are items. Mixfix expr is an item.
A bit like C. List arguments need to be parenthesized.
* We have the dangling `else` ambiguity. Maybe fix that?
* Other C descendents have switched to mandatory parentheses (braces, actually)
  in order to eliminate the problem of needing to add parentheses when one
  statement turns into two.

"Super Loose" mixfix: The 'A' argument of let/do/parametric is a list.
Other arguments are items. This is the current situation.
A bit inconsistent about when list phrases need to be parenthesized.

"Loose unambiguous" mixfix. Eliminate the dangling `else` ambiguity.
* a mixfix expression is <mixfix>
* a final mixfix argument is <mixfix>
* an intermediate mixfix argument is <item>
Problem: what about 'f x = mixfix', 'a = mixfix', 'x->mixfix'?
Are these items, and do the mixfix arguments need to be parenthesized?
 * Maybe 'x = <mixfix>' is a <mixfix> phrase?
   That introduces the dangling else ambiguity, unless this is restricted
   to the final mixfix argument, or unless there is an alternate mixfix form
   terminated by END which has different precedence.
How about this:
 * a mixfix phrase is an <item>
 * a final mixfix argument is an <item>
 * an intermediate mixfix argument is a <pipeline>, so the following
   intermediate mixfix arguments need to be parenthesized:
      mixfix
      ... item
      pipeline = item
      pipeline := item
      pipeline :
      pipeline : item
      pipeline -> item
      pipeline << item
   Most expression arguments don't need parens, while most statementy syntax
   does need parens.

"Tight" mixfix. An intermediate argument is <primary>, final arg is <mixfix>.
Almost all statement arguments are parenthesized, so it has that go/rust/swift
feeling where you don't need to add parens when one statement turns into two.

So what layout conventions do I use?

fire i =
    let
      ( yellow = (1.7, 1.3, 1.0);
        orange = (1.0, 0.6, 0.0);
        red = (1.0, 0.0, 0.0);
        darkgray = (0.2, 0.2, 0.2);
        gray = (0.4, 0.4, 0.4); )
    in
    if (i < .25) then
        (lerp(gray, darkgray, i*4))
    else if (i < .5) then
        (lerp(darkgray, red, i*4-1))
    else if (i < .75) then
        (lerp(red, orange, i*4-2))
    else
        (lerp(orange, yellow, i*4-3));

fire i =
    LET (
        yellow = [1.7, 1.3, 1.0];
        orange = [1.0, 0.6, 0.0];
        red = [1.0, 0.0, 0.0];
        darkgray = [0.2, 0.2, 0.2];
        gray = [0.4, 0.4, 0.4];
    )
    IN
    IF i < .25 THEN
        lerp[gray, darkgray, i*4]
    ELSE IF i < .5 THEN
        lerp[darkgray, red, i*4-1]
    ELSE IF i < .75 THEN
        lerp[red, orange, i*4-2]
    ELSE
        lerp[orange, yellow, i*4-3];

When choosing a syntax, I need to consider how it is presented and how it is
edited using a structure editor. Layout conventions designed around dumb editors
are not the future.

Let without In
--------------
The `in` keyword after `let`, `do`, `parametric` sometimes feels clumsy.
If we remove it, we get syntax like this:
    let
        (def1;
         def2;
         def3;)
    do
        (stmt1;
         stmt2;
         stmt3;)
    result expr

User Defined Mixfix Operators
-----------------------------
Curv 0.4 uses reserved words for mixfix keywords.
What if we switch to a syntax where mixfix keywords are not reserved words,
and allow user-defined mixfix operators?

Alternatives for precedence:
 A) Loose. Mixfix < Infix < Postfix. Kind of like smalltalk.
    To avoid ambiguity, we need stropped keywords.
      if: a < b then: a else: b
      IF a < b THEN a ELSE b
    A statement-list argument needs to be parenthesized.
      LET (x=1; y=2) IN x+y
 B) Tight. Mixfix arguments are primary expressions.
    Function call syntax is changed so that adjacent identifiers aren't
    allowed, "f(x)" replaces "f x". Mixfix arguments are function arguments,
    except that the final argument may be primary or mixfix (chaining).
    No stropping required for mixfix keywords.
      if (a < b) then (a) else (b)
    Adjacent identifiers occur in this context:
      if (a == 0) then (x) else if (a == 1) then (y)
    Mixfix operators have names like 'if then else'.
      if (a) then (b) else (c) == 'if then else'(a,b,c)
 C) Super loose. Statement list arguments don't need to be parenthesized.
    We need syntax to distinguish the start and end of a mixfix phrase.
      (LET x=1; y=2 IN x+y)
      (IF a == 0 THEN x ELSE IF a == 1 THEN y ELSE z)

The most promising syntax is loose precedence with UPPERCASE keywords.
This syntax doesn't conflict with field constructors in record literals,
and it doesn't conflict with Haskell-style 'f x' function call syntax.
The UPPERCASE stropping is highly visible, and makes it easy to distinguish
mixfix syntax from other possibilities. Algol 68 used boldface keywords for
mixfix in the publication syntax of the language, and the use of uppercase is
consistent with this visual style.

A mixfix keyword consists of two or more uppercase ASCII characters.
No lowercase, digits or underscores. A mixfix invocation like
    IF a THEN b
is equivalent to
    'IF THEN'[a,b]

Let's construct a grammar. The Curv 0.4 grammar permits
    if (c1) if (c2) ritem else ritem
There is a dangling else ambiguity. This doesn't work with user-defined mixfix,
because all of the keywords at the same level are assumed to be part of the
same mixfix operator. So we need a grammar that avoids this.
If mixfix is an ritem, then interior arguments of a mixfix must be pipelines,
not ritems. Only the final trailing argument can be an ritem.

Here is a grammar:
    ritem ::= pipeline
        | '...' ritem
        | [KEY pipeline]* KEY ritem
        | pipeline '=' ritem
        | pipeline ':=' ritem
        | pipeline ':'
        | pipeline ':' ritem
        | pipeline '->' ritem
        | pipeline '<<' ritem

Indentation as Syntax
---------------------
This may conflict with my goals for a structured editor, which frees users
from maintaining indentation and line endings, and which reflows program text
automatically as the window width is adjusted.

Keyword based mixfix can be extended to support indentation-as-syntax,
with no semicolons, as follows:
    if condition then (
        stmt1;
        stmt2;
    ) else (
        stmt3;
        stmt4;
    )
<=>
    if condition then:
        stmt1
        stmt2
    else:
        stmt3
        stmt4

How do we extend this syntax for user-defined mixfix?
When we see a new `<keyword>:` at the same indentation as a previous mixfix
keyword, is this a continuation of the previous mixfix, or is it the beginning
of a new mixfix?

Idea 1.
':keyword' continues a mixfix, if the previous keyword was 'keyword:'.
    IF pipeline THEN pipeline ELSE pipeline
    IF pipeline THEN:
        statements
    :ELSE IF primary THEN:
        statements
    :ELSE:
        statements

Idea 2.
A mixfix expression is optionally terminated by the END keyword.
The END is mandatory if the previous keyword was 'KEY:'.
    IF pipeline THEN pipeline ELSE pipeline
    IF pipeline THEN:
        statements
    ELSE IF primary THEN:
        statements
    ELSE:
        statements
    END
This syntax also works for introducing conditionals and loops into a text
templating language. For example,
    $IF condition THEN:
    some text
    $ELSE:
    alternate text
    $END
or in a string comprehension:
    "$IF condition THEN:
    |some text
    |$ELSE:
    |alternate text
    |$END
    "
The uppercase mixfix keyword syntax makes it possible to distinguish
$identifier from $KEYWORD in a multiline string literal.

How do we eliminate semicolons from module literals?
    MODULE:
        x = 1
        y = 2
    END
eg,
    sphere r =
        make_shape MODULE:
            distance [x,y,z,_] = mag[x,y,z] - r
            bounds = [[-r,-r,-r],[r,r,r]]
        END
