Mixfix Notation
---------------
I want a more uniform mixfix notation, not a hybrid of C and Haskell.

How about this:
    let A in B
    do A in B
    parametric A in B
    if A then B else C
    while A do B
    for A in B while C do D

Chaining is supported, eg
    if A then B else if C then D else E
    let A in do B in C

"Loose" mixfix: arguments are items. Mixfix expr is an item.
A bit like C. List arguments need to be parenthesized.
* We have the dangling `else` ambiguity. Maybe fix that?
* Other C descendents have switched to mandatory parentheses (braces, actually)
  in order to eliminate the problem of needing to add parentheses when one
  statement turns into two.

"Super Loose" mixfix: The 'A' argument of let/do/parametric is a list.
Other arguments are items. This is the current situation.
A bit inconsistent about when list phrases need to be parenthesized.

"Loose unambiguous" mixfix. Eliminate the dangling `else` ambiguity.
* a mixfix expression is <mixfix>
* a final mixfix argument is <mixfix>
* an intermediate mixfix argument is <item>
Problem: what about 'f x = mixfix', 'a = mixfix', 'x->mixfix'?
Are these items, and do the mixfix arguments need to be parenthesized?

"Tight" mixfix. An intermediate argument is <primary>, final arg is <mixfix>.
Almost all statement arguments are parenthesized, so it has that go/rust/swift
feeling where you don't need to add parens when one statement turns into two.

So what layout conventions do I use?
    
fire i =
    let
      ( yellow = (1.7, 1.3, 1.0);
        orange = (1.0, 0.6, 0.0);
        red = (1.0, 0.0, 0.0);
        darkgray = (0.2, 0.2, 0.2);
        gray = (0.4, 0.4, 0.4); )
    in
    if (i < .25) then
        (lerp(gray, darkgray, i*4))
    else if (i < .5) then
        (lerp(darkgray, red, i*4-1))
    else if (i < .75) then
        (lerp(red, orange, i*4-2))
    else
        (lerp(orange, yellow, i*4-3));

When choosing a syntax, I need to consider how it is presented and how it is
edited using a structure editor. Layout conventions designed around dumb editors
are not the future.

Let without In
--------------
The `in` keyword after `let`, `do`, `parametric` sometimes feels clumsy.
If we remove it, we get syntax like this:
    let
        (def1;
         def2;
         def3;)
    do
        (stmt1;
         stmt2;
         stmt3;)
    result expr

User Defined Mixfix Operators
-----------------------------
Curv 0.4 uses reserved words for mixfix keywords.
What if we switch to a syntax where mixfix keywords are not reserved words,
and allow user-defined mixfix operators?

Alternatives for precedence:
 A) Loose. Mixfix < Infix < Postfix. Kind of like smalltalk.
    To avoid ambiguity, we need stropped keywords.
      if: a < b then: a else: b
 B) Tight. Mixfix arguments are primary expressions.
    Function call syntax is changed so that adjacent identifiers aren't
    allowed, "f(x)" replaces "f x". Mixfix arguments are function arguments,
    except that the final argument may be primary or mixfix (chaining).
    No stropping required for mixfix keywords.
      if (a < b) then (a) else (b)
    Adjacent identifiers occur in this context:
      if (a == 0) then (x) else if (a == 1) then (y)
    Mixfix operators have names like 'if then else'.
      if (a) then (b) else (c) == 'if then else'(a,b,c)
