`#foo` is a symbol value.
Symbol values are used when you need a C-like enumerated type.

Rationale: I like the syntax.

I want it for modelling the x3d -O colour=face|vertex option.
You will type `-Ocolour=#vertex`
instead of `-Ocolour='"vertex"'` or `-Ocolour={vertex:}`.
The latter syntax is too cumbersome for the Unix command line.

This syntax is also nice in the general case where you are working with
enum types or algebraic types. In that context, we want `#foo` to work as a
pattern.

Note, #foo is intentionally similar to a Twitter hash tag.
Also, # is reserved as a prefix for future syntax.
Eg, if I need more container types, #[a,b,c] is a set,
#{key1: value1, ...} is a map. Or, #! comments.

What is the type of a symbol? How do they print?
 0) No symbol syntax. Use strings, special syntax for string-valued options.
 1) #vertex abbreviates "vertex", which prints as "vertex".
 2) #vertex abbreviates {vertex:null}, which prints as #vertex.
 3) Symbols are a new (8th) data type.

But what about a command line option X with an algebraic type, where some
variants have values, and some variants do not? This can't be a string-valued
option.
 * Without symbol syntax: '-OX="foo"' and -OX={bar:a}
 * With symbol syntax: -OX=#foo and -OX={bar:a}
 * With multipart record definitions: -OX=#foo and -OX.bar=a

Judgement:
* Not 0, doesn't work for options with algebraic types.
* Not 3, don't want extra complexity of a new type.
* 1 or 2.
* I slightly prefer 2: #foo == {foo:null}, prints as #foo, is a pattern.
  #"foo bar" if name is not a C identifier.

Symbols are used to simulate 'enumerated types'.
Symbols are used to simulate niladic variants in an algebraic type.

Symbols are used to simulate 'enumerated types' in the GL dialect.
Drop-down-list picker type. In a C-like language, the options in a drop-down
list would be enums, which would map to integers in GLSL. So these should be
symbols?
    parametric {s :: dropdown[#square,#circle,#triangle] = #square} ...
In the GL dialect, symbols are normally illegal, and even if we get record
values, the null value in a symbol is illegal. But, if a dropdown picker is
used, then the symbols it uses become legal GL values, represented as integers.
We could also use these semantics for interpreting an is_enum[#foo,#bar]
type predicate in the GL dialect.

0. No Symbols
-------------
An alternate to this proposal is to parse enum-valued -O options differently
from other options. Enum-valued -O options are actually string valued options,
with only a fixed set of string values being legal. We just interpret the
option value as a string, without any quotation syntax required.

We parse pure string valued options the same way: the option string is
taken literally, you don't need to include double quote characters.
But, we do interpret '$' escape sequences, so you still have full access
to the Curv expression language in string valued options if you need it.

Enum values are string values. This means we want "foo" to work as a pattern.

1. Symbols as Strings
---------------------
Pros:
* If JSON export is important, strings are the most natural translation
  for symbols. It's what you would use if modelling data directly in JSON.
  * Counterexample: in JSON-API, a picker config is {"type":data}. If no
    data is needed, I use {"type":true} instead of "type".
* Strings as the representation for symbols is simple and easy for users
  to understand.
* When I first encountered Lisp/Scheme, the distinction between symbols and
  strings seemed unnecessary. Curv doesn't use different types for integers
  and non-integral reals. So why make this distinction? If the only technical
  benefit is "faster equality", that's pretty weak.
* This proposal is the simplest, and requires the least code to implement.

If symbols are strings, why provide an alternate syntax for string literals?
* Usability on the command line, for setting enum-valued options.
  -Omethod=#sharp instead of '-Omethod="sharp"'.
* At present, strings are rarely used in Curv. If you see a string literal
  in Curv, it's probably uninterpreted text, to be printed to the console
  or rendered using the future `text` primitive. Writing #foo instead of "foo"
  is a signal to the reader that this is a semantic tag, not uninterpreted
  natural language text. Symbols are used as enum values, as nilary constructors
  for an algebraic type, as field names for indexing a record.
* #foo is a pattern, "foo" is not a pattern due to field generator syntax.

Cons:
* Since symbols have semantics (semantic tags, not uninterpreted text),
  they ought to print as symbols, not as quoted strings.
* A string is a collection, but symbols are 'atomic' values.
  Conceptually, a non-string symbol type is a better match to the domain.
* Semantically, symbols are more closely related to records than they
  are to strings, due to the analogy with enum types and algebraic types.
* I don't want symbols to compare equal to strings.
  I want them to be disjoint from strings, so that overloaded
  functions can distinguish symbol arguments from string arguments.
* Symbol equality is traditionally faster than string equality.

JSON export: #foo -> "foo"

2. Symbols as Records
---------------------
Here's the sales pitch for this design alternative:
* Curv has 7 data types, there's no compelling reason to add an 8th.
  This preserves the ability to map all Curv non-function data to JSON.
* Symbols are closely related to records, when you think about how
  algebraic types are represented in Curv.
* Records are the general mechanism for representing new data types.
  So representing symbols as records fits this tendency.
* Record literals are patterns. Symbol literals need to be patterns.
* #foo prints as #foo, not as a string.
* Symbols and strings are distinct, which is good, they have different semantic
  roles.

Let's recall the doctrine for representing labelled options
and algebraic data types in Curv.

* A set of labelled arguments is a record.
  Examples from other languages:
  * Swift function calls
  * HTML attributes, within a tag
  * Unix command line arguments: options
  Some of these domains permit labelled arguments that have
  just a name, not a value. The underlying parameter is a
  boolean, defaulting to false, but if the name is specified,
  the parameter becomes true. Eg, --foo instead of --foo=value
  in Unix, or foo instead of foo=value as an HTML attribute.
  That's why `foo:` abbreviates `foo:true` in a Curv record.

A Haskell algebraic type is a set of named alternatives. 
The constructor for an alternative is written as `Foo` or `Bar value`.
We can think of `Foo` as an abbreviation; you would otherwise need
to write `Foo ()` if all alternatives were required to have an argument.

In Curv, an algebraic type is a set of tagged values of the
form {name: value} -- tagged values are singleton records.
The abbreviation for tagged value that only needs a name is {name:}:
the value is implicitly `true`. In this case, the choice of the value
`true` is arbitrary: `null` would make as much sense.
* I'm no longer convinced that conflating enum values with singleton boolean
  options is a good idea. Let's define #foo == {foo:null}, which prints as #foo.
  By contrast, {foo:} prints as {foo:true}.

With the introduction of symbol syntax, the idiomatic syntax for
members of an algebraic type will be #foo and {bar: value}.

Possible reasons for identifying #foo with {foo:} in an algebraic type.
* Maybe there are benefits to uniformly representing all members
  of an algebraic type as singleton records?
  * Like, an algebraic value is isomorphic to a single field of a record,
    and can be interpolated into a set of labelled arguments using `...`.
  * A uniform API for extracting the name and value components of an
    algebraic value.

JSON export: #foo -> {"foo":null}

3. Symbols as the 8th Type
--------------------------
Sales pitch:
* #foo prints as #foo, not as anything else. #foo is only equal to values that
  print as #foo. There's no weird aliasing with other types. Simple.
* Due to Lisp, we have the idea of symbols as a fundamental atomic data type in
  dynamically typed languages. A symbol is a pure semantic tag with no
  additional data. So it's not a record or a string, which are more complex.

Symbols and strings are distinct, so maybe symbols become the natural
representation for field names? Eg, `fields` returns a list of symbols.
This raises some questions:
* What about field names that aren't proper identifiers?
  I guess we have #"hello world" as a symbol. Or #'hello world' if quoted
  identifiers are added.
* Syntax for a `:` field generator, given a symbol value?
  Currently we have `"$x":value`, if x denotes a string.
  Remove this syntax (to allow literal patterns to be added later).
  Then add `$x : value`, if x is a symbol.
  If quoted identifiers are added, then we will also have `'$str': value`,
  where str is a string.
* Syntax for field selection, given a symbol value?
  Currently we have `R."$a"`.
  Maybe `R.$a` or `get [a] R`.

How do you substitute a symbol into a string without the leading # character?
Use the symbol_to_string API?

Cons:
* Compared to symbols as strings, there is extra complexity:
  * API for converting between symbols and strings.
  * #'foo bar' syntax for non-standard symbol names, vs "foo bar".
  * Suppressing the leading # when substituting a symbol?
    Maybe if you are using a symbol to denote a single component of a longer
    name or string, then you are using symbols incorrectly.
  * Potential confusion about when to use a string and when to use a symbol?

JSON export: #foo -> {"\u0000":"#foo"}
