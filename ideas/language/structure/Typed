Typed Structures
================
Efficient large structures are important if Curv is to support
a more general representation of geometric shapes (volumetric data structures).
We will use typed structures to represent images, voxel grids, triangle meshes,
as well as user-defined data structures. Plus, there are strings.

Abstractly, a typed structure is composed hierarchically of the 5 fundamental
data types: symbols, numbers, strings, lists and records. However, an efficient
unboxed representation is used that makes the structure faster and more memory
efficient. This representation is described using a type. A type denotes a
subset of the universal set of all values, together with an efficient way to
represent this subset in memory. For example, we might have a type Int32 that
represents a subset of the numbers, together with an efficient representation
(a 32 bit machine word interpreted as a signed integer). This type language is
constrained so that typed structures can be represented on the GPU.

Within the interpreter, on the CPU, typed structures mostly(*) behave as if the
value is just constructed from the 5 data types. Data structure access using
array indexing and field selection works as expected. The entire structure,
and any of its components, are automatically converted to boxed representation
as needed.

When a typed structure is boxed for use on the CPU, the representation contains
the unboxed rep + a type schema. On the GPU, there is no boxing or dynamic type
tagging. Instead, statically typed expressions denote unboxed values.

Alternatives
------------
* implicit vs explicit construction
* explicit construction syntax:
  * <variable> :: <type> = <value>      // coercion
  * <value> :: <type>                   // print format?
  * <type-ctor> <value>                 // print format?
    And you can bind the ctor as a branded ctor.
* updating an element: is the type constraint enforced, or do we create a more
  general structure with that constraint removed?

Implicit vs Explicit Typed Value Construction
---------------------------------------------
It would be great if the system would automatically infer efficient unboxed
representations with no user involvement. Less complexity for the user.
That's "implicit" typed value construction.

At present, the SubCurv compiler uses bottom up type inference to infer types
of variables by assigning unboxed types to values. It's convenient, it works.
The code is complicated, and we only have a small set of types. There is
no subtyping. The code currently will not use the GLSL 'int' and 'uint'
types for numeric variables, it will only use 'float'.

This gets considerably more complicated when we have a rich set of
representation types, with subtype relationships.

We will also need to construct typed structures at run time. Doing it all
implicitly is too much magic. There is code complexity, and run time complexity.
(But great if it were practical.)

Implicit construction doesn't work for images using the 24 bit RGB
representation of colours, where we compress a number in the range 0 to 1
down to 8 bits using gamma encoding. This is lossy compression, so it has to
happen explicity. But I still want this typed structure to be interoperable
with an array of ordinary (uncompressed) Colour values.

Finally, the idea falls apart for compact, fixed size represention of disjoint
unions, such as the Rust 'enum' types. These would need to be declared, because
you don't know the representation until you have seen all of the alternatives.

So we will need some explicit constructions, where user supplied type names
are required for the construction. It's okay, because this happens in the
"deep magic" low level tier of Curv, where developers expect to write code
this way.

How does explicit construction affect the high level experience?

Explicit Typed Value Construction
---------------------------------
In SubCurv, we could use type annotations on function parameters and local
variables, if present, to specify unboxed types for those variables.
    a :: Int32 = 0;
    b :: MyArrayType = [x,y,z];

So representation types are predicates with additional structure.

By extension, these constructor expressions should also work:
    0::Int32
    [x,y,z]::MyArrayType

So then we might expect the following to be equivalent:
    a :: Int32 = 0;
    a = 0::Int32

Typed Value Semantics
---------------------
In SubCurv, the following may as well be equivalent. The type annotations
are interpreted as part of type checking, they have no dynamic effect:
    a :: Int32 = 0;
    a = 0::Int32

In the Curv interpreter, what does this code do? It seems logical for
    <value> :: <type>
to yield a boxed pair containing the unboxed representation of <value>
as specified by <type>, plus <type>. This has two purposes:
 1. During the interpretation phase, we keep track of the <type> so that
    variable and function abstraction can be applied to code with type
    annotations. The types are used during the SubCurv compilation phase.
 2. It is a way to construct efficient unboxed representations in the
    interpreter so that we can efficiently manipulate large structures.

If we were using implicit construction of typed structures, then there
would be no semantic differences between a fully boxed structure S and the
equivalent typed structure T with a more efficient representation.
S and T would be equal, they would print the same, and all operations on
these values would yield operationally equivalent results (modulo the
efficiency improvements: faster, less memory).

That's a model for how the value in a <type,value> pair could be treated.
But there is also a type, which becomes a static expression type later during
SubCurv compilation. What semantics does this type have in the interpreter?

Consider '2::Int32 + 2::Int32'. Should this yield '4::Int32'?
* What if the result of the addition is outside the range of an Int32?
  Throw an error, or return a plain number?
* What about mixed mode arithmetic?
This is not what I want. Selecting a number from a typed structure should
not have this result.

----------------------------------------------------------------------------
Type Annotations and Value Construction
---------------------------------------
In SubCurv, we could use type annotations on function parameters and local
variables, if present, to select unboxed types for those variables. Right now,
we just use bottom up type inference, and that has worked fine so far.
However, our type inference scheme won't use GLSL 'int' and 'uint' types
for a numeric variable, it will only use 'float'.

If a scoped record constructor contains fields with type annotations, do
we use unboxed field representations to represent the record value?

How is a typed array constructed?
Explicit:
* 'MyArrayType[a,b,c]' is a plausible value constructor expression.
* What about the definition 'm :: MyArrayType = [a,b,c]'?
  Conceptually, the type annotation is just restricting the domain of the
  variable, to a domain for which an efficient unboxed representation exists.
* That implies '[a,b,c]::MyArrayType' would be a constructor.
Implicit:
  Perhaps we can do away with the need for a type name in the value constructor.
  K/Kona automatically selects typed array representations based on the types
  of the values within the array. There are 5 vector types: symbol, character,
  float, integer, general, based on the 4 scalar types. K/Kona distinguishes
  between 1 and 1.0: the former is an int, the latter is a float.
  This doesn't really work for me.
  * What about typed empty arrays?
  * Curv doesn't distinguish '1' and '1.0' for good reason. Curv is organized
    in tiers of increasing complexity. At the simplest level, there are only
    numbers.
  * In order to implicitly construct typed arrays (without using a special
    constructor), we must use typed scalars, which possibly do need special
    constructors. So we haven't eliminated the need for these constructors.
  * Too much magic. We'll have cases where there are multiple unboxed types
    T1, T2 corresponding to the same boxed values. Maybe T1 <: T2.

EndoTypes
---------
Should data structure values carry around the types of their elements?

I'm converging on the idea that this makes sense for abstract data types.
It's helpful for: efficient memory representations of large structures,
and, enforcing data structure invariants on element data in an abstract type
(eg, in the context of efficiently updating a large structure).
Efficient large structures are important if Curv is to evolve to support
a more general representation of geometric shapes.

No
--
On one hand, no. It adds complexity to the language.
When you print plain old data, what you see is all there is.
Typed plain old data structures would need to print types as well as values,
and that type information would be part of the constructor expression, which
you would also need to input when writing code.

Typed Arrays
------------
A string is a typed list of characters. So that's already in the language.

If I want to be completely consistent, I can reimplement strings
as untyped character lists. A list that just happens to consist entirely of
characters will be printed using quoted string syntax. There would be no
distinction between "" and [], they would both print as [].

In most APL dialects, there is more than one empty list. There are various
typed empty lists. In K, a matrix is just a list of vectors, but that means
you can't distinguish between a list of dimension [0], and a matrix of dimension
[0,4]. Most APLs do make this distinction. We can model this by saying that
an APL [m,n] matrix is a typed [m] list of typed [n] lists.

In APL, there are semantic benefits for arrays to carry around their element
types. Some operators rely on that extra information, especially in edge
cases of empty arrays.

A fully generic version of Curv's `concat` function would return [] for an
empty list of lists, and "" for an empty list of strings. We could make
that distinction if Curv was statically typed, or if lists carried their
element type. Without that, Curv can't make `concat` fully generic. So Curv
has `concat` for lists and `strcat` for strings.

Image import is a coming feature. For efficiency reasons, image values must
be represented in memory using a compact representation for colour values.
So an image value is a typed array.

So far, my two examples of typed lists are strings and images, which are both
abstract types.

Javascript and Python are both dynamic languages with typed arrays.
In both cases, this feature was added years after the languages became popular.
So that will happen to Curv if it becomes popular.

Typed Records
-------------
I considered this idea when working on a prototype of a new REPL variable
called `render_opts`, which contains an instance of the C++ Render_Opts
structure. You can use `:=` to assign fields of `render_opts`, but I want the
fields to be typed, and assignment to report type errors on bad field values.

`render_opts` is a typed variable. You can only assign valid Render_Opts
records to it. Are the values of `render_opts` also typed record values?
I decided it was simpler if the values are just plain old untyped records
that print as {background: [1,1,1], ...}. So all of the typing is in the
variable, none is in the value.

The purpose of this section is to consider whether we need typed record values,
which enforce type constraints on field update.

I think that a typed record value is an instance of a named abstract type.
You construct it by calling a constructor function (which enforces type
constraints on the arguments). Such values are printed as constructor
expressions.

I'm on the fence whether to support field assignments for abstract types.
If they are supported, then the assignment would fail unless the updated
record was still a legal member of the abstract type. In the general case,
perhaps not all fields of an abstract type will be updatable:
* There might be edge cases where validating the new field value is difficult.
* Perhaps not all of the field values are orthogonal, so one field can't be
  updated without also updating another field.
