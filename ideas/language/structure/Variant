Variant Values (and Variant Types)
----------------------------------
Variant types are a feature of statically typed languages.
They have many names: discriminated unions, enums, variants and algebraic data types.
The core idea is that a variant type consists of a fixed set of alternatives.
Each alternative has a name, and optionally a value.
An enum type is one in which all of the alternatives are just names.

A variant (or variant value) is an instance of a variant type.
To construct a variant, you need to specify the name of one of the alternatives,
plus a value, if that alternative carries a value.

In Curv, we don't have explicitly declared variant types. Instead, variants
can be constructed directly. A variant with just a name is a symbol.
A variant with a name and a value is a record with a single field.
    #niladic
    {monadic: a}
    {dyadic: (a,b)}

A variant value is queried using pattern matching:
    match [
      #niladic -> [],
      {monadic: a} -> [a],
      {dyadic: (a,b)} -> [a,b],
    ]

Variant values are abstract: you use pattern matching to query the value.
There is another kind of tagged value which preserves the operations
on the value (eg, Cell tagged values, or Curv terms).

variant_picker
--------------
I'd like to define a picker that takes a variant type as an argument.
It displays a drop-down menu for the tag, plus additional pickers for
data associated with the current tag value.
    variant_picker [ alternative, ... ]
Each alternative is either a symbol, or {tag: {record of pickers}},
or {tag: [alternative, ...]} if we want an alternate form of nesting.
The parameter that is bound to a variant_picker has a variant value that
must be queried using `match`.

Variant Terms
-------------
Variant data types introduce a different way to model blending kernels:
    smooth 0.5 .union [a,b]
 vs smooth 0.5 {union: [a,b]}

We could unify these approaches by extending `record!` to take a variant
value as argument, like so:
    record!#foo    => record.foo
    record!{bar:a} => record.bar a
This would allow you to write
    smooth 0.5 !{union: [a,b]}
which would allow {union: [a,b]} to be passed as a parameter then given
to smooth 0.5.

We could also do this in reverse: a piecewise function over variant values
could export field names for each tag. So,
    pfun #foo  => pfun.foo => pfun!#foo
    pfun {a:b} => pfun.a b => pfun!{a:b}
This idea is inconsistent with callable records and Algebras. It is ambiguous
if the piecewise function has patterns matching both #foo and {foo: x} --
the first such pattern would match, I guess.

Also the cube:
    cube .mitred 5
    cube #mitred 5   or cube {mitred: 5}
If I want `cube` to be parametric, and the parameters include the exact/mitred
alternatives, what's the best way to organize the parameters,
and what do cube terms look like?

In a GUI, it might be good to present the cube parameters like this:
    size :: scale_picker = 2;
    field :: variant_picker[#exact, #mitred] = #exact;
    blend :: blend_picker = sharp;
