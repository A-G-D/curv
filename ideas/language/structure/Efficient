Curv needs better support for huge structures: eg, multidimensional arrays
with potentially hundreds of millions of elements. The main use case is
for volumetric data structures: representing shapes (and colour fields) using
data structures instead of functions. The goal is to make these efficient,
without making high level APIs and the high level language harder to use.

In this design study, the secondary goal is to preserve the illusion that all
Curv data structures are recursively composed of 5 primitive data types.
To make huge data structures efficient, we will support multiple internal
representations for the same abstract structure. These internal representations
are hidden from high level code (High Curv, aka Tier 1 of the Curv language).
Low level code (Low Curv, Tier 2) will use 'representation hints' together with
the form of the data constructor to select which internal representation to use.

Typed Arrays
------------
Typed arrays provide efficient representations for large uniform arrays.

Examples:
* character strings, possibly with UTF8 encoding (a kind of compression).
* image: a 2D array of Colour, where Colour may have a 24 bit representation
  (8 bit gamma encoded intensity values are a kind of lossy compression),
  or a Colour is three 32 bit floats (both reps are available on GPUs).
* triangle meshes, which contain arrays of 32 bit natural numbers, and
  arrays of 32 bit floats. Using 32 bit floats is a form of lossy compression.

Requirements
------------
Reduce the storage requirements of huge arrays, make them faster to process:
 * Use compact unboxed scalar representations.
 * Compression schemes such as UTF-8 or image compression or VDB.
 * Eliminate the need for creating huge temporary arrays (especially unboxed
   temporary arrays, which are much larger) when constructing or transforming
   huge arrays.

Support generic programming: generic algorithms over typed arrays.

Provide a general set of functional operations over typed arrays:
 * concat
 * amend
 * map from a typed array
 * map to a typed array
 * generic list comprehensions

The complexities of "typeful programming" are restricted to the low levels
of the language, and do not impose themselves on users of high level APIs.

Operational Equivalence to Simple Data
--------------------------------------
In Curv, all data is composed from 5 primitive data types. With typed arrays,
a string becomes a list of characters. So the 5 primitive data types are now:
characters, symbols, numbers, lists and records.

The intent of the typed array and typed structure features is to provide more
efficient representations for large structures (rather than to impose semantic
type constraints on these structures). These efficient representations
are intended to be isomorphic and operationally equivalent to structures built
using generic operations from the 5 data types.

We don't impose additional "semantic type constraints" on typed arrays, relative
to simple arrays, because in High Curv, we don't want to complicate the data model.

Implicit vs Explicit Typing
---------------------------
It would be nice if these efficient representations could be implicitly
constructed, with no ceremony. It would simplify the language. But that would
not be flexible enough.
 * We need explicit type annotations to force the use of lossy compression
   (eg, storing numbers as Float32).
 * We need explicit types if we wish to support unboxed enum types,
   eg as in Rust, where the compiler needs to see all of the enum alternatives
   in order to compute the size of an unboxed value.
So we'll need to use explicit type names to construct typed arrays,
at least in the general case.

The design challenge is to minimize the complexity that this introduces for
high level programming: when you are specifying the contents of a typed array
(for an argument to a high level API), or when you are consuming typed arrays
that are returned from high level APIs.

I'm impressed by how the K7 language uses a simple data model like High Curv,
yet is able to implicitly use efficient representations for bulk data, without
introducing C-like type expressions, as I'm proposing here.

One insight is that operations that return bulk data provide guarantees on
the structure of their result, which can be used to select an efficient
representation. Other bulk operations can be designed to use these efficient
representations on input, etc, and developers can reason about efficiency.
There are tons of examples of this in APL like languages.
Eg, transpose in K returns a rectangular matrix.

These 'type expressions' could be represented in the language as identity
functions that abort on invalid inputs, and convert valid inputs to efficient
representations (without changing equality, modulo lossy compression).

Constructing a Typed Array
--------------------------
I call these "types", but they are actually "representation hints", since the
goal is not static or run-time type checking.

There are named scalar types, such as:
 * Bool : can be represented as a single bit
 * Char : ASCII character or Unicode code point
 * Gamma8 : 0 to 1 encoded in 8 bits using sRGB gamma curve
 * Float32
 * Nat32

What are these scalar types?
 * Predicate, with extra structure (a compact unboxed representation).
 * The predicate selects values that map onto the representation.
   For example, `Float32` is a predicate that returns true for any number.
 * In the case of lossy compression (eg, Gamma8 or Float32), the predicate
   recognizes multiple general values (numbers, in this case) that map to
   a single representation value.

An array element can be an array or record, so we need array and record types:
 * Vec = List{count: 3, of: Float32}
 * Point = Record{x: Float3, y: Float3, z: Float32}

Tuple[T1,T2,T2]
    A fixed-count list with variable element types.
List{of: T, count: N}
    A fixed-count list with a fixed element type.
List{of: T}
    A variable-count list with a fixed element type.

The above List type constructors do not support a multi-dimensional rectangular
array with a fixed number of dimensions but a variable size for each dimension.
This is needed for image and voxel arrays, for example.
So:
    Array{of: T, rank: N}

Alternative syntax for list and array types:
    Array R T -- R is a rank, T is a base type
    Array [I,J,K] T -- I,J,K are positive integers
Note that Array 0 T == Array [] T == T.

We may also want unboxed enum types, eg:
 * Optional_Num = Enum[#nothing, {just: Float32}]

To construct a typed list or a typed record, maybe use
    make Vec [1,2,3]
    make Point {x: 1, y: 2, z: 3}

This is a straw man API. Other designs may be more fluent. For example,
 * A type name T is a constructor function, and T? is the predicate.
 * 'val :: T' is a constructor expression (:: now performs coercion).

Coercions: The user passes a general unboxed array as a function argument,
and it is automatically coerced to a typed array. My old syntax for this is:
 * let f (v >> make Vec) = ...v...; in f[1,2,3]
 * v >> make Vec = [1,2,3]
 * constructor function is idempotent

List of Numbers
---------------
Consider A=[1,2,3] and B=make Vec [1,2,3].

The main difference between A and B is that the latter occupies 12 bytes.
Otherwise, we would like them to be as operationally equivalent as can be.
Consider, for efficiency reasons, switching an API from using unboxed to typed
arrays, which are exposed to the user. We don't want to break existing code.

Printing.
Equality.
Element access.

List of Characters
------------------
See document `String` for details.

Number Types
------------
Consider:
    x :: Nat32 = 42;
In SubCurv, I would expect this to define 'x' as a GLSL 'uint'.
Consequences for Curv:
 * Nat32 is a predicate that tests for an integer from 0 to 2^32-1. Required.
 * Whenever a := assignment to 'x' occurs, the ':: Nat32' assertion should
   be applied to the value that is being assigned. Optional.

What is 'make Float32 x'?
 * It aborts if x is not a number. 
 * Otherwise it converts x to a 32 bit float, which is lossy compression.
 * Then it returns a boxed value equivalent to this 32 bit float.
 * There is no advantage (in storage size) to retaining the 'Float32' type
   in the boxed representation. Just use a regular boxed number.

Concat
------
concat[] returns [].

concat[A,B] tests if A and B are typed lists with the same element type T.
If so, the result is List{of:T}. Otherwise, it is a general list, or some
other representation such as a 'concat node' in a tree-structured list rep.

Amend
-----
`amend i val list`
If `list` has type List{of:T}, and val isa T, then amend the list in place,
if we can, and return List{of:T}. Otherwise, return a general list.

Generic List Comprehensions
---------------------------
A list constructor [a,b,c] containing only expressions is evaluated eagerly.
Other list comprehensions (containing statements) are evaluated lazily.

A 'typed list comprehension' is
    make list_type [list_comprehension]
Laziness ensures that any for loops in the list_comprehension don't result
in a huge intermediate list being generated.

This laziness means that a list comprehension can be passed as an argument
to a high level API, and the construction of a typed array occurs elsewhere
in the low level code that implements the API.

Generic Algorithms
------------------
An algorithm that maps one array onto another while preserving the array
representation type of the input can be written in a simple and generic way.

head n list = [for (i in 0..<(max[n,count list]) list[i]];
    // How do we infer that the result is a typed array with the same type
    // as list?
head n list = make (typeof list) [for (i in 0..<(max[n,count list]) list[i]];

SoA: Struct of Arrays
---------------------
Some systems automatically convert an array of structs into a struct of arrays
as an internal data structure optimization. That seems appropriate for Curv.

Ranges
------
We need an internal 'range' type to efficiently represent huge ranges,
so that indexing over a huge array doesn't create a huge intermediate list.
