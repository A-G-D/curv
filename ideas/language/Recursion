Expand the circumstances where recursive definitions are legal.

Goals:

 1) Recursive function definitions, where you call a combinator to
    construct a function, and the recursive references are within lambda
    abstractions passed as arguments. Eg, `match` (see Match), or `reduce`.

 2) Recursive (infinite) lists. Maybe?
    Haskell-style lazy infinite data structures arose in the 1970's from
    a culture of single-threaded computation. This kind of code can't run
    on a GPU. I would rather explore designs for procedurally encoded data
    that are inherently data-parallel.

It's tricky, there are two challenges.
* Representation: because runtime objects are reference counted, and cannot
  contain cycles.
* Compilation: the compiler must figure out when to generate our cycle free
  representations without the aid of static typing. Certain syntactic
  structures can be recognized as legal recursive definitions that we know
  how to compile, but then what happens if those syntactic structures are
  hidden behind function calls?

We support infinite lists by using a more elaborate representation for lists.
A recursive list has a nonlocals table (similar to a closure) plus a tree.
The tree node types are:
 * flat array of values;
 * concat node;
 * concat node where the tail node is a recursive reference, containing an
   index into the nonlocals table.

I think the compiler can be extended to support recursive list references
in the context of [a,b, ... Ref].

And the compiler allows recursive functions only when it can recognize a
function definition using syntax.

What if...
An ambiguous recursive definition is partially evaluated, leaving those
recursive references unevaluated. If the final result has the syntactic form
of a legal recursive list or function definition, then we construct the
appropriate recursive data structure.

That is pretty complicated. But eventually I'll have all of the necessary
mechanisms in place for other reasons, and then maybe I can revisit this idea.

General Recursive Function Definitions
--------------------------------------
At present, a recursive function definition `f = expr`, where expr is not a
lambda, is not supported. The use case is defining a recursive function 'f'
by applying a combinator to a lambda expression that calls 'f'. This combinator
captures a reference to the lambda expression, it doesn't immediately call it.
The workaround is to use `f x = expr x` instead. Let's fix this.

To simplify implementation, let's only consider recursive functions, not
recursive data. Recursive data is ambitious, and is a new feature. By contrast,
support for general recursive function definitions fixes a bug in the current
implementation, where not all meaningful recursive function definitions
(that would work in any other functional language) actually work in Curv.

A recursive data definition (`f = expr` where expr is not a lambda)
defines a recursive function 'f', or a non-recursive data structure containing
recursive functions (eg, a callable record).

Recursive references must be contained within lambda expressions,
or an error is reported, so that we can report an error on `x = x + 1`.

Ensuring that recursive references are wrapped in lambda expressions is not
enough to be able to report errors on all illegal recursive forms.
Here's an infinite loop:
    f = (()->f)();
Here's a loop that will exhaust memory building an infinite data structure:
    f = [(()->f)()];
During the evaluation of 'expr', the function 'f' must not be called.
If it is called, then an error is reported at the site where 'f' is called
("illegal recursive reference" to 'f').

Recursive references are not supported in definitions like `pat = expr`
where `pat` is not an identifier.

### Alternative A
When we compile the `expr` in `f = expr`,
 0. If the nub of `expr` contains no lambda expressions, it is a "data
    definition", otherwise it is a "function definition". We need to build
    a nonlocals dictionary for the latter. All of the nonlocal references in
    `expr` are placed in this nonlocals dictionary. All top level lambdas in
    the nub of a "function definition" share the same nonlocals dictionary,
    which is also used by a thunk that we may need to build for `expr`.
 1. Any recursive reference (eg, to `f`) outside of a lambda is an error:
    "illegal recursive reference".
 2. Recursive references are permitted inside lambda expressions.
    Each top-level lambda within `expr` is marked as having shared-nonlocals.
    Initially, each definition belongs to its own recursion group.
    Tarjan's SCC algorithm unifies mutually recursive groups.
    After unification, each recursion group has a nonlocals dictionary that
    contains the union of the nonlocal references of each definition
    in the group.

Run time representation of a set of recursive definitions.
 * There is a set of binding slots, one for each variable.
   These are initialized one recursion group at a time, in dependency order.
 * Within a recursive nonlocals dictionary, a recursive reference to a binding B
   within the same definition set has a special representation.
    * The general representation is a Thunk_Lambda. The definiens for B is
      compiled into a thunk. A Thunk_Lambda is a thunk without nonlocals.
      Note, the thunk uses the closure's nonlocals object for its nonlocals.
    * As an optimization, in the case where the definiens for B is a lambda,
      we store a Lambda object (a closure without the nonlocals).

During the evaluation of 'expr', the function 'f' must not be called.
 * We guarantee there will be no attempt to fetch the value of frame slot 'f'
   because references outside of lambdas have already generated compile errors.
 * Within a lambda, a reference to 'f' is actually a reference to the closure's
   nonlocals object at f. This is a ThunkLambda. This is converted to a value
   by evaluating the thunk. But when evaluating the definiens, we expect to
   construct the closure (that references f) but we don't want to call the
   resulting closure.
This is only enforced during the first evaluation of 'expr', when we obtain
the initial value for the frame slot 'f'.
 * There is a single ThunkLambda object shared by all closures that have
   captured a nonlocal reference to 'f'.
 * Prior to the first evaluation of 'expr', we 'poison' the ThunkLambdas for
   all of the bindings in the recursion group. The ThunkLambdas can be captured
   by closures but an error is reported if they are evaluated.
 * After 'expr' is evaluated, we unpoison the ThunkLambdas.

With this scheme, in `pat = expr`, `pat` can be 'identifier'
or 'identifier :: predicate'. A further generalization to support arbitrary
patterns could work by prefixing 'let pat = expr in' to each closure body
that references any of those variables, then optimizing from there.

Optimization:
 * Instead of storing ThunkLambda and Lambda in the nonlocals dictionary
   and referencing them using Symbol_Ref (these are compile time constants),
   use special opcodes Nonlocal_Thunk and Nonlocal_Lambda, which contain the
   ThunkLambda or the Lambda. Then perform optimizations over these opcodes.

### Alternative A0
When we compile the `expr` in `f = expr`,
 1. Any reference to `f` outside of a lambda is an error:
    "illegal recursive reference".
 2. Any reference to `f` inside a lambda causes that lambda to use the shared
    nonlocals object NL that belongs to f's recursion group. Such a lambda is
    called a 'recursive lambda', and is marked as such.

If `expr` contains recursive lambdas, then we compile `expr` into a thunk.
All of the nonlocals in `expr` are added to NL.
During thunk evaluation, the thunk frame's nonlocals_ is set to NL.
When a recursive lambda is evaluated into a closure, it uses this NL as the
nonlocals_ field of the closure.

### Alternative T
A function closure (value) contains a 'nonlocals' data structure, which contains
the values of all non-local bindings captured by the closure. In the case of
a recursive function 'f', the nonlocals structure should logically contain the
value of 'f'. However, that creates a cyclic data structure, which breaks
reference counting (it causes a storage leak).

To break the cycle, we use a special representation for recursive nonlocal
bindings. Instead of storing the full closure value for 'f' within its own
nonlocals structure, we just store a Lambda object, which consists of everything
that a closure has, minus the nonlocals. Then we combine the Lambda with f's
nonlocals structure (which is already in hand) when we need to reconstruct f's
value from its nonlocals entry.

In the case of a general recursive function definition ('f = expr' where 'expr'
is not recognized as a special case (ie, as a lambda expression), then 'expr'
can potentially evaluate to any kind of function value, not just a closure.
It could also evaluate to a Piecewise_Function, or a module with a 'call' field.
So we need a more general representation for recursive value references
within the nonlocals structure.

The following solution using thunks is quite general. `f` can be a function,
or a callable record, or a more general data structure containing functions.

Recursive references must be contained within lambda expressions, or an
error is reported, so that we can report an error on `x = x + 1`.

Ensuring that recursive references are wrapped in lambda expressions is not
enough to be able to report errors on all illegal recursive forms.
Here's an infinite loop:
    f = (()->f)();
Here's a loop that will exhaust memory building an infinite data structure:
    f = [(()->f)()];
(NB: Lazy infinite data structures are out of scope for this investigation.)
A requirement I wrote above:
 * During the evaluation of 'expr', the function 'f' must not be called.
   If it is called, then an error is reported at the site where 'f' is called
   (illegal recursive reference to 'f').
It's simple. `f = expr` is implemented by converting `expr` to a thunk.
Normally we expect to evaluate the thunk and get back a function, or callable
record. Or a more general data structure containing functions.
If the thunk invokes itself recursively at runtime, we report an error.

Here's an earlier description of this approach:
  If a recursive definiens isn't a lambda expression, then it is made into 
  a call-by-name thunk that is evaluated on every reference from inside the 
  recursion group. From outside the group, it's a proper value in a slot. 

A Thunk is a kind of parameterless function. A Thunk object has:
    Shared<const Operation> body_;
    Shared<const Module> nonlocals_;
    unsigned nslots_;
    bool evaluating_ = false;
A Thunk_Lambda is missing the nonlocals:
    Shared<const Operation> body_;
    unsigned nslots_;

Implementation of 'f = expr':

  When we compile recursive data definition 'f = expr', we compile 'expr' as a
  ThunkLambda TL. All of the nonlocal references within 'expr', including 'f'
  itself, will be included in NL, the nonlocals object for f's recursion group.

  At runtime, when we initialize the bindings in f's recursion group:
   * We set NL.f to the ThunkLambda TL. Can't store a Thunk because that's
     a reference cycle through NL.
   * We set f's frame slot to the result F of evaluating the thunk.
     The thunk is evaluated by creating a thunk_frame whose nonlocals is NL,
     and calling thunk.body->eval(thunk_frame) yielding F.
     No cycle: F will reference NL, but NL won't reference F.

  During that initial thunk evaluation,
   * If we reference a nonlocal containing a ThunkLambda, outside the context
     of capturing a nonlocal while building a closure (see below), then that
     is an error: "illegal recursive reference". This handles the case of
     a recursive reference to 'f' within 'expr' that is not wrapped in a lambda.
   * While constructing a closure, if we capture a non-local variable reference
     that contains a ThunkLambda, then we construct a Thunk from the ThunkLambda
     and the Frame::nonlocals. We store that Thunk in the closure's nonlocals.
     This handles the case of a recursive reference to 'f' within 'expr' that
     is wrapped in a lambda.
   * While evaluating a closure call, if the closure body fetches a nonlocal X
     that contains a Thunk T, then we evaluate the Thunk as follows:
      * If T.evaluating is true, then throw an error:
        "illegal recursive reference".
      * Otherwise, set T.evaluating = true;
      * Construct a thunk_frame for evaluating the Thunk T, whose size
        is T.nslots and whose nonlocals is T.nonlocals.
      * Evaluate the thunk's body in thunk_frame and get the resulting value:
        T.body.eval(thunk_frame)
      * Reset T.evaluating_ back to false.

This implementation could be optimized, but it's a nontrivial subject.
  * As a performance optimization, should we store the thunk result back in
    the closure's nonlocals? I don't think this causes a reference loop.
    I think it causes memory bloat.

---
   * When we capture a non-local variable reference to f (when constructing a
     closure), we construct a thunk from the thunklambda, and store the thunk.
     * The thunk will additionally contain a reference to NL, but that doesn't
       introduce a cycle, because NL will not refer to the closure.
     * Suppose that, instead of storing the thunk, we instead evaluated the
       thunk and directly stored the resulting value in the closure. That
       could create an infinite loop, building an infinite data structure.
           f=[(()->f)()];
     * Can we store the result of evaluating the thunk in the closure?
       Can it create a cycle? Can it create an infinite data structure?
     * Can we lazily replace the thunk with its value on first reference,
       or will that create a cycle?
   * While executing a thunk, when we reference a nonlocal that contains a
     ThunkLambda (which is different from capturing a nonlocal, see above),
     then we report an error: "illegal recursive reference".
   * When a nonlocal slot NL.s contains a Thunk, we convert it to a value:
     * We set NL.s.evaluating_ = true. If a Thunk is referenced when evaluating_
       == true, we throw an error: "illegal recursive reference".
     * We construct a frame for evaluating the Thunk T, whose size is T.nslots,
       and whose nonlocals is NL.
     * We evaluate the thunk's body in the frame and get the resulting value.
     * We reset NL.s.evaluating_ back to false.

Implementation of 'f = expr':
 * When we compile recursive data definition 'f = expr', we compile 'expr' as a
   ThunkLambda TL. Recursive references to 'f' are an error unless nested in a
   lambda expr. All of the nonlocal references within 'expr', including 'f'
   itself, will be included in NL, the nonlocals object for f's recursion group.
 * At runtime, when we initialize the bindings in f's recursion group:
   * We set NL.f to the ThunkLambda TL. Can't store a Thunk because that's
     a reference cycle through NL.
   * When we capture a non-local variable reference to f (when constructing a
     closure), we construct a thunk from the thunklambda, and store the thunk.
     * The thunk will additionally contain a reference to NL, but that doesn't
       introduce a cycle, because NL will not refer to the closure.
     * Suppose that, instead of storing the thunk, we instead evaluated the
       thunk and directly stored the resulting value in the closure. That
       could create an infinite loop, building an infinite data structure.
           f=[(()->f)()];
     * Can we store the result of evaluating the thunk in the closure?
       Can it create a cycle? Can it create an infinite data structure?
     * Can we lazily replace the thunk with its value on first reference,
       or will that create a cycle?
   * When a nonlocal slot NL.s contains a Thunk, we convert it to a value:
     * We set NL.s.evaluating_ = true. If a Thunk is referenced when evaluating_
       == true, we throw an error: "illegal recursive reference".
     * We construct a frame for evaluating the Thunk T, whose size is T.nslots,
       and whose nonlocals is NL.
     * We evaluate the thunk's body in the frame and get the resulting value.
     * We reset NL.s.evaluating_ back to false.
   * We set f's frame slot to the result R of evaluating the thunk T.

### Implementation of 'f = expr':
 * When we compile 'f = expr', we compile 'expr' as if it were the body
   of 'x -> expr x', yielding an operation tree E. This means that all nonlocal
   references within 'expr', including 'f' itself, will be included in NL,
   the nonlocals object for f's recursion group.
 * At runtime, when we initialize the bindings in f's recursion group:
   * Phase 1, initialize NL. We set NL.f to a magic value that throws an error
     on reference: "illegal recursive reference" at the reference to 'f'.
   * Phase 2, evaluate 'expr' using a Frame whose nonlocals object is NL.
     The result C must be a callable value, or we report an error.
     A definition like 'x = x' will report an error at this point.
     Without this evaluation step, 'x = x' would turn into an infinite loop.
     Store C in a temporary variable Ctemp.
   * Report an error if C is not a function. C cannot be a record with a
     `call` field, because phase 3 won't expose the extra record fields.
     * Okay, but what remedial action should the user take to fix the error?
       Suppose a library combinator starts returning a record callable,
       thereby breaking existing code?
   * Note that C cannot be stored in NL.f, because that will create a cyclic
     data graph, which breaks reference counting. Phase 3 fixes that.
   * Phase 3. Set f's frame slot to Ctemp. Set NL.f to a lambda object
     that contains the operation tree E and is equivalent to 'x -> expr x'.
     This means we re-evaluate expr on each recursive call to f, which is
     heavier than a recursive function in a garbage collected language.
     I don't see a way to use the value of C to initialize NL.f.




Implementation of 'f = expr':
 * Within the nonlocals object NL, the slot for 'f' is initialized to a thunk
   that reports an error if it is called.
 * 'expr' is evaluated. If the evaluation succeeds without an error,
   yielding a value C, then an error is reported if C is not a function.
   If C is a function, then we expect that the value of 'f' has been captured
   by one or more closures contained somewhere within C. However, all of
   those closures share the same nonlocals object NL, which we have at hand.
 * If `NL.f` is set to the value C, then we have a cyclic data graph,
   which breaks reference counting. So we have to break that cycle.
 * Let's require the value C to be a Closure. This closure consists of
   two parts: a Lambda plus a Nonlocals object (C.lambda and C.nonlocals).
   * We ignore the case where C is a general callable value, like a record
     with a 'call' member, or a non-closure function like a Piecewise_Function.
 * In the standard implementation of recursive functions, we store a Lambda
   in NL.f, and when 'f' is referenced, we reconstruct the closure by
   combining the lambda NL.f with the nonlocals NL. That won't work here,
   since we normally expect C.nonlocals != NL.
 * What does work is the standard workaround for this design flaw.
   Instead of writing `f = expr`, write `f = x -> expr x`.
   So let's duplicate that logic.
 * It is not good enough to simply rewrite a recursive data definition
   'f = expr` to `f = x -> expr x` because it fails to do the error checking
   done by the first few steps. Eg, `x = x` would be equivalent to `x a = x a`
   and would be an infinite loop rather than an error.
 * When we compile 'f = expr', let's compile 'expr' as if it were the body
   of 'x -> expr x'. This means that all nonlocal references within 'expr'
   will be included in NL (including 'f' itself).
 * Then, we evaluate 'expr' using a special Frame whose nonlocals object
   is NL. Before evaluation, we set NL.f to a magic value that fails on
   reference. After evaluation, we check the result C is a function.
 * Then we set NL.f to the Lambda of 'x -> expr x', substituting in the
   Operation tree for expr.

------
This is a generalization of special case handling for recursive 'match'
definitions. If we build the necessary machinery, we don't need to put a
lot of special case code into the compilation of 'match' calls.

is compiled into `f x = x >> expr`.
Note this aborts at runtime if expr does not return a function.

But this means
    x = x
compiles to
    x a = x a
which is wrong. Either the definition is a compile time error, or 'x'
is a thunk that runs in an infinite loop.

Maybe there is a restricted subset of definitions for which that design
will work.

Thunkification
--------------
Recursive data definitions should be compiled into thunks.
All the definitions in a mutual recursion group compile into
* a slot containing a shared nonlocals module
* 
