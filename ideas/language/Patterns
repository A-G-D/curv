# Patterns

## Proposal
Variable binding patterns:
  * `pat :: type` is a type assertion pattern,
    which fails if `is type arg` is false, otherwise matches pat.
  * `pat >> func` is a cast pattern. Pipe the argument into `func`.
    Fail if `func arg` fails. Otherwise match `func arg` against pat.
  * `pat when cond` matches pat, then evaluates cond with pat's bindings,
    and fails if cond is false. Alt. syntax: `pat if cond` (like Python).
  * `pat :: If predicate` is a unary predicate assertion pattern:
    `If` converts a predicate to a type. Upgrade path from Curv 0.4.
    Alt. syntax: `x :: If pred` becomes `x if pred x`.
  Variable names line up on the left.
Equality patterns:
  * `== expr` binds no variables, matches when arg==expr.
Boolean patterns:
  * 'pat1 && pat2' -- and pattern. The same value matches both patterns.
    * bound variables are disjoint between pat1 and pat2.
    * Idiom: 'id && pat' is like 'id@pat' in Haskell.
  * 'pat1 || pat2' -- or pattern. The value matches either pat1 or pat2.
    * pat1 and pat2 define identical sets of bound variables.
      Process left to right, stop on first match (like || logical operator).
    * Eg, [x,y] || [x,y,==0]
          #foo || #bar
          ==0 || ==1
    * Rust, F# use 'pat1|pat2' -- looks nice in switch.

## Brainstorming
Sublist patterns: [a, ...b] or [a, ...b, c]

Predicate Patterns:
I've proposed many different variants. The following are equivalent:
  ==n
  _==n
  x when x==n
  _ :: If (x->x==n)
The following are equivalent:
  x <infix> expr
  x when x <infix> expr

Equality Patterns:
A 'equality pattern' tests if the value to be matched is equal to a specific
value. Useful for simulating C switch statements (using `match`).
Useful for matching nilary constructors (when simulating algebraic types).
I have considered several alternate proposals:
* `== value`
  * Works for any value.
  * Sections: This syntax could also be used as a 'section' of the equality
    operator. Eg, `filter(==0)`.
  * This is consistent with another right section proposal: "`f` x".
  * Which leads to range patterns. Suppose we add elem(val,list).
    And we add `f` x as a pattern. Then `elem` 1..10 is a range pattern.
* Literal constant patterns. (Haskell has them.)
  * #true, #false, #null are literals for true, false, null. (Done.)
  * Numerals are patterns, eg 42, 1.0
  * `-<numeral>` and `+<numeral>` are patterns.
  * Infinity?
    * There is no numeral for infinity. Instead, there is a standard variable
      called `inf`, which is the simplest interface I can create. Because this
      is just an ordinary identifier, you know it isn't a numeral and that you
      have to use `==inf` for pattern matching. No problem.
    * If I try to make a <numeral> for infinity, it just leads to a complex
      solution with weird syntax that has to be memorized.
      * `inf` is a keyword. It looks like an identifier, but it isn't.
      * Use special syntax that doesn't conflict with anything else.
        * `0inf`. Mneumonic hook: begins with a digit, so it's a numeral.
        * `##inf`. Mneumonic hook: looks kind of like a symbol. It's some
          kind of literal. Clojure uses `##Inf` and `##-Inf`.
        * SFRI-70 uses `+inf.0` and `-inf.0`. Apparently, the mneumonic hook
          is that infinity is a float, and float literals have decimal points.
          Not good for Curv.
      * `#inf` is the numeral for infinity. Follows from the pattern that
        `#true` is true and `#null` is null.
        - Maybe `#inf` is a number, but not a symbol. It is reserved syntax,
          and you need to use `#'inf'` to get the symbol of the name 'inf'.
        - Maybe `#inf` is both a number and a symbol. It seems less complex
          if numbers and symbols are disjoint.
      * `1/0` is the numeral for infinity. It is the pattern that matches
        infinity, and it is also how infinity is printed.
  * String patterns currently conflict with "name":value field constructors.
    * The Map proposal defines a Record as a Map where the keys are Symbols.
      A record may be written as {#foo=>1, #bar=>2}. The `:` statement is no
      longer overloaded, it's just `pattern:expr`.
    * The DFN proposal is `$foo:value` for dynamic field names.
    * Replace "name":value and foo."name" syntax with quoted identifier syntax:
      'name':value and foo.'name'. Doesn't support dynamic field names. (Done.)
    * String literal patterns must be parenthesized in situations where they
      are ambiguous, such as `("foo"):value`.
    * The Symbol proposal claims that string patterns aren't needed. If this
      need arises, you should be using symbols instead.
Yes to `== value` patterns. No to literal constant patterns.
  match [
    == 0 -> case zero;
    == 1 -> case one;
  ]
  f (== 0) = case zero;
  f (== 1) = case one;

Constructor patterns:
Haskell has them, and I will be adding abstract value constructors.
They have the form of a juxtaposition function call, where the
function is an identifier constant, and the arguments are patterns.
Or, whatever token is used to prefix a constructor definition is also
used in a pattern to prefix a constructor pattern.

Predicate patterns:
The syntax `<pat> :: <predicate>` is being changed to `<pat> :: <type>`.
Overloading these two cases is tricky: we would need to test for a type first,
and test for a function second, since a type could be an algebra with a
constructor. So what is the new syntax for predicate patterns? Cases to support:
  <prefix-predicate> <pattern>
  <pattern> <infix-predicate> <argvalue>
  <infix-predicate> <argvalue>
Suppose we define elem(val,list). Then `elem` 1..10 is a range pattern.
Also, `==`42 is an equality pattern, short for _`==`42.
Assuming that a regular function call is a predicate pattern, and that
I'm using '<pattern> :: <type>' for type patterns and 'ctor <func><pattern>'
for constructor patterns.

New Pattern Types:
* '<pattern> if <condition>' -- conditional pattern. The pattern is matched,
  variables are bound, then the condition is evaluated over the bound variables,
  and the match fails if the condition is false.
  * I might prefer '<pattern> when <condition>' for better readability.
    (Not confusible with an 'if' expression when quickly scanning code.)
  * The 'phrase abstraction' design pattern asks if the syntax for this should
    actually be 'if (condition) pattern'? But the C if syntax is
    counterintuitive because the pattern binds variables in the condition.
  * Also, should we have 'statement if condition'?
* 'pat1 && pat2' -- and pattern. The same value matches both patterns.
  * bound variables are disjoint between pat1 and pat2.
  * Idiom: 'id && pat' is like 'id@pat' in Haskell.
* 'pat1 || pat2' -- or pattern. The value matches either pat1 or pat2.
  * pat1 and pat2 define identical sets of bound variables.
  * Useful when simulating a switch statement (one case matching 2 values).
  * [x,y] || [x,y,_==0]
  * Rust, F# use 'pat1|pat2' -- looks nice in switch.
* 'pat >> cast' -- cast pattern.
  * If V is the value being matched, then we evaluate `cast V`.
    If cast's parameter pattern fails, the match fails.
    If the body of cast aborts, then the program aborts.
    Otherwise, the result of `cast V` becomes the new value
    that is matched against `pat`.
  * A cast is a function that maps values onto a particular type, and is
    idempotent for members of that type. This feature implements implicit
    conversions to a type.
  * Within the cast function, the parameter pattern match fails for values that
    are clearly not a member of the type. For values that are considered
    corrupted instances of the type, the parameter matches but an assertion
    fails, aborting the program.
  * S.P.Jones uses the term 'transformational pattern' (pat!fun), and shows
    that this is a way to reconcile pattern matching with data abstraction.
    The cast fun transforms an ADT to a pattern matchable value.
  * `pat >> cast1 >> cast2` equals `(pat >> cast1) >> cast2`.
  * Which equals `pat >> compose[cast1,cast2]`, but only if the result of
    `compose` reports a pattern match failure if any of the constituent
    functions have a pattern match failure.
* Variations of predicate patterns:
  * 'pat == expr', 'pat != expr', 'pat < expr', ... -- relational op predicates
  * 'pat `elem` listexpr' -- range patterns, like 'x `elem` 1..10'.
  * Equality patterns, `== expr`, see above.

"Pattern Guards and Transformational Patterns", Simon Peyton Jones

If Pattern Matches Expression Then ...:
`if (pat <- expr) stmt1`
`if (pat <- expr) stmt1 else stmt2`
`<-` is pronounced "matches". `pat<-expr` is a pattern matching phrase,
which either succeeds (and binds some identifiers) or fails.
The bindings from pat are visible in stmt1.
There are compound PM phrases:
  PM ::= pat <- expr
  PM ::= PM1 && PM2 | PM1 && expr | expr && PM2
         // PM1 and PM2 must define disjoint bindings.
         // PM1 bindings are visible in PM2 and in expr.
         // 'expr' is equivalent to the PM '_ if expr <- null'.
  PM ::= PM1 || PM2
         // PM1 and PM2 must define coincident bindings.
         // PM || expr isn't legal because bindings from PM aren't
         // initialized if PM fails.

Guarded Expressions:
* Inspired by Haskell 2010 guarded equations, but more general.
* A 'guarded expression' is an expression that either yields a value or fails
  due to pattern match failure.
* If the body of a function is a guarded expression GE, then pattern
  match failure of the GE is pattern match failure of the function.
* `try function_call`
  `try function_call else expression`
  Eg, `try arg >> pat->result` is like: `if (pat <- arg) result`.
  `try` can be used to classify function arguments based on their parameter
  patterns.
* Syntax:
  GE ::= if (...) expr
       | if (...) GE
       | if (...) GE else GE
       | try expr
       | try expr else GE
       | expr
* Used with if(pat<-expr)...
* PM ::= pat <- GE
  PM fails if GE fails.
  Eg, if (r <- try f x) <do something with r if f x succeeds>

Filtered For Loop:
* Haskell: for (pattern in list) ..., list elements not matching pattern
  are skipped. Convenient in some cases, hides coding errors in others.
  Swift also has a syntax for this.
* In Curv, we can use
    for (x in list) if (pattern <- x) ...
  This is simple, and makes it obvious that filtering is happening.
* We could also incorporate the filtering into the for loop.
  I don't think it should happen by default, but maybe an alternate syntax:
    for (pattern <- list) ...
  Low priority, not clear we require such an abbreviation if the previous
  syntax is available.

I now have a general notion of a function call failing due to a domain
error, and the ability to direct evaluation based on this failure.
It reminds me of:
* "Goal directed evaluation" in Icon, with 'PM' expressions that
  behave like boolean conditions that can be combined with && and ||.
  Although that is supposed to also cover the generation of a stream of results,
  and backtracking on failure.
* Exception handling, although this particular variety is restricted so that
  it does not break referential transparency.

This is now very general. "pattern directed evaluation"
