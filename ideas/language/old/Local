Block Local Variables
=====================

I want to streamline the syntax for imperative programming.
I don't like this syntax:
    while (condition)
        let
            def1
        in do
            stmt1
        in let
            def2
        in
            stmt2

A 'block' or 'compound statement' is a sequence of statements and sequential
definitions, which are all executed in sequence.

The question is: what syntax to use for embedding sequential definitions in
a compound statement.

Current Design
--------------
A local definition has the syntax
    local <definition>
For example,
    local x = 1
    local include "foo.curv"

Local definitions are used as items in compound statements.
A local definition introduces local bindings whose scope begins at the
next statement (following `;`) and extends to the end of the semicolon-list.

Local definitions can be used in any purely sequential compound statement.
For example,
* Within a parenthesized compound statement, the scope of local bindings
  ends at the closing `)`. This mimics the semantics of brace-enclosed
  compound statements in C-like languages. For example,
    while (condition) (
        local def1;
        stmt1;
        local def2;
        stmt2;
    )
* Within a compound statement in the REPL dialect:
    local x = 1; print x
  prints `1`, but does not create a global binding for `x`.
* Within a `do` clause. Local bindings are not visible in the body of
  a `do` phrase, after the `in`.
* Within a list or record comprehension.

Local definitions cannot be mixed with recursive definitions in the
same semicolon-list. So they can't appear in a `let` clause or in a scoped
record constructor.

Local definitions are not standalone phrases with an independent meaning.
They can't be parenthesized. They are part of the syntax of ;-lists.

In the REPL dialect, a standalone local definition is an error.
It must be followed by '; <statement>'.
    ERROR: a local definition must be followed by '; <statement>'
You get this same error if you try to parenthesize a local definition.

Previous Design
---------------
`local pattern = expression` is a local-definition that can be embedded
in a compound statement, like this:

  statements ::=
    statement |
    statement ; statements |
    local-definition ; statements

The scope of a local-definition begins at the following statement.
This mimics the semantics of block local definitions in most imperative
programming languages. It enables idioms like this:

    f (x,y,z,t) =
        do
            local t = Speed * t;
            ...
        in
            ...;

where you define a local variable with the same name as a function parameter,
and define it in terms of the function parameter. You can't do that with `let`,
and the requirement comes up regularly.

Local definitions can be used in any compound statement, including within
list and record comprehensions. However, local definitions are forbidden
within a scoped record constructor. Local definitions cannot be mixed with
ordinary (recursive) definitions in the same semicolon-list.

This language design is most similar to Scheme. Scheme's `letrec` is the same as
Curv's `let`. Scheme supports internal definitions within compound statements
using `define`, as a convenient alternative to `letrec`. Scheme supports
sequential definitions using `let*`, and the corresponding syntax in Curv is
`do` combined with local definitions.

Details and Implementation
--------------------------
In Curv 0.4, you can parenthesize any meaningful phrase without changing its
meaning. Recursive definitions like (x=1) can be parenthesized. There are
compound recursive definitions like (x=1;y=2) that can be parenthesized, and
phrase like this is also a definition.

Is a local definition a phrase with a bottom up meaning? Can it be
parenthesized? Are there compound local definitions?

There are two contexts where local definitions can be used.
 1. A `do` clause is analogous to a `let` clause: the bindings are visible
    in the body.
     * `do local x = 1 in x` works. This `do` clause only contains a local
       definition, no statements.
     * `do local x = 1; local y=2 in x+y` works. Here we have a semicolon
       list where the last item is a local definition.
 2. Outside of a do clause, a semicolon list containing local definitions
    is a compound action. If such a semicolon list is parenthesized, then
    the local bindings are confined inside the parentheses. It works like
    a C `{...}` braced compound statement. The effect of the parentheses is
    quite different from a parenthesized compound recursive definition.

In the REPL, `x=1; print x` defines `x` globally.
By contrast, `local x=1; print x` does not define `x`.

It would be more consistent if local definitions do not escape a `do`
clause: they are not visible in the body. You can use `let` if you
want the latter behaviour. Note, this provides a forcing function
concerning how you use let vs how you use local.

    let f = 0;
    in do
        local p = rot(x,y,z);
        f := f + 0.5000*noise(p); p := p*2.32;
        f := f + 0.2500*noise(p); p := p*3.03;
        f := f + 0.0625*noise(p);
    in f/0.9375;

    let p = [x,y,z]*Scale;
    in do
        local t = t*Speed;
        for (i in 1..Iter)
            p := p + Amp/i*sin(i*p[[Y,Z,X]] + t + [0,tau/3,tau*(2/3)]) + 1;
    in  sRGB(0.5*sin(p*pi)+0.5));

Older Ideas
===========
0. Modified let/do
------------------
    while (condition)
        let
            def1
        do
            stmt1
        let
            def2
        do
            stmt2

1. Local Keyword
----------------
`local pattern = expression` is a sequential definition that can be embedded
in a compound statement.

If we consider the `;` operator to be a right associative binary operator,
then a compound statement is:
  statements ::=
    statement |
    statement ; statements |
    sequential-definition ; statements

Resulting syntax:
    while (condition) (
        local def1;
        stmt1;
        local def2;
        stmt2;
    )

In what contexts are compound statements used?
    [ compound-statement ]
    { compound-statement }
    Imperative programming:
      if (condition) (compound-statement)
      while (condition) (compound-statement)
      etc...

The weirdest case is record comprehensions. Inside brace brackets,
a regular definition signals a scoped record constructor.
The keyword `local` signals that this definition is not defining a field.

Should `local` definitions support recursive and mutually recursive definitions?
Eg,
    local def; stmts
    local (def1; def2; ...); stmts
is like
    let def in (stmts)
    let (def1; def2; ...) in (stmts)
This shows that the main point of `local` is to get rid of the parentheses
around (stmts). That's the streamlined syntax I want.

[I think you should just use `let` if you want a recursive definition. `local`
should introduce a sequential definition, for consistency with other imperative
languages, since we are introducing this new syntax specifically to support a
more natural imperative style.]

Or should `local` definitions support parallel definitions, like Scheme's `let`?
This means that Curv `let` is like Scheme let-rec or ML let rec,
while the equivalent of Scheme and ML `let` is:
    do  local (a = 1; b = 2);
    in expression
and the equivalent of Scheme's let* is
    do  local a = 1;
        local b = a + 1;
    in expression

[Parallel definitions don't seem like a high priority. You can also write
    local (a,b) = (1,2)
]

2. Modified Let
---------------
Change the syntax of `let` to support the streamlined syntax I want.

  statements ::=
    statement |
    statement ; statements |
    let definition ; statements |
    let (definitions) ; statements
  expression ::=
    let definition in expression |
    let (definitions) in expression

Resulting syntax:
    while (condition) (
        let def1;
        stmt1;
        let def2;
        stmt2;
    )

A nice thing about a `let x = 1` statement is that this syntax is found some
well known languages: Javascript, Rust, Swift.

Although it seems economical to reuse the `let` keyword, now we have a kind
of overloading, and you need to scan forward to find the `;` or `in`
to determine the scope of the `let` definitions.

If I change `do` to work the same way, then we have:
    statement ::= do ( statements... )
    expression ::= do ( statements... ) in expression
Right now, the only context where `,` and `;` are both allowed, and they
have a different meaning, is inside parentheses. I could change that by
using `do ( statements... )` as the compound statement syntax.
    while (condition) do (
        let a = x + y;
        x := x + a;
    )
So now I have two ways to define local variables:
    let x = 1 in statement
    do (let x = 1; statement)
This choice is a bit ugly/overly complex. F# does something similar with `let`
and I don't like it there either. Compare:
    let x = 1 in statement
    (local x = 1; statement)

3. Plain Definitions
--------------------
  statements ::=
    statement |
    statement ; statements |
    definition ; statements

This has multiple problems. First, an imperative programmer will mistake
`x = 1` for an assignment statement if used in a statement context.

Second, it is ambigous, and conflicts with the current grammar, where
`(defn1;defn2)` is a compound definition, and `(def1;defn2;action)`
is also a compound definition, not a compound statement.

If we introduce a special syntax for compound statements, such as
   do (statement1; statement2; ...)
and restrict this interpretation of definitions to the context
   do (statements)
and
   do (statements) in phrase
then it could work.

Right now, the syntax for compound statements and the syntax for list and
record comprehensions are orthogonal to each other. So we have
    statement ::= statement1; statement2; ...
    expr ::= [ statement ]
    expr ::= { statement }
But, this proposal breaks that orthogonality.
Also, it breaks the semantics of `;` in the REPL language, which uses it for
both compound statements and compound recursive definitions.
