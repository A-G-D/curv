Display interactive value pickers within the Viewer window,
for tweaking the parameters of a parametric shape.

Graphical value pickers:
------------------------
* enum: a fixed set of values
* slider: for a bounded numeric range
* integer slider (discrete slider)
* normalized 2D vector picker: a direction
* 2D point picker for a bounded range
* colour picker
* hue picker
* boolean

Building Block Syntax:
----------------------
A parametric record is a record with a `call` field that maps a record of
parameter values onto a new instance. A parametric record has a set of named
parameters with default values.

For example, a parametric shape in file `lollipop.curv`:
  param
    diam = 1;
    len = 4;
  in
    union(candy, stick)
  where (
    candy = sphere diam >> colour red;
    stick = cylinder {h: len, d: diam/8} >> move(0,0,-len/2);
  )
This returns a record (union(candy,stick)) augmented with a `call` field,
which is a function with parameter {diam=1,len=4} that returns a customized
version of the record.

The command
  curv -Dlen=6 lollipop.curv
modifies one of the shape parameters. Actually it treats the result
value V as a function, and calls V{len:6}.

This design does not put the parameters into the record. They might conflict
with field names in the (extended) shape protocol. It might make sense to
add a single field which is a parameter record. What to name it?
Not `param`, that's a reserved word. Maybe `p`.

Parametric Record Semantics
---------------------------
kube =
  param
    d = 2;
  in
    box(d,d,d);

is semantically equivalent to:

kube = (
    make{d:2}
where
    make{d} =
      { ... box(d,d,d);
        call{d:d} : make{d:d};
      };
);

except that the Viewer recognizes the first as a "parametric record" and
displays value pickers. Internally, parametric records must preserve the
parameter name/value mappings in a way that the Viewer can access: the second
form doesn't obviously do that.

We now have a reason to change the existing shape constructors (like cube)
into parametric records--so that they can be customized. Eg, just typing 'cube'
will display the cube, plus pickers for modifying the cube. But, there's a
backward compatibility and expressiveness issue. `cube` just takes a number
argument. Half-plane is overloaded with several record patterns. The sharp
solids have `.exact` and `.mitred` variants.
* Can we preserve these interfaces in the shape constructors?
  * No problem with `.exact` and `.mitred`. Overloading is an issue.
  * Does it help if the `param` syntax is sugar for a more general syntax?
    Eg, `parametric <function>`, see below.
* Can we expose a full shape constructor interface in a graphical picker?
  * Suppose that a parametric record preserves the particular overloading
    used in the constructor (ie, the constructor argument, which is normally
    a record here). The value pickers let you modify the fields of the
    constructor argument, but don't let you change to a different overloading.
    Then it's easy.
  * Suppose the picker interface lets you switch between alternate
    parameter patterns. Then there needs to be code that reconstructs the
    parameter values for the new basis. That's harder.
  * Exposing the `.exact`, `.mitred` interfaces is harder.
    Would need to mark specific elements of a record as constructors.

Let's add syntax: 
    parametric {...} -> record_expr
This can be composed with `match` to create overloaded shape constructor
functions that return parametric shapes. Also, the abbreviation:
    parametric name {...} = record_expr
creates a function that maps a record onto a parametric-record. Eg:
    parametric cylinder {is_distance d, is_distance h} = ...;

Picker Type Declarations
------------------------
Each parameter in a parametric record can declare its value picker type.
* OpenSCAD uses special comments.
* Fragmentarium uses syntax like slider[first,default,last] and checkbox[true].

In Curv, everything is a value. Picker types are values.
If you specify a picker type for a parameter, then you have constrained its
value set, just like using a predicate pattern. Picker types are a
special kind of predicate function. Eg, `is_bool` implies a checkbox.

* is_bool a -- a is a boolean value, use checkbox picker.
* range(i,j) a -- a is a number between i and j inclusive, use slider picker.
  Or `i <= a <= j` I guess.

Parametric Record Objects
-------------------------
A parametric record is just an ordinary record value, containing:
* A constructor function, which maps a parameter record to a new precord.
  Stored in the `call` field.
* A parameter record (with the name and value of each parameter)
  stored in the `p` field.

The Viewer recognizes a parametric shape because it is a shape record with
these two extra fields, `call` and `p`.

The Viewer compiles the `call` field into GLSL. The `call` pattern is
a record pattern, and each field has a predicate pattern, which contains
the picker type. This record pattern must match the `p` field.
The parameters are emitted as uniform variables. The body of the function
must yield a shape record, as determined at compile time using type inference.

Named Parametric Records
------------------------
In addition to the required `call` and `p` fields, let's add an optional `name`
field.
* This is used as a title for the picker window.
* If the name is present, then a parametric record is printed as `name{params}`.
  Eg, "cube{d:2}" is a lot more readable than dumping the cube record.
* `parametric cube{is_distance d} = box(d,d,d)`. Now `cube` constructs a named
  parametric record.
* Now we need a way to print values verbosely.

Functions have an optional name, too, which are also used for printing.
For consistency, maybe f.name is defined if function value f has a name.

See `Terms`_ for more details.

Concept Name
------------
* Parametric Record
* Prototype (from "prototype-based programming" (Wikipedia)).
* model, exemplar, archetype, instance

Saving your State
-----------------
Is there a way to preserve the state of the sliders? (Not supported in v0.0.)
 1. Save the slider state in a separate file, a `*.cparam` file.
    It records the parameter values, and references the parent program file.
    It could have JSON or Curv syntax. Eg, `file.foo{a:1,b:2}`.
    Opening the parameter file in a GUI opens Curv with the program file open
    and with the sliders set.
    In file syntax, a CPARAM file denotes a parametric record value.
 2. Save the slider state in the original source file.

Editing Subexpressions
----------------------
If a subexpression of your program is a static parametric record, then it
should be possible to open a viewer on that subexpression, pick values,
and save the value picker state by updating the subexpression source code.

GUI Implementation
------------------
If Curv displays a parametric record which is also a shape, then open the
shape viewer window, add sliders to it, populate default values.

The shape is compiled into GLSL code that includes uniform variables for
each parameter. The Viewer app connects the sliders to the uniform variables.

How is the Viewer implemented?
* Hack glslViewer to include sliders. Need a widget library compatible with
  GLFW. With an Immediate Mode GUI in OpenGL, a translucent picker window can
  float on top of the model in full screen mode. Interactivity sucks when the
  frame rate goes down, need progressive rendering.
  * use github.com/wjakob/nanogui. *2,000
  * use AntTweakBar -- it seems purpose designed for this. Translucent picker
    window floats on top of model, suitable for full screen viewing.
  * use github.com/ocornut/imgui. *11,000
    Full featured--could implement editor and console window using imgui.
* Use QT.
