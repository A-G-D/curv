Display interactive value pickers within the Viewer window,
for tweaking the parameters of a parametric shape.

Graphical value pickers
-----------------------
* checkbox: for a boolean value
* enum: a fixed set of values
* slider: for a bounded numeric range
* integer slider (discrete slider)
* normalized 2D vector picker: a direction
* 2D point picker for a bounded range
* 2D translation (pan control)
* 3D rotation
* colour picker
* hue picker

Reactive Records
----------------
// Lollipop:
  parameters
    (slider(0.5,4) diam) = 1;
    (slider(1,8)   len) = 4;
  in
    union(candy, stick)
  where (
    candy = sphere diam >> colour red;
    stick = cylinder {h: len, d: diam/8} >> move(0,0,-len/2);
  )

The slider annotations cause the GL compiler to assign uniform variables to the
parameters diam and len. There is a GL compile error if the resulting code
is not GL compatible, which goes away if you remove the annotation.

This is an extension of Parametric Records, `../language/Parametric_Record`.
The new feature is the annotations.

The Lollipop is a parametric shape. It has a `call` field mapping {diam,len} to
another lollipop. The GL compiler recognizes parametric shapes. The parameters
of `call` which have annotations are mapped to uniform variables, while non
annotated parameters are replaced by their default values. Then the body
is GL compiled to a shape record. The GL compiler outputs each shape field as
a top level GLSL definition.

Possibly we can change some or all of the primitive shape constructors to use
reactive records, thereby enabling the Viewer to display value pickers.
See Parametric_Records for more discussion.

Picker Type Annotations
-----------------------
Each parameter in a parametric record can declare its value picker type.
* OpenSCAD uses special comments.
* Fragmentarium uses syntax like slider[first,default,last] and checkbox[true].

In Curv, everything is a value. Picker types are values.
If you specify a picker type for a parameter, then you have constrained its
value set, just like using a predicate pattern. Picker types are a
special kind of predicate function.

Originally, I thought `is_bool` implies a checkbox. But constraining a
record parameter to be a checkbox not only forces it to be bool, but also
constrains the code that uses the parameter to be GL-compilable.
For this reason, I need a new set of primitive predicates that are specifically
for binding a parameter to a value picker.

* checkbox a -- a is a boolean value, use checkbox picker.
* slider(i,j) a -- a is a number between i and j inclusive, use slider picker.

Reactive Record Objects
-----------------------
A reactive record is just an ordinary record value, containing:
* A constructor function, which maps a parameter record to a new precord.
  Stored in the `call` field.
* A parameter record (with the name and value of each parameter)
  stored in the `parameter` field.

The Viewer recognizes a parametric shape because it is a shape record with
these two extra fields, `call` and `parameter`.

The Viewer compiles the `call` field into GLSL. The `call` pattern is
a record pattern, and each field has a predicate pattern, which contains
the picker type. This record pattern must match the `parameter` field.
The parameters are emitted as uniform variables. The body of the function
must yield a shape record, as determined at compile time using type inference.

Saving your State
-----------------
Is there a way to preserve the state of the sliders?
 1. If the source file is named `foo.curv`, then save the picker state in
    `foo.opts`, which is a Curv or JSON record literal. When `foo.curv` is
    opened later, the parameter values are read from `foo.opts`.
    * If the OPTS file is bad, a warning is displayed and the OPTS are ignored.
 2. Save the slider state in the original source file.

Editing Subexpressions
----------------------
If a subexpression of your program is a static parametric record, then it
should be possible to open a viewer on that subexpression, pick values,
and save the value picker state by updating the subexpression source code.

GUI Implementation
------------------
If Curv displays a parametric record which is also a shape, then open the
shape viewer window, add sliders to it, populate default values.

The shape is compiled into GLSL code that includes uniform variables for
each parameter. The Viewer app connects the sliders to the uniform variables.

How is the Viewer implemented?
* Use a "gamer" widget library that: integrates with your OpenGL main loop,
  supports translucent picker widgets that float in front of the scene.
  * But: if GUI runs in same window as model, interactivity sucks when the
    frame rate goes down. Need progressive rendering?
  * github.com/wjakob/nanogui. *2,000. GP retained mode GUI, no globals.
    https://github.com/darrenmothersele/nanogui-test/blob/master/test.cpp
    Looks nice.
  * github.com/ocornut/imgui. *11,000.
    Full featured--could implement editor and console window using imgui.
    It appears to use global variables, only support 1 window.
  * AntTweakBar: old and specialized. NanoGUI and IMGUI can do the same things.
* Use QT.
  * Can I have a full screen viewer with floating widgets on top of a sphere
    traced scene? Can the widgets be in a separate window/separate
    OpenGL context, distinct from the scene?
    Yes: https://stackoverflow.com/questions/18316710/frameless-and-transparent-window-qt5
  * Then how do changes to uniform variables get propagated from the UI to
    the OpenGL main loop?

Can the Viewer code be kept modular, so that the picker code (using a particular
GUI toolkit) is separate from the model rendering code? This is vague.
A better question: what integrations do I want to support?
* Integrate with Python
* Integrate with a Qt application
  * Which uses the curv Viewer window
  * Which renders application data using the Curv graphics engine
* Integrate with an IDE
