Design Alternatives for Reactive Values
---------------------------------------
Are reactive values typed or untyped?

 a. Untyped. This simplifies the evaluator; the tradeoff is that we
    lose most of the evaluator's ability to return definite results given
    reactive arguments. So we lose a lot of opportunities to simplify reactive
    expressions. This will be evident when reactive expressions are printed.
    It will reduce the # of cases where a reactive expression is simplified to
    a Shape value that can be graphically displayed (in the current design).

 b. Statically Typed (using SubCurv types). Imposes more restrictive semantics
    on reactive expressions than are imposed by the interpreted language: both
    branches of a 'if' must have the same type.

 c. Richly Typed. A rich type system, which covers all Curv values, and includes
    union types, is used to annotate reactive values. The evaluator uses these
    types to simplify (partially evaluate) reactive expressions. The types
    follow the semantics of interpreted Curv. The result of an 'if' expr is a
    union type. This seems like the most expressive one.

How is 'if (C) X else Y' implemented for reactive C?
 1. The X and Y are captured as thunks, and one of them is executed once the
    value of C is known.
     a. Untyped. Easy.
     b. Statically typed. We need to perform type inference on the thunks.
        It's SubCurv typing. Calls to recursive functions are illegal.
        It's bottom up typing using only finite SubCurv types. Not too hard.
     c. Richly typed. Requires a full-blown type system. Research project.
 2. We evaluate X and Y right away, if they aren't also reactive (meaning no
    direct data dependency on C). This evaluation could abort with an error
    (we could capture the error as an error thunk value). This evaluation
    could diverge (this seems bad?). Once we have a value, the typing is easy.
     b. SubCurv expressions should never diverge (or abort). So eager evaluation
        is maybe not a problem. Maybe we apply a SubCurv interpreter to X and Y,
        and abort on a call to a recursive function.

This last bit has me thinking about Dhall, in which all functions are total.
This seems appropriate for SubCurv, where functions must not diverge, and they
cannot throw an exception. (Dhall is too limited to write shader functions:
no division operator.)

Statically typed is the way forward, because:
 * Untyped looks to break things that currently work.
 * Right now, reactive values always occur in the context of code that needs to
   be SC compiled, meaning the SC type restrictions are necessary anyway.
 * We will extend the SC type system to be more like C (general tuple and array
   types, record types), making the restrictions more acceptable.
It's the easiest path forward, and we'll make the type system richer over time.

Soft Typing
-----------
Assignment of types to reactive expressions uses "soft typing", where type
conflicts produce an Error type and don't automatically cause the program to
abort. sc_result_type computes a soft type for the reactive expression, it
is not as restrictive as sc_check_args. Figure out the type system and then
fix this.
    Here's a bbox value:
        [[x0,y0,z0],[x1,y1,z1]] * reactive_num
    It is given the type Array[2]Vec3. Notice this isn't a struc type.
    Binary_Num_SCMat_Prim::sc_result_type() is rigged to return non-struc types
    so that this case won't generate a compile error. Non-struc values aren't
    supported by SubCurv, but this case works out because it is a bbox value,
    and we aren't compiling this expression into GLSL.

Deferred Type Inference?
------------------------
Right now I attach a SubCurv type to each reactive value during evaluation.
For reactive expressions, I'm doing type inference during evaluation,
deriving a result type from argument types.

What if I defer this type inference work until SubCurv compile time?
Benefits and drawbacks?

With deferred type inference:
 * Reactive values have no type.
 * Pattern matching gets stuck.
 * Most function calls get stuck (because no pattern matching).
 * A pattern matching definition can get stuck. That's new. How do we represent
   that?

Lazy Boolean Operations?
------------------------
How to evaluate
   C && X
   C || X
   if (C) X else Y
when C is reactive Bool? Approaches:

## 1. Strictly evaluate X and Y.
But then they may abort or diverge unnecessarily?
 * Is this true, or does divergence necessarily depend on the values of the
   reactive variables which forced the creation of a reactive expression?
 * Example: `is_list x && count x > 0`. The `is_list` in the left expr
   is needed to prevent the right expr from aborting. But if `x` is reactive
   then the second argument will also be reactive and eager evaluation
   of the second argument won't cause a bug.
 * Counter-example: `if (reactive-bool) consequent else error("abort")`.
   I can fix this problem by capturing the error in a Reactive_Error value.
    * The Reactive_Error will be reported at the correct time if the reactive
      expression is later evaluated by the interpreter.
    * Errors aren't supported in the GPU.
 * `(<reactive Bool> && is_list x) && count x > 0`
   => `(<reactive Bool> && #false) && count x > 0`
   => `<reactive: <reactive Bool> && #false> && <abort>`
   That isn't great. We need to ensure that `<reactive Bool> && false`
   evaluates to false, and not to a reactive expression.
 * X and Y could also diverge (infinite loop). But only if there is no
   data dependence on the reactive variable that causes C to be reactive.
 * Counter-example: `(x == nonzero && divergeifzero x)`, where `nonzero` is
   a reactive variable. This seems bad.

## 2. Convert X and Y into reactive thunks.
What is the code for creating a reactive thunk at run time?
We need to capture local and non-local variables referenced by the expression
arguments. Is any compiler support needed?
 * The data is in the Frame, and the X/Y expression contains Ref exprs that
   reference the frame.
 * It is forbidden for a Value to reference a Frame, because that could create
   a reference cycle. Give a concrete example of how this could happen here.
    * The Reactive_Expr value created by a&&b could be stored in a Frame slot.
      That creates a cyclic reference.
 * However, if we copy the Frame and reference this unique copy from the
   Reactive_Expr, there is no cycle. The Frame copy has no refcount, it is
   unique.
 * If I use this implementation, how does SC_Compiler compile the Reactive_Expr?
    * The X and Y expressions are partially evaluated. The residue must consist
      of SubCurv compatible primitive operations and values and reactive
      variables.
    * But we can't partially evaluate the X and Y expressions, because they
      might abort unnecessarily, or diverge.
       * Is this true, or does divergence necessarily depend on the values
         of the reactive variables which forced the creation of a reactive
         expression? Can I construct an example or counterexample?
    * Use a more limited form of partial evaluation on total functions that
      is safe. Or conservatively don't perform partial evaluation at all,
      which further limits the diversity of expressions supported for X and Y.

What are the semantic differences between these approaches (as distinct from,
a change in the evaluation order can have a performance impact)?
 * At first glance, Curv is a pure functional language, so the best semantics
   are normal order evaluation, because that maximizes the number of programs
   that will evaluate without aborting or diverging. So, thunk X and Y.
 * But, Curv uses 2-phase evaluation. Partially evaluating X and Y
   maximizes the number of programs that will compile into GLSL.

Can Reactive Variables be Hidden from User?
-------------------------------------------
`animate(t->expr)`: Partially evaluate `expr` with `t` as a reactive
variable of type Num. Partial evaluation is type directed, assigning a type
to each expression. Possible results:
 * A typed reactive value.
 * A plain value, not a reactive value, and with no accessible reactive
   components, except those captured by function closures. But even those
   captured reactive values are accessible. If S is an animated shape,
   `S.distance[x,y,z]` is an animated distance, which is a reactive number.

I'm not pursuing this idea.
