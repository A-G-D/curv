Animation
=========
One requirement for the new core is a high level interface for animating
a shape. The approach that I have explored of providing animated variants
of every shape constructor, is too burdensome on the authors of shape
constructors. In OpenSCAD, you reference $t and it just works. I need a
"just works" solution.

Requirement 1: It is as simple and robust as the $t variable in OpenSCAD.
Given any shape expression, you can reliably introduce time variable references
into the expression, and get an animated shape.

Requirement 2: Pure functional semantics. An animated shape is in some sense
a function from time onto a shape, however it is encoded. It is possible to
write time transformations, eg that speed up or slow down an animation,
or space/time transformations, eg that add motion blur.

Specialized Interface
---------------------
Only record values can be animated. The implementation is similar to parametric
records, except that the parameter is time. This is good enough for all
graphical values, which I expect to be represented by abstract records.
    animate (t->record_expression)

If we continue the analogy with parametric records, perhaps the default time
value is 0. So, the bounding box of an animated shape is its bbox at time=0,
rather than a reactive value containing unevaluated `time` references.

To instantiate an animated record R at a specific time, it is similar to
customizing a parametric record. Eg, R{time: 0}.

Benefits:
 * `animate` and `parametric` could be implemented at compile time, without
   extending the interpreter to support reactive values, which are
   proving to be a challenge.
 * With the `time` proposal, time expressions are subject to static type
   checking using the SubCurv type system. With this design, the weirdness of
   these type restrictions only occurs inside an `animate` body, which is
   helpful for documentation and error messages.
Drawbacks:
   Generalized animated values (with reactive values in the interpreter)
   are a much more exciting feature, with great support for live programming
   and FRP.

So I'm shelving the restriction to only animated records.

Generalized Interface
---------------------
Expressions for constructing animated values:
* animate (t->expression)
* global reactive variable 'time'

These interfaces are largely equivalent:
    time = animate (t -> t)
    animate f = f time
Minor differences:
* The body of `animate` can be a function, eg `animate(t->x->x+t)`. Does this
  yield an animated value wrapped around a function? Such values can't be
  constructed using `time`, because `x->x+time` is a function value.
* If we use early type checking (see Implementation), then the type restrictions
  can be documented as part of the interface to `animate`.

How is an animated value printed?
* Ideally, if you print `time`, then you see an animated number whose value
  is updated every frame. This fits a future UI & REPL where all values are
  graphical and the entire UI is rendered by the GPU using Curv logic.
* As a compromise for the current UI, if the value is recognized as a graphical
  value (eg, a Shape), then it is rendered graphically and with animation.
  Otherwise, it is rendered as static text: `animate (t -> expr)` or as an
  expression of `time`.

An animated value is essentially a thunk containing an unevaluated expression
over `time`. This thunk contains constants, operators, and `time` references.

You can do arithmetic on animated numbers. Eg,
    1 + animate(t->t)        1 + time
gives
    animate(t->1 + t)        1 + time

Instantiate an animated value at a specific time.
 * Original proposal: animated@{time=2}. This supports multiple primitive
   reactive variables, of which one is `time`. This particular syntax requires
   all primitive reactive variables to have unique names within a shared
   namespace.
 * Primitive reactive variables like `time` are abstract, branded values that
   compare equal only to themselves. These values have identity, let's use the
   values themselves as keys.
        instantiate(time+1, time, 2) == 2+1 == 3
        substitute(time+1, time, 2) == 2+1 == 3
        replace(time+1, {time => 2}) == 2+1 == 3  // use a dictionary.
                                                  // like Mathematica.

Test a shape's distance function to see if it is animated.
This test need not be available in the evaluator; the information needs to
be available after compiling a distance function to GLSL, to optimize GPU
execution in the Viewer.

Implementation
--------------
Equality: same as function equality

Type checking: When does `"foo" + time` fail?
 * Perhaps an animated value carries a type. `time` is a Number.
   `time + #foo` fails at construction time because <Number>+<Symbol>
   does not type check. Requires type checking in the evaluator.
 * Perhaps type checking is delayed until SubCurv needs the type.
   Uses the IR analyser/type checker which is already required.

Late type checking seems easier and "more dynamic"?

I didn't do this in the current Reactive Values implementation because,
in the implementation of `parametric`, I construct a Uniform_Variable value
for each parameter, then pass a record of these uniform variables as the
argument to the parametric body function. Each formal parameter has a predicate
constraint (eg, :: slider(x,y)), and so I wanted each Uniform_Variable value
to carry a type, so that predicate checking would not fail. Thus it came to be
that all Reactive_Values have a type, and there is all this Reactive_Value
type inference code in the evaluator. The new_core provides a better way to
compile a parametric record. The evaluator no longer requires type inference
code.

However, the principal use case where animated values are actually executed is
in a shader or GPU kernel, and in this case, the animated value must conform
to SubCurv type restrictions. So early type checking is acceptable?

Consider `if (time > 10) sphere else cube`. How can this be rendered?
 * With early type checking and a strict SubCurv type system, this is an error.
 * Given a type system that covers all of Curv, we could determine, using
   type inference, that this is a shape expression, then compile to a shader.
   First, we need to determine whether the shape is 2D or 3D.
   If the type system contains 'constant' types containing a single value,
   then we can test if <shape>.is_3d has type constant(true) or constant(false),
   and report an error otherwise.
   Then we can compile the distance function using code transformations:
        pt->(if (time > 10) sphere else cube).dist pt
            => pt->(if (time > 10) sphere.dist else cube.dist) pt
            => pt->if (time > 10) sphere.dist pt else cube.dist pt
            then inline `sphere.dist pt` and `cube.dist pt`.
 * Rendering logic could be split between CPU and GPU. This would allow the
   two branches of the `if` to have different types.

Which gives the best compile time performance, early or late type checking?
If we first build an untyped expression tree (to represent an animated value),
and then we later assign types to it, is that faster or slower than building
a typed expression tree directly?
 * We would like to avoid copying the animated value expression tree during
   ir_eval (SubCurv type checking).
 * ir_eval includes CSE. For efficiency, we avoid creating a tree if the
   same tree already exists in the cache. We could do this work during
   evaluation (and avoid repeating the work in ir_eval) if we maintain an
   IR level #0 and level #1 expression cache during program evaluation.

So, we construct a typed, CSE'd IR tree during evaluation, then use that
IR tree during ir_eval with no additional overhead. Any downside?
 * We may be caching IR nodes that aren't referenced by the compiled program,
   which might be extra work.

Consider this code:
    let x = f time;
    in ...many references to x...
In the current implementation of Reactive Values, the evaluator binds a
reactive value to x, then substitutes that value multiple times when
evaluating the let body, creating a DAG. Common subexpression elimination
was added to the compiler to reduce code bloat.

Old Stuff
=========
Global Reactive Time
--------------------
The special global variable `time` is a reactive variable that denotes the
current time during an animation. The time is only available at GPU runtime,
not at interpreter runtime. So at interpreter runtime, an expression that
references `time` turns into a thunk (an implicit function of time), or it
turns into a data structure containing such a thunk, or a function returning
such a thunk. This idea comes from FRP.

The danger is that the top level value returned by a program could be a time
thunk, and that we would not recognize the value as a shape due to dynamic
typing. For example,
    if (time < 10) cube else sphere
Requirement #1, reliability, asks that this or any similar program should
yield a value that we can recognize as a shape.

There is a similar problem with `parametric` shapes. The body of a parametric
expression needs to be a shape constructor (not an `if` expression), and
each shape constructor that is compatible with `parametric` needs to confine
non-shape parameter references to inside of other shape constructor arguments.

Animate Constructor
-------------------
If we are stuck with this restriction on animated shape expressions,
then I'll vote for the `animate` constructor, so that we can document the
restriction as part of the `animate` API.
* Which means no global reactive `time` variable. See 'Reactive' for reasons
  (simplicity of implementation) to dump the reactive variable feature.

With the `animate` constructor, I think that the new_core SC compiler, with its
partial evaluator and type checker, are responsible for extracting a shape
from the time-parameterized shape expression. The evaluator is not responsible.
I think we might be able to significantly ease this restriction, and produce
good errors otherwise.

The Animated Shape Expression time parameter restriction
--------------------------------------------------------
If we are stuck with the restriction, then I want a good error message
that describes the problem when the restriction is violated.

Alternatively, can we design a language where the restriction doesn't exist?
* Static typing fixes the problem. We recognize a shape by the type of the
  shape program, not by examining the dynamic type of its result value.
* Static typing imposes restrictions on what programs are valid.
  Maybe those same type restrictions are enforced by the code that constructs
  time thunks, so that time thunks are always well typed, even if as a whole
  the language is dynamically typed.
