IR_Expr is a node in an IR expression tree.
The SC compiler compiles expressions into IR_Expr trees.
We optimize the tree, then finally emit GLSL.

IR_Expr replaces SC_Value. IR_Expr objects are constructed, we optimize the
tree, then we emit GLSL, while SC_Value objects emit GLSL during construction.

During the initial implementation phase, there is a two way conversion between
SC_Value and IR_Expr, so that the new compiler can be coded incrementally:
 * For a primitive that has been converted to use IR_Expr,
   'Operation::sc_eval(SC_Frame&) -> SC_Value' calls ir_eval then ir_emit,
   then constructs an SC_Value.
 * For a primitive that still uses SC_Value, ir_eval calls sc_eval and
   constructs an IR_SC_Value object.

Optimizations:
* common subexpression elimination CSE
* constant evaluation
* peephole optimizations, operation specific

Methods:
* type()
* is it a constant? if so, what is the value?
* hash(), for CSE
* scope() index, for CSE
* emit(): output GLSL or C++
* print(IR_Printer&): pretty-print the IR using Curv syntax, for testing and
  debugging.
