Conventional 2D primitives (the Postscript model that everyone uses)
can be rendered much faster on a modern GPU, than is done by current software.
So this the best platform for building a 2D GUI toolkit -- the speed can
open new possibilities.

The Curv 2D subsystem should adapt these ideas.

"Why are 2D vector graphics so much harder than 3D?"
https://blog.mecheye.net/2019/05/why-is-2d-graphics-is-harder-than-3d-graphics/

Pathfinder
A fast, practical GPU rasterizer for fonts and vector graphics (Rust)
https://github.com/pcwalton/pathfinder
"Patrick Walton of Mozilla has explored not just one, but three separate
approaches in Pathfinder, culminating in now Pathfinder V3."
* https://github.com/pcwalton/pathfinder/wiki/Related-approaches
https://pcwalton.github.io/2017/02/14/pathfinder.html (2017 version)

Massively-Parallel Vector Graphics (siggraph 2014)
http://w3.impa.br/~diego/projects/GanEtAl14/

Raph Levien @raphlinus
https://github.com/linebender/piet-metal (Rust, eventually)
Experimental Metal-based GPU renderer for piet 2D graphics.
To simplify research, it only targets Metal 2.1 (represents near future of GPUs)
https://docs.google.com/document/d/1LILagXyJgYtlm6y83x1Mc2VoNfOcvW_ZiCldZbs4yO8/
"2D Graphics on Modern GPU" blog post
https://raphlinus.github.io/rust/graphics/gpu/2019/05/08/modern-2d.html
* inspired by Pathfinder and M-PVG

These projects are largely focused on fast rasterization, whereas Curv needs
a signed distance field to feed into further shape operators. But I think I
can extract useful approaches from this work.

Glyphy: high quality font rendering using SDFs on the GPU.
Not as high performance as the previous projects, but looks plenty fast enough
in the demo part of the talk (https://vimeo.com/83732058), plus he is showing
an SDF of a page of text and performing all sorts of transformations on the SDF
at 60 FPS.

"Random-Access rendering of general Vector Graphics"
http://hhoppe.com/proj/ravg/

This interprets an SVG as something very close to a Curv SDF/colour field,
with GPU rendering in a fragment shader: given [x,y], return pixel colour.
It uses the familiar approach of beam optimization: partition the viewport
into equal size rectangular cells, and within a cell, render only those
primitives that intersect the cell, by constructing a display list for each
cell.

Windows, closed source, binary only.

We introduce a novel representation for random-access rendering of antialiased
vector graphics on the GPU, along with efficient encoding and rendering
algorithms. The representation supports a broad class of vector primitives,
including multiple layers of semitransparent filled and stroked shapes, with
quadratic outlines and color gradients. Our approach is to create a coarse
lattice in which each cell contains a variable-length encoding of the graphics
primitives it overlaps. These cell-specialized encodings are interpreted at
runtime within a pixel shader. Advantages include localized memory access
and the ability to map vector graphics onto arbitrary surfaces, or under
arbitrary deformations. Most importantly, we perform both prefiltering
and supersampling within a single pixel shader invocation, achieving
inter-primitive antialiasing at no added memory bandwidth cost. We present
an efficient encoding algorithm, and demonstrate high-quality real-time
rendering of complex, real-world examples.

https://ultralig.ht
Ultralight: a lightweight, pure-GPU, HTML UI renderer for native apps
https://github.com/ultralight-ux/ultralight
closed source, binary only
