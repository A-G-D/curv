Geometry Engine Performance (Feb 2018)
======================================
In future, the Curv geometry engine will use a combination of F-Rep and Discrete
SDF representations. It will use a pipeline of multiple kernels, rather than
a single monolithic kernel.

My first attempt at optimization will throw out the fancy lighting model
and just use Blinn-Phong shading.

GPU compute is very fast. Memory bandwidth is more limited, so access to
global data (like textures) is relatively slow.

F-Rep can be extremely fast. But it can also be very slow: it depends on the
size and complexity of the distance function:
* A union of many shapes (using min) is slow: the performance is somewhat
  worse than O(N), where N is the number of shapes in the union.
* Chaining together a lot of geometry operations can slow things down
  (although an optimizing compiler can mitigate this somewhat).
* `if` statements can cause divergence, which can significantly slows down
  computation.
* A large monolithic kernel will spill registers, which is slower than a
  small kernel that doesn't spill registers.
* Some geometric shapes and operations are just inherently expensive to
  implement. Particularly when the distance function has to find a root
  of another distance function.

Splitting a large monolithic kernel into a pipeline of smaller kernels
is a well known way to improve performance.

There are ways to optimize root finding on a GPU using interval arithmetic.

Discrete SDFs (implemented as 3D textures) have benefits:
* Once they are computed, the distance function has a fixed cost, regardless
  of the cost and complexity of the distance function used to compute it.
* Can be guaranteed to be Euclidean, regardless of the shape being represented.
* Some geometry operations are faster/easier to implement/only practical
  if implemented on a discrete SDF, rather than using F-Rep.
* E.g., Best way to import a large mesh is to convert it to a discrete SDF.

The drawbacks are:
* Only finite shapes.
* Only finite resolution, with a memory/resolution tradeoff.
* Texture lookups are slow compared to compute.
  There is a texture cache, and you can thrash it.
  When discrete SDFs are used, it pays to optimize the render pipeline to
  minimize the number of texture lookups (see mTec project).
