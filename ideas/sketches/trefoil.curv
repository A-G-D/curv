/*
http://www.fractalforums.com/new-theories-and-research/not-fractal-but-funny-trefoil-knot-routine/

This code is for generalized toroidal knots.
It seems to be a distance function for Mandelbulb3D.
- "polyfold order" -- "number of petals"?

A distance function. Input is Vec, output is Mag.
------------------------
// we modify copies of the variables not the variables ;)
x = Vec.x; y = Vec.y; z = Vec.z;
// try any + or - integer for a & b. Neg values change the handedness
// If you are greedy use only b and set a = 1. Less user friendly btw
Mobius = (a + b/polyfoldOrder) * atan2(y,x)
x := hypot(x,y)-R1 // from now on we will not use y anymore - act on z-rho section
Rotate(x,z,Mobius)
// now do the magic polyfold. But polyfoldOrder must be integer too! 
// I stole this transform from PolygonalBarnsleym in sam.ufm ! It generates those kaleidoscope things with ease
Angle = (pi/2 - atan2(x,z)) * polyfoldOrder / twopi
Angle = roundInt(angle)
Angle = Angle / polyfoldOrder * twopi
Rotate(x,z,Angle)
x = x - R3
// final steps now ... dun dun dunnn ...
Mag = hypot(x,z) - R2
// Done :D
return Mag;

// Replace hypot() with max() or min() and see what happens ... ;)

// My settings R1 = 2 , R2 = .4 , R3 = .5
// trefoil is of order 2, then a = b = 1 (the simplest knot)
*/

/* Wikipedia, nice looking parametric trefoil knot.
   There's another parameterization that wraps around a torus, doesn't look as nice
x = sin(t) + 2*sin(2*t)
y = cos(t) - 2*cos(2*t)
z = -sin(3*t)
*/

/*
"The Implicitization of a Trefoil Knot" by Michael Trott
https://www.google.ca/url?sa=t&rct=j&q=&esrc=s&source=web&cd=13&ved=0ahUKEwj9o7-S9tvUAhWl24MKHYjLCwAQFghPMAw&url=http%3A%2F%2Fwww.mathematicaguidebooks.org%2Fscripts%2Fdownload_file.cgi%3Fsoftware_download%3DSample_Section_Symbolics.nb.pdf&usg=AFQjCNHYR408D7qpaYvJC7500ylz9iY0Mw

Converts the Wikipedia parametric equation to implicit form, using Mathematica.
"The result is a large polynomial.
It is of total degree 24, has 1212 terms and coefficients with up to 23 digits."
*/

// This presently sucks in Curv. The cost of the union grows nonlinearly
// with the number of shapes unioned.
union ( for (t in [0..tau by tau/20])
    sphere .1 >> translate(sin(t) + 2*sin(2*t), cos(t) - 2*cos(2*t), -sin(3*t)),
)

// TODO:
// 1. optimize union, etc.
// 2. Define an adaptively sampled parametric curve primitive.
