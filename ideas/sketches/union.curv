// This was an experiment to fix union to have an exact SDF inside.
// It only works in special cases, produces a bad SDF in other cases.

m_union s1 s2 = make_shape {
    dist p = min(s1.dist p, s2.dist p),
    is_2d = s1.is_2d && s2.is_2d,
    is_3d = s1.is_3d && s2.is_3d,
};

m_shape = make_shape {
    dist(x,y,z,t) = min(x,y),
    is_2d = true,
};

eu_shape = make_shape {
    dist(x,y,z,t) = eumin(x,y),
    is_2d = true,
};
eu_union(s1,s2) = make_shape {
    dist p = eumin(s1.dist p, s2.dist p),
    is_2d = s1.is_2d && s2.is_2d,
    is_3d = s1.is_3d && s2.is_3d,
};

eumin(x,y) = if (x<0 && y<0) -mag(x,y) else min(x,y);

/*
eu_shape = rect_eu((0,0),(inf,inf)) >> complement;

// Axis aligned rectangle with a Euclidean distance field. Arg is vec2.
rect_eu b = make_shape {
    dist(x,y,z,t) = (
        var d := abs(x,y) - b;
        min(max d, 0) + mag(max(d,0))
    ),
    bbox = [[-b[X],-b[Y],0],[b[X],b[Y],0]],
    is_2d = true,
};
*/


//eu_shape >> distance_field
// a mitred distance field
//m_shape >> distance_field

/*
eu_union(
  circle 1,
  square 2 >> translate(1,1)
) >> scale 4 >> distance_field
*/
eu_union(
    rect_eu(1,1),
    rect_eu(1,1) >> translate(2,0)
) >> scale 4 >> /*gradient 1.5*/ distance_field
