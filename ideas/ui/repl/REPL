The REPL should support:
* a debugger.
* examining and mutating the state of a running program.
* examining and mutating all of the session state.
* opening and managing multiple viewer windows.
  * look at how <userland.org> visualizes pipeline stages.
* live editing.
* online documentation and contextual help.
* inline graphics.
* Advanced UI. Consider Jupyter, <userland.org>, Acme, ...

Completeness properties -- see [[gui/Reification]]:
* Anything you can do in the Viewer or in a future Curv GUI, which changes
  the state of the UI, has a corresponding REPL command.
* There is a command history, which can be made persistent, and which is
  representable as REPL commands.
* Starting from a clean state, replaying the command log will exactly reproduce
  the state of the UI.
* There is a universal undo which acts on the command log.
  Undo can be invoked from the REPL.
* GUI state (eg, parameter values, camera state) can be copied, and pasted,
  and represented as text. Just as the Curv language itself reifies graphics
  as code, the reified UI reifies everything that's visual in the UI.

The REPL should be integrated with the live-edit editing window
and with the viewer window.

The magic REPL variable `render` is initialized with Render_Opts values
from config and the -O program options. It is used to configure default
values for a Viewer window.
    render.background := blue

When a Viewer is open, changing `render` from the REPL updates the Viewer
configuration dynamically. That's plausible, as long the viewed shape
doesn't have a `render` field.

* But, what happens when we extend shapes to support a `render` field?
  Then it makes sense to have two copies of the `render` field: one containing
  the viewer state, and one containing the default or configuration state.
* And what happens when we support multiple viewer windows? Eg, in live-edit
  mode, there could be a file Viewer and a REPL command Viewer. Then we need
  to assign names to the Viewer windows.

The magic REPL variable `parameters` is bound to the parameters in a parametric
shape being displayed in the Viewer window. You can modify these parameters
from the REPL.
    parameters.angle := 90*deg
This complicates my idea of opening multiple Viewer windows from the REPL.

In live-edit mode, the REPL should have access to bindings defined in the
current edit window.
* In a module-oriented language, where the top level of a program is a set of
  definitions, plus either a result expression or a 'main' binding, the
  live-edit REPL will naturally have access to these top level bindings.
  This is an important feature.
* A Curv program is usually either a library or a shape program like this:
    parametric <parameters> in let <top-level-bindings> in <shape-expression>
* There is a REPL variable (`result`) that contains the result of evaluating
  the source when the source code was last saved. This gives access to
  library bindings and lets you inspect the shape value.
* There is a REPL variable (`bindings`) that contains any top level local
  bindings. If the top-level expression is a binding construct (parametric,
  let, where), whose body is optionally another binding construct
  (recursively), then all these bindings are collected into `bindings`.

Assignment statements work in the REPL, because all statement types are
supported. Executing statements in the REPL is a way of learning statement
semantics.

If assignment statements work in the REPL, then what variables can be assigned?
* `render` and `parameters` are assignable.
* `result` and `bindings` ought to be readonly.
* Standard bindings ought to be readonly. In a function, non-local variables
  are not assignable.
* New variables defined within the REPL session by executing definitions
  ought to be assignable, analogous to how local variables are assignable
  within a function.

The debugger will also be controlled from the REPL.

In a bring-your-own-editor dev environment, how are PL REPLs integrated with
your editor?
* https://clojure.org/guides/repl/basic_usage
  suggests copying and pasting definitions from your edit window to your REPL.
  Multi-line definitions ought to be supported by the Curv REPL so that this
  works.
* Some editors have Clojure REPL integrations.
* The live-edit REPL reads and evaluates the source file each time it is
  saved, so this is when the REPL state is synched with the source state.
  There is a REPL variable that contains the result of evaluating the source.

REPL automation.
* You can define bindings within the REPL for automating tasks.
  Eg, data visualization functions, for visualizing data structures using a
  Viewer window.
* How do you get these bindings into the REPL?
  * Include a library: `include lib.visualize`.
  * Add configuration for specifying default REPL bindings.
* Do we need user-defined REPL procedures for mutating REPL state?
  * What, though? There's not much state you can usefully modify.
    With the addition of a debugger, maybe that changes?
  * Curv doesn't have user defined procedures, and if it did, they can't modify
    non-local variables, according to the doctrine. Is there a way around this?
    The doctrine states that mutable state must be explicitly passed in and out
    of a function to effect state change.
  * Maybe add syntax that simplifies stereotypical function calls that are
    used for this purpose? Eg, `record!function` modifies fields within record,
    is short for record := function record.

Can you export files from the REPL? Eg,
    export(shape, filename)
I guess this is a statement, so you can use statement abstraction, eg, put it
into a loop. So now Curv is a scripting language, which creates a need for
user defined procedures, reading directories, a general Unix interface.
This is pretty far out of scope of the original design. For security reasons,
I don't want shape files to have these kind of side effects.

Multiple viewer windows is blocked on ImGui:
https://github.com/ocornut/imgui/issues/586
https://github.com/ocornut/imgui/issues/1542 (in 'docking' branch)
