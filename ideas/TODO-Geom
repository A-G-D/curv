# Redesign Shape API

## TODO:
* `show_colour colour` -- maybe this is: `make_texture colour|cfield`
* repeat_x repeat_xy repeat_xyz
  * Fix distance field. Evaluate cell field *2 for _x, *4 for _xy, *8 for _xyz.
    Maybe a 'fast:' option to disable this.
  * API for finite repetition. range: option.
  * Support parallelogram shaped cells like ShapeJS? Then maybe repeat_x name
    is misleading. Also, what is name for hex shaped cells?
    rep_strip, rep_rect, rep_box.
* repeat_mirror_x
  Maybe use `repeat_mirror normal`, after `reflect` API.
* `cone {d, h}`:
  * What is API for infinite cone?
    Maybe cone{h,normal} or cone{h,slope} or cone{h,angle},
    with apex at origin, and h can be inf.
  * Maybe finite cone should be centred vertically.
* Change bbox to {min:vec,max:vec}? Use bbox.min instead of bbox[MIN].
  3 overloadings of rect:
    rect(dx,dy)
    rect{min:(xmin,ymin), max:(xmax,ymax)}
    rect{xmin=-inf,ymin=-inf,xmax=inf,ymax=inf}

## Intensity Fields, Texture Constructors
I should test out two alternative APIs for constructing textures.
 1. A rich set of intensity field constructors & manipulators.
    ifields are composed with cmaps to construct textures.
 2. Texture constructors that directly construct textures from cmaps.

`i_log_spiral opts`

## Intensity Fields and Transformations
An ifield is represented by (a) a function, (b) a record containing an
`intensity` field, which is a function. And other optional metadata?
Like, the gradient of the ifield at a given point?

Transformations of ifields. There should be a way to apply a stock
transformation to an ifield.
 1. transform.f is a function mapping [x,y,z,t] to [x,y,z,t].
    compose[transform.f, ifield]
 2. ifields are records.
    A transform maps a shape-or-ifield to another shape-or-ifield.
    This complicates the implementation of transforms, but maybe we introduce
    a helper function to reduce the code.
        make_transform {
           f(x,y,z,t)=...;   // forward coordinate transform
           inv(x,y,z,t)=...; // inverse coordinate transform
           make_dist shape = ...; // optional; map shape to dist function
           make_bbox shape = ...; // optional; map shape to bbox
        }
        make_transform warp shape =

If we gonna generalize transformations, then how about:
 * Apply a transformation to a point, or a list of points.
 * Compose transformations.

## Tilt
* `tilt axis transform shape`
  Modify 'transform' so that the local +Z axis is 'axis'.
  Same as: `tilt{from: Z_axis, to: axis} ...`.
  Eg, torus{minor:1, major:2} >> tilt X_axis (twist (tau/4))
* `tilt{from: v1, to: v2} transform shape`

    tilt{from: v1, to: v2} transform shape =
     if (v1 == v2)
       transform shape
     else
       shape >> rotate{from:v1, to:v2} >> transform >> rotate{from:v2, to:v1};

Transforms that benefit from tilt (or, add an axis argument to each one):
    repeat_x, repeat_xy, repeat_xyz, repeat_mirror_x, repeat_radial
    align
    shear_x, shear_xy
    local_taper_x, local_taper_xy
    twist
    bend
    swirl
2D->3D transforms: can't use tilt, need to post-rotate
    pancake
    perimeter_extrude
    extrude
    revolve
3D->2D transforms: can't use tilt, need to pre-rotate the 3D shape.
    slice

## 3D->2D
existing: slice_xy, slice_xz, slice_yz
Can these be combined into a single, more general primitive?

Ideas:

 1. `slice shape`
    Intersect shape with the XY plane, don't move result out of XY plane.
    This is the most natural case for `slice`. To intersect a 3D shape with
    other planes and leave result in the XY plane, pre-rotate the shape.
    Eg, shape>>rotate{from:Z_axis,to:X_axis}>>slice is like slice_yz shape.

 2. `slice axis shape`.
    'axis' is normal to the plane used to slice 'shape'. Plane intersects
    origin. Similar to `reflect` API. Eg, `slice Z_axis shape` is like slice_xy.
    `slice X_axis` is like slice_yz.

 3. `slice shape`
    `slice axis shape`
    Overloaded function.

## Interpolators

(An interpolator is a function that maps an intensity value between 0 and 1
onto a value.)

d3-interpolate is awesome:
  https://github.com/d3/d3-interpolate

Curried lerp: lerp (a,b) i

## Colours

Black is a unique, absolute colour (the absence of light).

White is not a unique, absolute colour, either in physics, or in the
physiology of human vision. Each colour space defines its own white point.

An RGB colour space has 3 coordinates (R,G,B), meaning red, green and blue,
and is specified by parameters: the absolute colours of the red, green and
blue primaries, the white point, a gamma curve.

Colour Space interface:
  cspace(coordinates) -> colour
  cspace.from colour -> (coordinates)

Colour spaces:
  linRGB
    * The internal representation of colour used by Curv. Device dependent,
      linear RGB.
  sRGB
  sRGB.HSV
    * Old and popular, better than RGB for colour picking. I implemented it
      because I've ported several pieces of GLSL code that use it.
  sRGB.HSL
    * No plan to implement it yet. But it's used on the web.
  sRGB.HWB
    * Planned for future, since it's the most intuitive RGB based coordinate
      system for colour picking for artists. Part of CSS Level 4.
  LAB
    * Perceptually uniform.
    * L is luminance (absolute brightness).
    * A is the red-green axis.
    * B is the blue-yellow axis.
    * The LAB gamut covers all perceivable colours. When converting LAB
      coordinates to internal representation, during the construction of
      a colour value, we use linRGB coordinates outside the range 0...1,
      and clamp during lighting calculations.
    * Best overall choice for colour interpolation (linear gradients).
      Subjectively, the gradients look good, and have a minimum of unexpected
      behaviour.
      http://howaboutanorange.com/blog/2011/08/10/color_interpolation/
      * Brightness (luminance) increases or decreases monotonically and
        uniformly across the gradient.
        Neither property holds for RGB interpolation.
      * You don't get unexpected hues when interpolating between colours
        on opposite sides of the colour wheel. Eg, you don't get violet
        when interpolating between blue and orange, you get neutral colours
        instead.
  HCL
    * https://en.wikipedia.org/wiki/HCL_color_space
    * https://bl.ocks.org/mbostock/3014589
    * A simple transform of LAB coordinates, which is more logically organized
      than LAB for the purpose of colour picking. All of the hues are on
      the H axis.
    * perceptually uniform.
    * Useful for colour interpolation in cases where you prefer to cycle through
      the colour wheel when interpolating between distant hues, rather than
      pass through a neutral colour when interpolating between two relatively
      more saturated colours. In HCL interpolation, unlike LAB,
      the Chroma (saturation) increases or decreases monotonically.

## Colour Maps

gradient_cmap{cspace=LAB, range:(c1,c2)}
  Simple gradient cmap between two colours.
    = i -> cspace(lerp(cspace.from c1, cspace.from c2) i)

  You get a choice of which colour space to perform the linear interpolation in.
  * The default is LAB, since that usually produces the best looking results.
  * Unlike other colour libraries, this API does not default to interpolation
    in the same colour space used to pick the colours. LAB is the best
    default colour space for interpolation, but it's not a good choice for
    colour picking.
  * linRGB is rarely a good choice, since it doesn't produce a perceptually
    linear gradient. But you might need it for physically realistic
    modelling of some system involving light mixing.
  * sRGB might be appropriate if you are porting code from another language.

  We don't want to linear interpolate between 2 colours in linear RGB space,
  it doesn't produce a perceptually linear gradient. Better to do it in sRGB
  space.

  Maybe support HCL: https://en.wikipedia.org/wiki/HCL_color_space
  https://bl.ocks.org/mbostock/3014589

  LAB (properly written L*a*b* or CIELAB) and HCL are absolute colour spaces.
  (Some parts of Wikipedia imply that you have to choose a white point first.)

  This seemingly opens a can of worms.

linear colour maps:
 * CubeHelix: https://www.mrao.cam.ac.uk/~dag/CUBEHELIX/
   Properties: Perceptually uniform, monotonically increasing luminance
   from black to white. Maximum contrast between neighbouring colours, by
   cycling through the hues. Designed for data visualization.

``gradient_cmap clist``
  Construct a colour map as a sequence of one or more colour gradients.
  The ``clist`` is a list of two or more entries.
  Each entry is ``(intensity,colour)``, ordered with monotonically increasing intensity values.
  The first intensity must be ``0``, and the last must be ``1``.
  A gradient is constructed between each pair of entries.

``striped_cmap clist``
  Construct a colour map as a sequence of constant-colour stripes.
  The ``clist`` argument is the same as for ``gradient_cmap``,
  except that the final entry has an intensity of < 1,
  and one stripe is constructed for each entry.
  

## Transformations

### Scale vs Stretch
Similarity Transformations (including `scale`) preserve the structure of
the distance field.
Deformations (including `stretch`) do not preserve distance field structure.
* distinguish `scale` from `stretch`

### Shear
Is there a generalization of `shear_x` and `shear_xy`? Yes.
Should they be combined into a single generic operation `shear`? Not sure.

A 2D shear is characterized by an invariant line L and a Num shear factor K.
Lines parallel to L are translated proportional to K and their perpendicular
distance from L. Eg, existing `shear_x` fixes L as the X axis.

A 3D shear is characterized by an invariant plane P and a Vec2 shear factor K.
Planes parallel to P are translated proportional to K and their perpendicular
distance from P. Eg, existing `shear_xy` fixes P as the XY plane.

We can generalize `shear_x` and `shear_xy` into `shear2d` and `shear3d`,
by allowing the invariant line/plane to be specified as an optional argument.
We'll restrict the invariant line/plane to pass through the origin. Then,
  shear2d{is_num k, is_vec2 invar = X_axis}
  shear3d{is_vec2 k, invar:(v1,v2)}

I could combine shear2d and shear3d into a single overloaded `shear` function,
but maybe I shouldn't.

Here's another path, which I won't follow:
* shear(kx,ky) or skew(anglex,angley) is commonly used by 2D graphics APIs.
* shear([xy,xz],[yx,yz],[zx,zy]) is the 3D generalization (since a 3D
  transformation matrix has 6 shear parameters). Too many parameters.

### Reflect
reflect axis = with_rotation{from:axis, to:X_axis} reflect_x
where
   reflect_x shape = ...;

with_rotation{from: v1, to: v2} transform shape =
 if (v1 == v2)
   transform shape
 else
   shape >> rotate{from:v1, to:v2} >> transform >> rotate{from:v2, to:v1};

rotate a =
    a >> match [
    {from: (is_vec2 v1), to: (is_vec2 v2)} ->
        ...
    {from: (make_vec3 >> v1), to: (make_vec3 >> v2)} ->
        ...
    ...
    ];

X_axis = [1,0];
Y_axis = [0,1];
Z_axis = [0,0,1];

or use current axis definitions with make_vec2.

## Row
row d shapes
row {d,axis} shapes

## Colour
* sRGB.HWB(hue,whiteness,blackness)
* 3 functions that take 'hue' arguments: sRGB.hue,sRGB.HSV,sRGB.HWB.
  Maybe, provide named hue indexes: red,orange,yellow,...
  These names overlap with the named colours, which exist for ease of use,
  and must not be made complicated. Alternatives:
  * Two naming conventions: red,yellow,... vs h_red,h_yellow,...
    or hues.red, hues.yellow, ...
* web_hue has an argument between 0 and 360
* web_hwb(hue,whiteness,blackness): hue is between 0 and 360.
* add an HTML colour picker to the Colour page.

## Rotate_repeat
Better if the cell to repeat is above the origin.
Consistent with cylinder_transform.
Also, this constructs a shape that is mirror-symmetric about the Y axis,
which is the best axis to choose for human psychology reasons.

## Barr's Bend (local bend)
local_bend{range:[xs,xe], centre|fixed_point: x0, angle}

## Convention: bend/radial-repeat parameters

Here's a consistent convention:
* repeat_radial takes a shape centred on the Y axis, below the X axis,
  and duplicates it N times around a circle. This is the convention needed
  by regular_polygon.
* bend takes a strip centred on the Y axis, below the X axis,
  and wraps it around a cylinder. The two ends meet at the top.
  Same bending direction as local_bend. Same convention as RingWrap.
* local_bend takes a strip parallel to the X axis, and bends it.
  Positive angle means bend upwards (same direction as bend).
  Same convention as las/Mercury's Barr bend.

## Linear Repeat

repeat_x (dx) shape
repeat_xy (dx,dy) shape
repeat_xyz (dx,dy,dz) shape

Need a finite version. In repeat_x, the cell centred at the origin has
ordinal 0, and the general sequence is ...,-3,-2,-1,-,1,2,3,...

repeat_x {size:dx, range:(first,last)} shape
repeat_x {d:dx, range:(first,last)} shape

repeat_xy {d:(dx,dy), range:[(firstx,lastx), (firsty,lasty)]}
repeat_xy {d:(dx,dy), xrange:(firstx,lastx), yrange:(firsty,lasty)}
  -- if you omit xrange or yrange, they default to infinite
repeat_xy {d:(dx,dy), from:(firstx,firsty), to:(lastx,lasty)}

## Axis Parameters.

Should I add optional 'axis' parameters to transformations where it is
appropriate?
* 'rotate' already has an axis parameter. This is due to existing industry
  convention where a 3D rotation may be represented by a quaternion,
  by {axis,angle}, or other ways.
* reflect_x, reflect_y and reflect_z? Or reflect axis shape?
* Replace row_x with row, add optional axis argument. 'row {d,axis} shape'.
* I considered 'along axis transform shape', similar to 'at'.
  Different transformations have different default axes, for good reason,
  so this does not end up being simpler in any way.
* 'with_rotation{from: v1, to: v2} transform shape'
* X_axis, Y_axis, Z_axis are all vec3. This creates a type error when a 2D
  axis is needed. So maybe I accept a vec3 with a 0 Z component as a vec2
  as an axis argument. How?
  * is_axis2 a = is_vec2 a || (is_vec3 a && a[Z]==0);
    Then ignore the Z component of 'a', or use a[[X,Y]], or:
    let axis = make_axis2 a;
  * Implement cast patterns?

reflect axis shape =
   //Huge case analysis to optimize axis values that are aligned with the X, Y
   //or Z axes. Or, rotate the axis onto the X axis, then implement one case,
   //then rotate back. Put the optimizations into rotate or with_rotation.
   with_rotation{from:axis, to:X_axis} reflect_x
where
   reflect_x = ...;
   with_rotation{from: v1, to: v2} transform shape =
     if (v1 == v2)
       transform shape
     else
       shape >> rotate{from:v1, to:v2} >> transform >> rotate{from:v2, to:v1};


## axis-aligned rectangle (bbox2)

A bbox2 is represented as a matrix, ((xmin,ymin),(xmax,ymax)).
The top level elements are referenced using bb[MIN] and bb[MAX].
Maybe use a record instead?
  {min:(xmin,ymin), max:(xmax,ymax)}
Then use bb.min and bb.max.

Maybe support a variant,
  {xmin=-inf,ymin=-inf,zmin=-inf,xmax=inf,ymax=inf,zmax=inf}
which is useful for cropping along specified boundaries using `intersection`.

make_bbox2 is a constructor that accepts either form.
    rect b =
        if (is_vec2 b)
            ...
        else
            let bb = make_bbox2 b;
            in ...;
Or BBox2 if I implement coercions.
    rect = switch [
        (Vec2 b) -> ...;
        (BBox2 b) -> ...;
    ];
    BBox2 = switch [
        b@(Vec2 _, Vec2 _) -> b;
        {xmin=-inf, ymin=-inf, xmax=inf, ymax=inf} -> ((xmin,ymin),(xmax,ymax));
    ];
    Vec2 = switch [
        (Num n) -> (n,n);
        (v@(Num _, Num _)) -> v;
    ];
With these definitions,
    BBox2{} == BBox2(-inf,inf) == BBox2((-inf,-inf),(inf,inf))
and it's necessary for the definition of `rect` to list the Vec2 case first,
otherwise it's matched by BBox2. It's easy to get carried away by too many
default conversions. Let's use the "predicate pattern" design instead.
    rect = switch [
        (Vec2 b) -> ...;
        (BBox2 b) -> ...;
        {Num xmin=-inf, Num ymin=-inf, Num xmax=inf, Num ymax=inf} ->
            rect((xmin,ymin),(xmax,ymax));
    ];

## rect

3 overloadings of rect:
  rect(dx,dy)
  rect{min:(xmin,ymin), max:(xmax,ymax)}
  rect{xmin=-inf,ymin=-inf,zmin=-inf,xmax=inf,ymax=inf,zmax=inf}

Colour Atlas Data Structures
============================
An Intensity is a number between 0 and 1 inclusive.

A Colour comprises red, green and blue Intensities.
* just an RGB triple; that's what colour functions return.

A Colour Map is a function mapping an Intensity onto a Colour.
* just a function value
* {colour_map: f}
* eg, rainbow i = sRGB.HSV(i,1,1);

A 2D or 3D Intensity Field maps a point (x,y) or (x,y,z) to an Intensity.
* Could be a function.
* Could be a variant of Shape: {is_2d,is_3d,intensity}
  This type is viewable as graphics.

A 2D or 3D Colour Field maps a point (x,y) or (x,y,z) to a Colour.
If you compose a Colour Map with an Intensity Field you get a Colour Field.
* Could be a function.
* Could be a supertype of Shape: {is_2d,is_3d,colour}
  This type is viewable as graphics.
