lib: a hierarchical module namespace for the standard library
=============================================================
Curv is meant to have a large standard library that provides a rich set
of primitives for constructing shapes. The new `lib` feature allows these
primitives to be organized into a hierarchical module namespace, with modules
that are only loaded into memory on first reference.

Currently defined library modules:
* lib.web_colour : defines all of the standard CSS colour names

Here is how you can use lib.web_colour:

    lib.web_colour.peach_puff

    let
        include lib.web_colour;
    in
        peach_puff

    let
        wc = lib.web_colour;
    in
        wc.peach_puff

The source code for library modules is found in lib/curv, and these files
are installed in /usr/local/lib/curv by `make install`.

Here are some ideas for new library modules.

blend
    A richer set of blending primitives, pulled from multiple sources.
    @gsohler is working on a pull request to add the Mercury blend primitives
    from http://mercury.sexy/hg_sdf/
noise
    Math functions that hash their arguments to generate pseudo-random numbers
    that represent different kinds of visual noise patterns. Eg,
    * white noise (uniformly distributed random numbers).
    * value noise.
    * gradient noise.
    * fractal noise (fractal brownian motion). Useful for smoke, clouds,
      mountains, procedural textures.
    * cellular noise, aka Worley noise, aka Voronoi noise.
    This is a foundation for other library modules, such as fractal and texture.
    Resources:
    * http://github.com/ashima/webgl-noise
    * https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
    * https://www.shadertoy.com/results?query=tag%3Dnoise
fractal
    Primitives for making fractals, perhaps based on Mandelbulber
    and the example code in Fragmentarium.
texture
    Primitives for making 2D and 3D procedural textures.
sculpt
    Engraving & embossing primitives. Modify or deform the surface of an object,
    in order to apply a decorative pattern.
lattice
    Regular lattices, like cubic and tetrahedron/octahedron.
    Individually construct the vertices, edges and faces of such lattices.
    A "Voronoi" lattice based on cellular noise.
polyhedron
    Construct regular polyhedra, such as platonic, archimedean, catalan,
    and their derivatives.
    Individually construct the vertices, edges and faces of such polyhedra.
    * Investigate Knighty's "fold and cut polyhedra" technique.
      Example GLSL code can be found in Fragmentarium.
      I've tried it in Curv and it works.
      See also: https://syntopia.github.io/Polytopia/polytopes.html
    * Is the Wythoff Construction relevant?
      See: https://en.wikipedia.org/wiki/Wythoff_construction
    Transform polyhedra into new polyhedra using Conway polyhedron notation.
repetition & space folding
    Eg, the Mercury space folding operators from http://mercury.sexy/hg_sdf/
    There might be overlap with the lattice and polyhedron modules:
    consider if APIs should be be integrated.

Additional resources:
Look at the examples in Fragmentarium, or perhaps shadertoy.com, and recreate
interesting models using high level library primitives, inventing new
primitives as necessary.
