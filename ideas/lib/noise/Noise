A Simple Noise Library
======================
Initially, I want gradient noise (SuperSimplex, replaces value noise and older
gradient noise algorithms), fractal, and voronoi/worley/cellular noise.
Just the basics. This is just the tip of the iceberg, of course.

White Noise
-----------
I've got this mostly figured out: hash an arbitrary number onto the range [0,1).
There are multiple algorithms that trade quality for speed.

Smooth Noise
------------
This is Value and Gradient noise. It has a characteristic low frequency,
and is used as an ingredient to make fractal noise.

The best choice may be Super-Simplex Noise, based on speed and quality. But:
 * No 4D implementation can be found on internet.
 * No work on automatically computing the gradient can be found.
 * It's not obvious who invented it. github.com/kelvin13 is the best
   candidate so far. But his library is in Swift. Razaekel@github claims
   the original algorithm is in Java.
 * The algorithm uses a pseudo-randomly generated lookup table.
   Kelvin13@github does not guarantee bounds for the max/min values output by
   the algorithm. Adudney@github submitted the Rust port to noise-rs.
   He generated a lookup table, then used Mathematica to determine the
   maximum values and guarantee an exact output range.

Value Noise
-----------
This looks like crap, with strong visual artifacts tied to grid spacing,
but it is somewhat cheaper than gradient noise. The artifacts are less of
a problem when it is mixed into fractal noise.

Benchmarks show it's about 1.2–1.3× faster than Simplex noise. (noise-rs)

SuperSimplex Noise is 25% faster than Simplex noise and higher quality.
So... why bother with anything else?

Gradient Noise
--------------
There is the original Perlin Noise, aka Classic Noise.
It is expensive, and has "visually-significant directional artifacts".
It tends to align all of its features to the cardinal axes and to the diagonals.
It's not easy to compute the gradient.
It uses sequential interpolation along each dimension. This is expensive,
and perhaps contributes to directional artifacts, but it also ensures that
a 2D slice of 3D classic noise looks like 2D classic noise, which can be a
useful property.

Simplex Noise is Perlin's successor to Perlin noise.
* Simplex noise has a lower computational complexity and requires fewer
  multiplications.
* Simplex noise scales to higher dimensions (4D, 5D and up) with much less
  computational cost, the complexity is O(N) for N dimensions instead of the
  O(2^N) of classic Noise.
* Simplex noise has no noticeable directional artifacts.
* Simplex noise has a well-defined and continuous gradient everywhere
  that can be computed quite cheaply.
From: "Simplex Noise Demystified"
https://software.intel.com/sites/default/files/m/0/c/9/simplexnoise.pdf

2D simplex noise is computed on a hex/triangular grid, while 3D simplex
noise is computed on a tetrahedral grid (Tetragonal disphenoid honeycomb,
a cube is subdivided into 6 tetras). A 2D slice of 3D simplex noise
does not look like 2D simplex noise. Likewise for a 3D slice of 4D simplex.

OpenSimplex Noise is a later competitor of Simplex noise.
In 3D, it uses a tet-oct honeycomb.
OpenSimplex noise uses a larger kernel size than Simplex noise.
The result is a smoother appearance at the cost of performance.
Created by Kurt Spencer, 2014, in Java.
https://gist.github.com/KdotJPG/b1270127455a94ac5d19

Super-simplex noise runs about 25% faster than Simplex, and produces higher
quality noise. No 4D version.

Super Simplex Noise
-------------------
Super Simplex Noise is another modification of Simplex Noise.
It is as fast as Value noise (the previous performance winner),
and better quality than any previous competitor.

https://github.com/kelvin13/noise/wiki/struct-SuperSimplexNoise2D
   Super-simplex noise is an improved version of simplex noise which runs faster
   and scales better to higher dimensions. In almost all cases, super-simplex
   noise should be preferred over its predecessors. Super-simplex noise
   runs about 25% faster than its simplex predecessor, and produces higher
   quality gradient noise. (Some of this only applies to the 2D version, maybe)

   Super Simplex Noise 3D generally looks somewhat better visually than its
   two-dimensional counterpart, but runs about 20% slower. SuperSimplexNoise3D
   is similar (but not identical) to Blender Perlin noise. The Scale of
   Blender Perlin noise is approximately equivalent to 5/4 the frequency of
   SuperSimplexNoise3D. The range of Blender Perlin noise is approximately
   0.1875 ... 0.8125 in SuperSimplexNoise3D units.

Issues:
 * There is no 4D implementation.
 * There is a version with analytical derivatives from the original author.
   https://www.reddit.com/r/proceduralgeneration/comments/97lnvp/is_analytical_integration_of_perlin_noise_possible/e4i64pi/
 * The algorithm uses a pseudo-randomly generated lookup table.
   Kelvin13@github does not guarantee bounds for the max/min values output by
   the algorithm. Adudney@github submitted the Rust port to noise-rs.
   He generated a lookup table, then used Mathematica to determine the
   maximum values and guarantee an exact output range.
   See https://github.com/Razaekel/noise-rs/pull/168 for commentary

Super Simplex Noise was invented by Kurt Spencer, 2017, @KdotJPG.
https://github.com/Boethie/Very-Old-Genesis/blob/master/src/main/java/genesis/util/noise/SuperSimplexNoise.java

Some background on this:
    https://github.com/Razaekel/noise-rs/issues/141
    @adudney
    SuperSimplex is not described in a blog post or anything, it was merely
    another algorithm from the same person behind OpenSimplex, that as far as I
    recall, doesn't have the same triangular artifacts.

    The only source for SuperSimplex is a single java file linked in their
    reddit history:

    https://www.reddit.com/r/proceduralgeneration/comments/dfs9fv/procedural_rivers_4km_8km_long_that_change/f35x9pr/

    https://www.reddit.com/r/proceduralgeneration/comments/97lnvp/is_analytical_integration_of_perlin_noise_possible/e4i64pi/

In the 2D case, SuperSimplex uses the same triangle lattice as OpenSimplex.
In the 3D case, it doesn't use simplexes. It uses a tilted cubic lattice.
https://github.com/kelvin13/noise/blob/master/sources/noise/gradient.swift

Improved implementation in noise-rs (guaranteed bounds on output values)

Benefits compared to OpenSimplex:
 * https://github.com/Razaekel/noise-rs/issues/141
   In noise-rs, open_simplex2 shows some triangular artifacts, ...
   The noise function is not smooth at the edges of the open simplex triangle
   grid. ... OpenSimplex is a very complicated algorithm, the fix is difficult
   and makes the algorithm run slower. ...
   At this point I'm considering just giving up and implementing Super Simplex
   noise, it seems like a much simpler implementation and it handles
   all this stuff in for loops rather than complex branching logic.

Other Libraries
---------------
Here are some other libraries that I can copy ideas from.

noise-rs
--------
https://github.com/Razaekel/noise-rs
https://docs.rs/noise/0.6.0/noise/

Math functions that hash their arguments to generate pseudo-random numbers
that represent different kinds of visual noise patterns. Eg,
* white noise (uniformly distributed random numbers).
* value noise.
* gradient noise.
* fractal noise (fractal brownian motion). Useful for smoke, clouds,
  mountains, procedural textures.
* cellular noise, aka Worley noise, aka Voronoi noise.
This is a foundation for other library modules, such as fractal and texture.
Resources:
* http://github.com/ashima/webgl-noise
* https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
* https://www.shadertoy.com/results?query=tag%3Dnoise

kelvin13/noise
--------------
https://github.com/kelvin13/noise

Has some cool features. Seems to be the earliest reference for Super Simplex
Noise. Has an FBM noise composition framework. Tiled noise variants.
