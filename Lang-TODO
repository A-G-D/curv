GL:
* echo, assert, warning, error are ignored in GL.
* GL: && || if use lazy evaluation

String:
* Conversion between strings and lists of (integer) code points:
  str_to_code and code_to_str.
* Unicode strings. str[i] is the i'th grapheme cluster. `count str` is the
  number of grapheme clusters. To operate on code points instead, first use
  str_to_code.
* If two grapheme clusters are guaranteed (by the Unicode standard)
  to have the same printed representation, then they compare equal.
* $id shortcut. Same as ${id} or $(id)?
  * $(id) interpretation is useful for composing debug messages with echo.
    Eg, echo "x=$x, y=$y".
  * ${id} interpretation is useful for interpolating named characters and
    named substrings. Eg, nl=code_to_str 10; "hello world$nl".
* $+EE or $[0xEE], short for ${code_to_str[0xEE]}.

Numbers:
* hexadecimal numerals. Useful for Unicode code points and web colours.

Libraries.
* use(file "pathname.curv") -- arg evaluated as const expr in builtin namespace,
  file must evaluate to a module.
* `lib` is a struct for accessing library files in /usr/local/lib/curv.
  `lib.foo` loads /usr/local/lib/curv/foo.curv.
  * `use(lib.foo)`
* modules: _foo is not exported, is omitted from the public dictionary.
  curv::Module has a public dictionary and a debug dictionary.
  _foo is private in std.curv, and in all other *.curv files.

Patterns (Bindings and Lambda):
* action thunks, instead of value thunks.
* (x,y) = f(a);
* {x,y}=... is pattern matching on a record. Extra fields on right -> error.
* Record patterns can be used as function parameters.
* Default values in record patterns, `{x=0,y=1} = ...`
* functions with refutable parameter patterns lead to:
  switch((x,y,z)->..., a->...) -- returns a function
* see also Parameter Preconditions

Indexing:
* a[i] := item, i is an integer
* s.key := item
* remove a'b ?

Slices:
* `a[i..<count a]` is inconvenient, repeats `a`. Fix?
  * Maybe a[...] is a special syntactic context, in which:
    * a[..j] and a[i..] are special abbreviations.
    * `end` is bound to index of final element, like MatLab.
      So a[i..end]
  * Maybe `i..` is an infinite range value, can be used to slice a list.
    Short for `i..inf`. `count(i..)==inf`.
  * `take n list` and `drop n list`.
  * Can't support Python negative indexes (-1 indexes the last element)
    because [0..count a - 1] is a list of the indexes of a, even if a is empty,
    meaning that [0..-1] denotes [].
* Generalized multidimensional array slicing?

Slice assignment:
* `v[X,Z] := v2`, similar to GLSL vector swizzle assignment.
  Source and destination lists have the same count.
* a[i..j] := list. In a range slice assignment,
  source and destination lists can have different counts.
* Generalized `a[list1] := list2`. list1 and list2 can have different counts.
  If list1 is shorter, extra elements at end of list2 are appended to final
  element indexed by list1.
  If list1 is longer, extra elements indexed by list1 are deleted.

Vectorized boolean operations:
* vectorize `bit`
* Vectorized relations are:
  * <' <=' >' >=' ==' !='
  * .< .<= .> .>= .== .!= (Julia)
  * less, greater, equal, less_or_equal, greater_or_equal, not_equal
  * less, greater, equal, not_less, not_greater, not_equal
* `not` is vectorized version of `!`.
* `all` and `any` are vectorized boolean monoids for && and ||.
  * Name is consistent with GLSL,R,Julia,Python,Matlab.
  * Use some(pred)list, every(pred)list, name consistent with Javascript.
* ifelse(cond,thenval,elseval)
* Rationale: vectorized boolean ops have different names than unvectorized ones.
  * x==y compares vectors and returns bool, unlike xs=='ys.
  * a&&b short circuits if a==false, but all(a,b) must evaluate b if a==false
    to implement broadcasting.
  * ifelse(b,c,a) must evaluate all 3 arguments if b is an array.
  * The unvectorized relations are guaranteed to return Bool, or fail,
    which is appropriate for the most common use case, which is to construct
    an argument for if, &&, ||, which require a Bool argument.
* Many languages represent boolean values as the numbers 0 and 1.
  In an array language, an array of booleans represented as 0 and 1
  is a useful representation, you can do arithmetic on it.
  In Curv, booleans are not numbers, but you can convert between the two
  representations using vectorized operations. Eg,
  * enbool(i) = [false,true]'i;
  * debool(b) = ifelse(b, 1, 0);
  Or:
  * tobool(i), frombool(b)
  Or:
  * idiom: i != 0, or i !=' 0
  * bit(b) = ifelse(b, 1, 0);

Design by contract:
* postconditions:
  ensure pred val = do assert(pred val) in val;
  sort x =
    ensure sorted <<
    <body of sort function>;
* parameter preconditions:
  * (predicate x) -> body
  * (x isa Constructor) -> body -- likely not needed; see Data Abstraction
  * (x >= 0) -> body

Debug actions:
* echo_timing(string,expr), returns value of expr
  * Might want to measure eval time while ignoring result:
    * Assign value to a variable, don't use variable.
    * `ignore(arg)` is an action that evaluates and ignores arg.
* `enter_debugger`, aka `debug`

Generalized Definitions:
* id = expr
* ( definition )
* def1; def2; def3
* `[x,y,z] = expr` and other patterns
* `if (cond) (a=foo;b=bar) else (a=bar;b=foo)`
* `use {...}`, `use (constant in std namespace)`

Lexical:
* unicode operators (needs re2c)
* Digit separator in numerals: ' like C++14, or _
* Support ' in identifiers (like Haskell).
* Support `foo` quoted identifiers.
  Compatibility with GUI interfaces that display
  parameter names as GUI labels, JSON object keys.
* 'foo' quoted identifiers and x `f` y infix notation.

OpenSCAD2 prototype oriented programming?
* Model parameters and shape are bundled into one value.
* Simple syntax for customizing a subset of model parameters, generating
  a new shape.
* The BOM feature: can extract model parameters from a model script,
  generate JSON output.
* Language support for using a GUI to tweak model parameters?
  `param bindings in shape`. But what does this construct? Are the parameters
  represented in the value that is constructed, or does the GUI interpret
  the syntax?
* CSG trees: output a CSG tree as JSON, read a CSG tree to reconstruct model.
  Shapes contain the name of their constructor, and their constructor
  arguments. (Implemented using a proposed 'constructor' feature.)

Data Abstraction:
* Wm. Cook distinguishes two kinds of data abstraction: CLU style "ADT"s,
  and Smalltalk style "objects". The untyped lambda calculus is enough to
  do object oriented data abstraction. Add Curv-like record literals and you
  have a more convenient syntax. By his definition, Curv is object-oriented,
  I can't avoid it, because you can easily use that programming style in Curv.
  http://www.cs.utexas.edu/~wcook/Drafts/2009/essay.pdf
* I don't need extra features to support CLU-style information hiding.
  It's not that important.
* I do need the ability to define shape "subclasses" that obey specialized
  protocols. Eg, symmetrical polyhedra that support the Conway operators.
  I can already do this: a shape protocol is defined informally as a set of
  shape fields and axioms. I don't need explicit classes or inheritance
  or other explicit language mechanisms.
* This approach uses "duck typing". A shape just has to obey the protocol,
  it doesn't have to explicitly declare that it obeys the protocol.
* Do I need a language mechanism that allows a shape or record to declare what
  protocols it supports, in support of a cheap protocol testing predicate?
  (Like `val isa protocol`.)
  * I like the idea. I want it for type declarations, Design By Contract, etc.
    And for overloading positional arguments based on type, rather than relying
    on parameter labels as in Smalltalk & Swift.
  * But it's complicated to design, implement, document.
  * Cook observes that Smalltalk programmers generally don't need or use such
    a feature. So it's likely I don't need this in Curv.
  * Cook observes a tradeoff between flexibility (duck typing) and type
    correctness (explicit typing). Academics prefer type correctness.
    Some dynamic language communities (eg Smalltalk) prefer flexibility.
  * In 1.0, support labelled parameters, de-emphasize explicit typing
    and type predicates.
